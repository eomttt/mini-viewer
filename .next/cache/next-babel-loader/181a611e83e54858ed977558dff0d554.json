{"ast":null,"code":"var _jsxFileName = \"/Users/hyuntaeeom/Projects/personal/mini-viewer/pages/viewer.tsx\";\nvar __jsx = React.createElement;\nimport React, { useState, useMemo, useEffect } from 'react';\nimport { useSelector } from 'react-redux';\nimport Layout from '../components/Layout';\nimport ViewerBottom from '../components/viewer/ViewerBottom';\nimport ViewerCount from '../components/viewer/ViewerCount';\nimport ViewerHeader from '../components/viewer/ViewerHeader';\nimport ViewerPage from '../components/viewer/ViewerPage';\nimport { VIEWER_WIDTH_RATIO, VIEWER_HEIGHT_RATIO } from '../constants/viewer';\nimport { Container } from '../styles/viewer';\n\nconst Viewer = ({\n  book,\n  viewerSpines,\n  styleLinks\n}) => {\n  const {\n    spines,\n    titles,\n    ncx\n  } = book;\n  const {\n    0: viewerWidth,\n    1: setViewerWidth\n  } = useState(0);\n  const {\n    0: viewerHeight,\n    1: setViewerHeight\n  } = useState(0);\n  const {\n    0: nowSpineIndex,\n    1: setNowSpineIndex\n  } = useState(0);\n  const {\n    0: wholePageCount,\n    1: setWholePageCount\n  } = useState(0);\n  const {\n    viewerCountList,\n    viewerPageCount\n  } = useSelector(state => state.viewer);\n  const isAnalizedSpine = useMemo(() => viewerCountList.length >= viewerSpines.length, [viewerCountList, viewerSpines]);\n  const selectedSpineIndex = useMemo(() => {\n    let spineIndex = 0;\n    let accurateCount = 0;\n    viewerCountList.some(viewerCount => {\n      if (accurateCount + viewerCount.count > viewerPageCount) {\n        spineIndex = viewerCount.index;\n        return true;\n      }\n\n      accurateCount += viewerCount.count;\n      return false;\n    });\n    return spineIndex;\n  }, [viewerPageCount, viewerCountList]);\n  const pageColumnOffset = useMemo(() => {\n    let columnOffset = viewerPageCount;\n    viewerCountList.some((viewerCount, index) => {\n      if (index < nowSpineIndex) {\n        columnOffset -= viewerCount.count;\n        return false;\n      }\n\n      return true;\n    });\n    return columnOffset;\n  }, [viewerCountList, viewerPageCount, nowSpineIndex]);\n  useEffect(() => {\n    console.log('Now spine index', selectedSpineIndex);\n    setNowSpineIndex(selectedSpineIndex);\n  }, [selectedSpineIndex]);\n  useEffect(() => {\n    setViewerWidth(Math.floor(window.innerWidth * (VIEWER_WIDTH_RATIO / 100)));\n    setViewerHeight(Math.floor(window.innerHeight * (VIEWER_HEIGHT_RATIO / 100)));\n  }, []);\n  useEffect(() => {\n    if (isAnalizedSpine) {\n      const pageCount = viewerCountList.reduce((acc, cur) => acc + cur.count, 0);\n      setWholePageCount(pageCount - 1);\n    }\n  }, [isAnalizedSpine, viewerCountList]);\n  return __jsx(Layout, {\n    styleLinks: styleLinks,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85\n    },\n    __self: this\n  }, __jsx(ViewerHeader, {\n    titles: titles,\n    ncxItem: ncx,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88\n    },\n    __self: this\n  }), __jsx(Container, {\n    styleProps: {\n      height: viewerHeight\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92\n    },\n    __self: this\n  }, isAnalizedSpine && __jsx(ViewerPage, {\n    viewerWidth: viewerWidth,\n    viewerHeight: viewerHeight,\n    pageColumnOffset: pageColumnOffset,\n    wholeColumnCount: viewerCountList[nowSpineIndex].count,\n    viewerSpine: viewerSpines[nowSpineIndex],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100\n    },\n    __self: this\n  }), __jsx(\"section\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109\n    },\n    __self: this\n  }, viewerSpines.map((viewerSpine, index) => __jsx(ViewerCount, {\n    key: viewerSpine,\n    viewerWidth: viewerWidth,\n    viewerHeight: viewerHeight,\n    spine: spines[index],\n    viewerSpine: viewerSpine,\n    viewerSpineIndex: index,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112\n    },\n    __self: this\n  })))), __jsx(ViewerBottom, {\n    sliderMaxValue: wholePageCount,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124\n    },\n    __self: this\n  }));\n}; // eslint-disable-next-line @typescript-eslint/unbound-method\n\n\nViewer.getInitialProps = async context => {\n  const {\n    req\n  } = context;\n\n  if (req) {\n    const {\n      EpubParser\n    } = require('@ridi/epub-parser');\n\n    try {\n      const parser = new EpubParser('public/jikji.epub');\n      const book = await parser.parse({\n        validatePackage: true,\n        parseStyle: false,\n        unzipPath: 'public/epub/jikji'\n      });\n      const viewerSpines = await parser.readItems(book.spines, {\n        force: true,\n        extractBody: true,\n        serializedAnchor: true,\n        ignoreScript: true,\n        basePath: 'epub/jikji'\n      });\n      return {\n        book,\n        viewerSpines,\n        styleLinks: book.styles.map(style => `epub/jikji/${style.href}`)\n      };\n    } catch (error) {\n      console.log('Error', error);\n    }\n  }\n\n  return {};\n};\n\nexport default Viewer;","map":{"version":3,"sources":["/Users/hyuntaeeom/Projects/personal/mini-viewer/pages/viewer.tsx"],"names":["React","useState","useMemo","useEffect","useSelector","Layout","ViewerBottom","ViewerCount","ViewerHeader","ViewerPage","VIEWER_WIDTH_RATIO","VIEWER_HEIGHT_RATIO","Container","Viewer","book","viewerSpines","styleLinks","spines","titles","ncx","viewerWidth","setViewerWidth","viewerHeight","setViewerHeight","nowSpineIndex","setNowSpineIndex","wholePageCount","setWholePageCount","viewerCountList","viewerPageCount","state","viewer","isAnalizedSpine","length","selectedSpineIndex","spineIndex","accurateCount","some","viewerCount","count","index","pageColumnOffset","columnOffset","console","log","Math","floor","window","innerWidth","innerHeight","pageCount","reduce","acc","cur","height","map","viewerSpine","getInitialProps","context","req","EpubParser","require","parser","parse","validatePackage","parseStyle","unzipPath","readItems","force","extractBody","serializedAnchor","ignoreScript","basePath","styles","style","href","error"],"mappings":"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","sourcesContent":["import React, {\n  useState, useMemo, useEffect, useCallback,\n} from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { NextPageContext, NextPage } from 'next';\n\nimport Layout from '../components/Layout';\nimport ViewerBottom from '../components/viewer/ViewerBottom';\nimport ViewerCount from '../components/viewer/ViewerCount';\nimport ViewerHeader from '../components/viewer/ViewerHeader';\nimport ViewerPage from '../components/viewer/ViewerPage';\n\nimport * as actions from '../reducers/viewer';\n\nimport { VIEWER_WIDTH_RATIO, VIEWER_HEIGHT_RATIO } from '../constants/viewer';\n\nimport { ReducerState } from '../interfaces';\nimport { EpubBook } from '../interfaces/books';\n\nimport { Container } from '../styles/viewer';\n\ninterface Props {\n  book: EpubBook;\n  viewerSpines: string[];\n  styleLinks: string[];\n}\n\nconst Viewer: NextPage<Props> = ({ book, viewerSpines, styleLinks }) => {\n  const { spines, titles, ncx } = book;\n\n  const [viewerWidth, setViewerWidth] = useState(0);\n  const [viewerHeight, setViewerHeight] = useState(0);\n  const [nowSpineIndex, setNowSpineIndex] = useState(0);\n  const [wholePageCount, setWholePageCount] = useState(0);\n\n  const { viewerCountList, viewerPageCount } = useSelector((state: ReducerState) => state.viewer);\n\n  const isAnalizedSpine = useMemo(() => viewerCountList.length >= viewerSpines.length, [viewerCountList, viewerSpines]);\n\n  const selectedSpineIndex = useMemo(() => {\n    let spineIndex = 0;\n    let accurateCount = 0;\n\n    viewerCountList.some((viewerCount) => {\n      if (accurateCount + viewerCount.count > viewerPageCount) {\n        spineIndex = viewerCount.index;\n        return true;\n      }\n      accurateCount += viewerCount.count;\n      return false;\n    });\n    return spineIndex;\n  }, [viewerPageCount, viewerCountList]);\n\n  const pageColumnOffset = useMemo(() => {\n    let columnOffset = viewerPageCount;\n    viewerCountList.some((viewerCount, index) => {\n      if (index < nowSpineIndex) {\n        columnOffset -= (viewerCount.count);\n        return false;\n      }\n      return true;\n    });\n    return columnOffset;\n  }, [viewerCountList, viewerPageCount, nowSpineIndex]);\n\n  useEffect(() => {\n    console.log('Now spine index', selectedSpineIndex);\n    setNowSpineIndex(selectedSpineIndex);\n  }, [selectedSpineIndex]);\n\n  useEffect(() => {\n    setViewerWidth(Math.floor(window.innerWidth * (VIEWER_WIDTH_RATIO / 100)));\n    setViewerHeight(Math.floor(window.innerHeight * (VIEWER_HEIGHT_RATIO / 100)));\n  }, []);\n\n  useEffect(() => {\n    if (isAnalizedSpine) {\n      const pageCount = viewerCountList.reduce((acc, cur) => acc + cur.count, 0);\n      setWholePageCount(pageCount - 1);\n    }\n  }, [isAnalizedSpine, viewerCountList]);\n\n  return (\n    <Layout\n      styleLinks={styleLinks}\n    >\n      <ViewerHeader\n        titles={titles}\n        ncxItem={ncx}\n      />\n      <Container\n        styleProps={{\n          height: viewerHeight,\n        }}\n      >\n        {\n        isAnalizedSpine\n        && (\n        <ViewerPage\n          viewerWidth={viewerWidth}\n          viewerHeight={viewerHeight}\n          pageColumnOffset={pageColumnOffset}\n          wholeColumnCount={viewerCountList[nowSpineIndex].count}\n          viewerSpine={viewerSpines[nowSpineIndex]}\n        />\n        )\n      }\n        <section>\n          {\n          viewerSpines.map((viewerSpine, index) => (\n            <ViewerCount\n              key={viewerSpine}\n              viewerWidth={viewerWidth}\n              viewerHeight={viewerHeight}\n              spine={spines[index]}\n              viewerSpine={viewerSpine}\n              viewerSpineIndex={index}\n            />\n          ))\n        }\n        </section>\n      </Container>\n      <ViewerBottom\n        sliderMaxValue={wholePageCount}\n      />\n    </Layout>\n  );\n};\n\n// eslint-disable-next-line @typescript-eslint/unbound-method\nViewer.getInitialProps = async (context: NextPageContext<any>): Promise<any> => {\n  const { req } = context;\n  if (req) {\n    const { EpubParser } = require('@ridi/epub-parser');\n    try {\n      const parser = new EpubParser('public/jikji.epub');\n      const book: EpubBook = await parser.parse({\n        validatePackage: true,\n        parseStyle: false,\n        unzipPath: 'public/epub/jikji',\n      });\n      const viewerSpines = await parser.readItems(book.spines, {\n        force: true,\n        extractBody: true,\n        serializedAnchor: true,\n        ignoreScript: true,\n        basePath: 'epub/jikji',\n      });\n\n      return {\n        book,\n        viewerSpines,\n        styleLinks: book.styles.map((style) => `epub/jikji/${style.href}`),\n      };\n    } catch (error) {\n      console.log('Error', error);\n    }\n  }\n\n\n  return {};\n};\n\nexport default Viewer;\n"]},"metadata":{},"sourceType":"module"}