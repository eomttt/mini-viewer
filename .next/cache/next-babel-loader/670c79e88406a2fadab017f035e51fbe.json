{"ast":null,"code":"var _jsxFileName = \"/Users/hyuntaeeom/Projects/personal/mini-viewer/pages/viewer.tsx\";\nvar __jsx = React.createElement;\nimport React, { useState, useMemo, useEffect, useCallback } from 'react';\nimport { useSelector } from 'react-redux';\nimport Layout from '../components/Layout';\nimport ViewerCount from '../components/viewer/ViewerCount';\nimport ViewerHeader from '../components/viewer/ViewerHeader';\nimport ViewerPage from '../components/viewer/ViewerPage';\nimport { VIEWER_WIDTH_RATIO, VIEWER_HEIGHT_RATIO } from '../constants/viewer';\nimport { Container } from '../styles/viewer';\n\nconst Viewer = ({\n  book,\n  viewerSpines,\n  styleLinks\n}) => {\n  const {\n    spines,\n    titles,\n    ncx\n  } = book;\n  console.log('Book', book);\n  const {\n    0: viewerWidth,\n    1: setViewerWidth\n  } = useState(0);\n  const {\n    0: viewerHeight,\n    1: setViewerHeight\n  } = useState(0);\n  const {\n    0: nowSpineIndex,\n    1: setNowSpineIndex\n  } = useState(0);\n  const {\n    0: isClickedPrev,\n    1: setIsClickedPrev\n  } = useState(false);\n  const {\n    viewerCountList,\n    selectedSpineId\n  } = useSelector(state => state.viewer);\n  const isAnalizedSpine = useMemo(() => viewerCountList.length === viewerSpines.length, [viewerCountList, viewerSpines]);\n  const selectedSpineIndex = useMemo(() => {\n    spines.some(spine => {\n      if (spine.id === selectedSpineId) {}\n    });\n  });\n  useEffect(() => {\n    setViewerWidth(Math.floor(window.innerWidth * (VIEWER_WIDTH_RATIO / 100)));\n    setViewerHeight(Math.floor(window.innerHeight * (VIEWER_HEIGHT_RATIO / 100)));\n  }, []);\n  const setNextSpine = useCallback(() => {\n    if (nowSpineIndex + 1 >= viewerSpines.length) {\n      alert('마지막 페이지 입니다.');\n    } else {\n      setNowSpineIndex(nowSpineIndex + 1);\n      setIsClickedPrev(false);\n    }\n  }, [nowSpineIndex, viewerSpines]);\n  const setPrevSpine = useCallback(() => {\n    if (nowSpineIndex - 1 < 0) {\n      alert('첫번째 페이지 입니다');\n    } else {\n      setNowSpineIndex(nowSpineIndex - 1);\n      setIsClickedPrev(true);\n    }\n  }, [nowSpineIndex]);\n  return __jsx(Layout, {\n    styleLinks: styleLinks,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70\n    },\n    __self: this\n  }, __jsx(ViewerHeader, {\n    titles: titles,\n    ncxItem: ncx,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73\n    },\n    __self: this\n  }), __jsx(Container, {\n    styleProps: {\n      height: viewerHeight\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77\n    },\n    __self: this\n  }, isAnalizedSpine && __jsx(ViewerPage, {\n    viewerWidth: viewerWidth,\n    viewerHeight: viewerHeight,\n    isShowPrevViewer: isClickedPrev,\n    wholeColumnCount: viewerCountList[nowSpineIndex].count,\n    spine: spines[nowSpineIndex],\n    viewerSpine: viewerSpines[nowSpineIndex],\n    setNextSpine: setNextSpine,\n    setPrevSpine: setPrevSpine,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85\n    },\n    __self: this\n  }), __jsx(\"section\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97\n    },\n    __self: this\n  }, viewerSpines.map((viewerSpine, index) => __jsx(ViewerCount, {\n    key: viewerSpine,\n    viewerWidth: viewerWidth,\n    viewerHeight: viewerHeight,\n    viewerSpine: viewerSpine,\n    viewerSpineIndex: index,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100\n    },\n    __self: this\n  })))));\n}; // eslint-disable-next-line @typescript-eslint/unbound-method\n\n\nViewer.getInitialProps = async context => {\n  const {\n    req\n  } = context;\n\n  if (req) {\n    const {\n      EpubParser\n    } = require('@ridi/epub-parser');\n\n    try {\n      const parser = new EpubParser('public/jikji.epub');\n      const book = await parser.parse({\n        validatePackage: true,\n        parseStyle: false,\n        unzipPath: 'public/epub/jikji'\n      });\n      const viewerSpines = await parser.readItems(book.spines, {\n        force: true,\n        extractBody: true,\n        serializedAnchor: true,\n        ignoreScript: true,\n        basePath: 'epub/jikji'\n      });\n      return {\n        book,\n        viewerSpines,\n        styleLinks: book.styles.map(style => `epub/jikji/${style.href}`)\n      };\n    } catch (error) {\n      console.log('Error', error);\n    }\n  }\n\n  return {};\n};\n\nexport default Viewer;","map":{"version":3,"sources":["/Users/hyuntaeeom/Projects/personal/mini-viewer/pages/viewer.tsx"],"names":["React","useState","useMemo","useEffect","useCallback","useSelector","Layout","ViewerCount","ViewerHeader","ViewerPage","VIEWER_WIDTH_RATIO","VIEWER_HEIGHT_RATIO","Container","Viewer","book","viewerSpines","styleLinks","spines","titles","ncx","console","log","viewerWidth","setViewerWidth","viewerHeight","setViewerHeight","nowSpineIndex","setNowSpineIndex","isClickedPrev","setIsClickedPrev","viewerCountList","selectedSpineId","state","viewer","isAnalizedSpine","length","selectedSpineIndex","some","spine","id","Math","floor","window","innerWidth","innerHeight","setNextSpine","alert","setPrevSpine","height","count","map","viewerSpine","index","getInitialProps","context","req","EpubParser","require","parser","parse","validatePackage","parseStyle","unzipPath","readItems","force","extractBody","serializedAnchor","ignoreScript","basePath","styles","style","href","error"],"mappings":"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","sourcesContent":["import React, {\n  useState, useMemo, useEffect, useCallback,\n} from 'react';\nimport { useSelector } from 'react-redux';\nimport { NextPageContext, NextPage } from 'next';\n\nimport Layout from '../components/Layout';\nimport ViewerCount from '../components/viewer/ViewerCount';\nimport ViewerHeader from '../components/viewer/ViewerHeader';\nimport ViewerPage from '../components/viewer/ViewerPage';\n\nimport { VIEWER_WIDTH_RATIO, VIEWER_HEIGHT_RATIO } from '../constants/viewer';\n\nimport { ReducerState } from '../interfaces';\nimport { EpubBook } from '../interfaces/books';\n\nimport { Container } from '../styles/viewer';\n\ninterface Props {\n  book: EpubBook;\n  viewerSpines: string[];\n  styleLinks: string[];\n}\n\nconst Viewer: NextPage<Props> = ({ book, viewerSpines, styleLinks }) => {\n  const { spines, titles, ncx } = book;\n\n  console.log('Book', book);\n\n  const [viewerWidth, setViewerWidth] = useState(0);\n  const [viewerHeight, setViewerHeight] = useState(0);\n  const [nowSpineIndex, setNowSpineIndex] = useState(0);\n  const [isClickedPrev, setIsClickedPrev] = useState(false);\n\n  const { viewerCountList, selectedSpineId } = useSelector((state: ReducerState) => state.viewer);\n\n  const isAnalizedSpine = useMemo(() => viewerCountList.length === viewerSpines.length, [viewerCountList, viewerSpines]);\n  const selectedSpineIndex = useMemo(() => {\n    spines.some((spine) => {\n      if (spine.id === selectedSpineId) {\n\n      }\n    });\n  })\n\n  useEffect(() => {\n    setViewerWidth(Math.floor(window.innerWidth * (VIEWER_WIDTH_RATIO / 100)));\n    setViewerHeight(Math.floor(window.innerHeight * (VIEWER_HEIGHT_RATIO / 100)));\n  }, []);\n\n  const setNextSpine = useCallback(() => {\n    if (nowSpineIndex + 1 >= viewerSpines.length) {\n      alert('마지막 페이지 입니다.');\n    } else {\n      setNowSpineIndex(nowSpineIndex + 1);\n      setIsClickedPrev(false);\n    }\n  }, [nowSpineIndex, viewerSpines]);\n\n  const setPrevSpine = useCallback(() => {\n    if (nowSpineIndex - 1 < 0) {\n      alert('첫번째 페이지 입니다');\n    } else {\n      setNowSpineIndex(nowSpineIndex - 1);\n      setIsClickedPrev(true);\n    }\n  }, [nowSpineIndex]);\n\n  return (\n    <Layout\n      styleLinks={styleLinks}\n    >\n      <ViewerHeader\n        titles={titles}\n        ncxItem={ncx}\n      />\n      <Container\n        styleProps={{\n          height: viewerHeight,\n        }}\n      >\n        {\n        isAnalizedSpine\n        && (\n          <ViewerPage\n            viewerWidth={viewerWidth}\n            viewerHeight={viewerHeight}\n            isShowPrevViewer={isClickedPrev}\n            wholeColumnCount={viewerCountList[nowSpineIndex].count}\n            spine={spines[nowSpineIndex]}\n            viewerSpine={viewerSpines[nowSpineIndex]}\n            setNextSpine={setNextSpine}\n            setPrevSpine={setPrevSpine}\n          />\n        )\n      }\n        <section>\n          {\n          viewerSpines.map((viewerSpine, index) => (\n            <ViewerCount\n              key={viewerSpine}\n              viewerWidth={viewerWidth}\n              viewerHeight={viewerHeight}\n              viewerSpine={viewerSpine}\n              viewerSpineIndex={index}\n            />\n          ))\n        }\n        </section>\n      </Container>\n    </Layout>\n  );\n};\n\n// eslint-disable-next-line @typescript-eslint/unbound-method\nViewer.getInitialProps = async (context: NextPageContext<any>): Promise<any> => {\n  const { req } = context;\n  if (req) {\n    const { EpubParser } = require('@ridi/epub-parser');\n    try {\n      const parser = new EpubParser('public/jikji.epub');\n      const book: EpubBook = await parser.parse({\n        validatePackage: true,\n        parseStyle: false,\n        unzipPath: 'public/epub/jikji',\n      });\n      const viewerSpines = await parser.readItems(book.spines, {\n        force: true,\n        extractBody: true,\n        serializedAnchor: true,\n        ignoreScript: true,\n        basePath: 'epub/jikji',\n      });\n\n      return {\n        book,\n        viewerSpines,\n        styleLinks: book.styles.map((style) => `epub/jikji/${style.href}`),\n      };\n    } catch (error) {\n      console.log('Error', error);\n    }\n  }\n\n\n  return {};\n};\n\nexport default Viewer;\n"]},"metadata":{},"sourceType":"module"}