{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nvar _jsxFileName = \"/Users/hyuntaeeom/Projects/personal/mini-viewer/pages/viewer.tsx\";\nvar __jsx = React.createElement;\nimport React, { useEffect, useState } from 'react';\nimport ViewerPageComponent from '../components/viewer/ViewerPage';\nimport Layout from '../components/Layout';\n\nvar Viewer = function Viewer(_ref) {\n  var book = _ref.book,\n      viewerSpines = _ref.viewerSpines,\n      styleTags = _ref.styleTags;\n\n  var _useState = useState(true),\n      flag = _useState[0],\n      setFlag = _useState[1];\n\n  useEffect(function () {\n    setTimeout(function () {\n      setFlag(true);\n    }, 3000);\n  }, []);\n  return __jsx(Layout, {\n    styleTags: styleTags,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27\n    },\n    __self: this\n  }, flag && __jsx(ViewerPageComponent, {\n    spines: book.spines,\n    viewerSpines: viewerSpines,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33\n    },\n    __self: this\n  }));\n}; // eslint-disable-next-line @typescript-eslint/unbound-method\n\n\nViewer.getInitialProps = function _callee(context) {\n  var req, _require, EpubParser, parser, book, viewerSpines;\n\n  return _regeneratorRuntime.async(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          req = context.req;\n\n          if (!req) {\n            _context.next = 17;\n            break;\n          }\n\n          _require = require('@ridi/epub-parser'), EpubParser = _require.EpubParser;\n          _context.prev = 3;\n          parser = new EpubParser('public/jikji.epub');\n          _context.next = 7;\n          return _regeneratorRuntime.awrap(parser.parse({\n            validatePackage: true,\n            parseStyle: false,\n            unzipPath: 'public/epub/jikji'\n          }));\n\n        case 7:\n          book = _context.sent;\n          _context.next = 10;\n          return _regeneratorRuntime.awrap(parser.readItems(book.spines, {\n            force: true,\n            extractBody: true,\n            serializedAnchor: true,\n            ignoreScript: true,\n            basePath: 'epub/jikji'\n          }));\n\n        case 10:\n          viewerSpines = _context.sent;\n          return _context.abrupt(\"return\", {\n            book: book,\n            viewerSpines: viewerSpines,\n            styleTags: book.styles.map(function (style) {\n              return __jsx(\"link\", {\n                rel: \"stylesheet\",\n                href: \"epub/jikji/\".concat(style.href),\n                key: style.href,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 66\n                },\n                __self: this\n              });\n            })\n          });\n\n        case 14:\n          _context.prev = 14;\n          _context.t0 = _context[\"catch\"](3);\n          console.log('Error', _context.t0);\n\n        case 17:\n          return _context.abrupt(\"return\", {});\n\n        case 18:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, [[3, 14]], Promise);\n};\n\nexport default Viewer;","map":{"version":3,"sources":["/Users/hyuntaeeom/Projects/personal/mini-viewer/pages/viewer.tsx"],"names":["React","useEffect","useState","ViewerPageComponent","Layout","Viewer","book","viewerSpines","styleTags","flag","setFlag","setTimeout","spines","getInitialProps","context","req","require","EpubParser","parser","parse","validatePackage","parseStyle","unzipPath","readItems","force","extractBody","serializedAnchor","ignoreScript","basePath","styles","map","style","href","console","log"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AAIA,OAAOC,mBAAP,MAAgC,iCAAhC;AAGA,OAAOC,MAAP,MAAmB,sBAAnB;;AAQA,IAAMC,MAAuB,GAAG,SAA1BA,MAA0B,OAAuC;AAAA,MAApCC,IAAoC,QAApCA,IAAoC;AAAA,MAA9BC,YAA8B,QAA9BA,YAA8B;AAAA,MAAhBC,SAAgB,QAAhBA,SAAgB;;AAAA,kBAC7CN,QAAQ,CAAC,IAAD,CADqC;AAAA,MAC9DO,IAD8D;AAAA,MACxDC,OADwD;;AAGrET,EAAAA,SAAS,CAAC,YAAM;AACdU,IAAAA,UAAU,CAAC,YAAM;AACfD,MAAAA,OAAO,CAAC,IAAD,CAAP;AACD,KAFS,EAEP,IAFO,CAAV;AAGD,GAJQ,EAIN,EAJM,CAAT;AAOA,SACE,MAAC,MAAD;AACA,IAAA,SAAS,EAAEF,SADX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAKIC,IAAI,IACJ,MAAC,mBAAD;AACA,IAAA,MAAM,EAAEH,IAAI,CAACM,MADb;AAEA,IAAA,YAAY,EAAEL,YAFd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IANJ,CADF;AAeD,CAzBD,C,CA2BA;;;AACAF,MAAM,CAACQ,eAAP,GAAyB,iBAAOC,OAAP;AAAA;;AAAA;AAAA;AAAA;AAAA;AACfC,UAAAA,GADe,GACPD,OADO,CACfC,GADe;;AAAA,eAEnBA,GAFmB;AAAA;AAAA;AAAA;;AAAA,qBAGEC,OAAO,CAAC,mBAAD,CAHT,EAGbC,UAHa,YAGbA,UAHa;AAAA;AAKbC,UAAAA,MALa,GAKJ,IAAID,UAAJ,CAAe,mBAAf,CALI;AAAA;AAAA,2CAMUC,MAAM,CAACC,KAAP,CAAa;AACxCC,YAAAA,eAAe,EAAE,IADuB;AAExCC,YAAAA,UAAU,EAAE,KAF4B;AAGxCC,YAAAA,SAAS,EAAE;AAH6B,WAAb,CANV;;AAAA;AAMbhB,UAAAA,IANa;AAAA;AAAA,2CAWQY,MAAM,CAACK,SAAP,CAAiBjB,IAAI,CAACM,MAAtB,EAA8B;AACvDY,YAAAA,KAAK,EAAE,IADgD;AAEvDC,YAAAA,WAAW,EAAE,IAF0C;AAGvDC,YAAAA,gBAAgB,EAAE,IAHqC;AAIvDC,YAAAA,YAAY,EAAE,IAJyC;AAKvDC,YAAAA,QAAQ,EAAE;AAL6C,WAA9B,CAXR;;AAAA;AAWbrB,UAAAA,YAXa;AAAA,2CAmBZ;AACLD,YAAAA,IAAI,EAAJA,IADK;AAELC,YAAAA,YAAY,EAAZA,YAFK;AAGLC,YAAAA,SAAS,EAAEF,IAAI,CAACuB,MAAL,CAAYC,GAAZ,CAAgB,UAACC,KAAD;AAAA,qBAAW;AAAM,gBAAA,GAAG,EAAC,YAAV;AAAuB,gBAAA,IAAI,uBAAgBA,KAAK,CAACC,IAAtB,CAA3B;AAAyD,gBAAA,GAAG,EAAED,KAAK,CAACC,IAApE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAAX;AAAA,aAAhB;AAHN,WAnBY;;AAAA;AAAA;AAAA;AAyBnBC,UAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ;;AAzBmB;AAAA,2CA8BhB,EA9BgB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAzB;;AAiCA,eAAe7B,MAAf","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { NextPageContext, NextPage } from 'next';\n\n\nimport ViewerPageComponent from '../components/viewer/ViewerPage';\n\nimport { EpubBook } from '../interfaces/books';\nimport Layout from '../components/Layout';\n\ninterface Props {\n  book: EpubBook;\n  viewerSpines: string[];\n  styleTags: string[];\n}\n\nconst Viewer: NextPage<Props> = ({ book, viewerSpines, styleTags }) => {\n  const [flag, setFlag] = useState(true);\n\n  useEffect(() => {\n    setTimeout(() => {\n      setFlag(true); \n    }, 3000);\n  }, [])\n\n\n  return (\n    <Layout\n    styleTags={styleTags}\n    >\n\n      {\n        flag &&\n        <ViewerPageComponent\n        spines={book.spines}\n        viewerSpines={viewerSpines}\n      />\n      }\n\n    </Layout>\n  );\n};\n\n// eslint-disable-next-line @typescript-eslint/unbound-method\nViewer.getInitialProps = async (context: NextPageContext<any>): Promise<any> => {\n  const { req } = context;\n  if (req) {\n    const { EpubParser } = require('@ridi/epub-parser');\n    try {\n      const parser = new EpubParser('public/jikji.epub');\n      const book: EpubBook = await parser.parse({\n        validatePackage: true,\n        parseStyle: false,\n        unzipPath: 'public/epub/jikji',\n      });\n      const viewerSpines = await parser.readItems(book.spines, {\n        force: true,\n        extractBody: true,\n        serializedAnchor: true,\n        ignoreScript: true,\n        basePath: 'epub/jikji',\n      });\n\n      return {\n        book,\n        viewerSpines,\n        styleTags: book.styles.map((style) => <link rel=\"stylesheet\" href={`epub/jikji/${style.href}`} key={style.href} />),\n      };\n    } catch (error) {\n      console.log('Error', error);\n    }\n  }\n\n\n  return {};\n};\n\nexport default Viewer;\n"]},"metadata":{},"sourceType":"module"}