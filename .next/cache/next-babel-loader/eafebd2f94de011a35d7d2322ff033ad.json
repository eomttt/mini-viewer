{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useState, useMemo, useEffect, useCallback } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport styled from 'styled-components';\nimport ViewerBottom from '../components/viewer/ViewerBottom';\nimport ViewerCalculator from '../components/viewer/ViewerCalculator';\nimport ViewerHeader from '../components/viewer/ViewerHeader';\nimport ViewerPage from '../components/viewer/ViewerPage';\nimport * as viewerActions from '../reducers/viewer';\nimport { getBookInfo, getStyleText } from '../lib/util';\nimport { VIEWER_WIDTH_RATIO, VIEWER_HEIGHT_RATIO } from '../constants/viewer';\nimport Layout from '../components/Layout';\nconst Container = styled.div.withConfig({\n  displayName: \"viewer__Container\",\n  componentId: \"sc-1iklkx5-0\"\n})([\"padding:\", \"% \", \"%;height:\", \"px;background-color:\", \";text-align:center;overflow:hidden;\"], (100 - VIEWER_HEIGHT_RATIO) / 2, (100 - VIEWER_WIDTH_RATIO) / 2, props => props.styleProps.height, props => props.styleProps.backgroundColor);\n\nconst Viewer = ({\n  book,\n  viewers,\n  styleText\n}) => {\n  const {\n    spines,\n    titles,\n    ncx,\n    contributors\n  } = book;\n  const dispatch = useDispatch();\n  const {\n    0: viewerWidth,\n    1: setViewerWidth\n  } = useState(0);\n  const {\n    0: viewerHeight,\n    1: setViewerHeight\n  } = useState(0);\n  const {\n    0: nowSpineIndex,\n    1: setNowSpineIndex\n  } = useState(0);\n  const {\n    0: wholePageCount,\n    1: setWholePageCount\n  } = useState(0);\n  const {\n    viewerCountList,\n    viewerPageCount\n  } = useSelector(state => state.viewer);\n  const {\n    fontSize,\n    widthRatio,\n    lineHeight,\n    backgroundColor\n  } = useSelector(state => state.viewerSetting);\n  const isAnalyzedSpine = useMemo(() => viewerCountList.length >= viewers.length, [viewerCountList, viewers]);\n  const isFirstPage = useMemo(() => viewerPageCount === 0, [viewerPageCount]);\n  const isLastPage = useMemo(() => viewerPageCount === wholePageCount, [viewerPageCount, wholePageCount]);\n  const selectedSpineIndex = useMemo(() => {\n    let spineIndex = 0;\n    let accurateCount = 0;\n    viewerCountList.some(viewerCount => {\n      if (accurateCount + viewerCount.count > viewerPageCount) {\n        spineIndex = viewerCount.index;\n        return true;\n      }\n\n      accurateCount += viewerCount.count;\n      return false;\n    });\n    return spineIndex;\n  }, [viewerPageCount, viewerCountList]);\n  const pageColumnOffset = useMemo(() => {\n    let columnOffset = viewerPageCount;\n    viewerCountList.some((viewerCount, index) => {\n      if (index < nowSpineIndex) {\n        columnOffset -= viewerCount.count;\n        return false;\n      }\n\n      return true;\n    });\n    return columnOffset;\n  }, [viewerCountList, viewerPageCount, nowSpineIndex]);\n  useEffect(() => {\n    setViewerWidth(Math.floor(window.innerWidth * (VIEWER_WIDTH_RATIO / 100)));\n    setViewerHeight(Math.floor(window.innerHeight * (VIEWER_HEIGHT_RATIO / 100)));\n    return () => {\n      dispatch(viewerActions.initViewerState());\n    };\n  }, [dispatch]);\n  useEffect(() => {\n    console.log('Now spine index', selectedSpineIndex);\n    setNowSpineIndex(selectedSpineIndex);\n  }, [selectedSpineIndex]);\n  useEffect(() => {\n    if (isAnalyzedSpine) {\n      console.log('Set whole page count');\n      const pageCount = viewerCountList.reduce((acc, cur) => acc + cur.count, 0);\n      setWholePageCount(pageCount - 1);\n    }\n  }, [isAnalyzedSpine, viewerCountList]);\n  useEffect(() => {\n    console.log('New style');\n    dispatch(viewerActions.initViewerState());\n  }, [dispatch, fontSize, lineHeight, widthRatio]);\n  const calculateViewerWidth = useCallback((nowWidth, newRatio) => Math.floor(Number(nowWidth) * (Number(newRatio) / 100)), []);\n  return __jsx(Layout, {\n    styleText: styleText\n  }, __jsx(ViewerHeader, {\n    titles: titles,\n    authors: contributors,\n    ncxItem: ncx\n  }), __jsx(Container, {\n    styleProps: {\n      height: viewerHeight,\n      backgroundColor\n    }\n  }, isAnalyzedSpine && __jsx(ViewerPage, {\n    viewerWidth: calculateViewerWidth(viewerWidth, widthRatio),\n    viewerHeight: viewerHeight,\n    pageColumnOffset: pageColumnOffset,\n    viewerSpine: viewers[nowSpineIndex],\n    isFirstPage: isFirstPage,\n    isLastPage: isLastPage\n  }), !isAnalyzedSpine && __jsx(ViewerCalculator, {\n    viewerWidth: calculateViewerWidth(viewerWidth, widthRatio),\n    viewerHeight: viewerHeight,\n    spines: spines,\n    viewers: viewers\n  })), __jsx(ViewerBottom, {\n    sliderMaxValue: wholePageCount\n  }));\n}; // eslint-disable-next-line @typescript-eslint/unbound-method\n\n\nViewer.getInitialProps = async context => {\n  const {\n    req,\n    store,\n    query\n  } = context;\n  const {\n    bookPath\n  } = query;\n  const queryPath = decodeURI(String(bookPath));\n\n  if (req) {\n    // Server side render\n    const {\n      EpubParser\n    } = require('@ridi/epub-parser');\n\n    const [, fileName] = queryPath.split('/');\n    const publicPath = `http://${req.headers.host}/${queryPath}`;\n\n    try {\n      const {\n        book,\n        viewers\n      } = await getBookInfo(EpubParser, {\n        epubFile: fileName,\n        epubPath: queryPath\n      });\n      const styleText = await getStyleText(publicPath, book.styles);\n      return {\n        book,\n        viewers,\n        styleText\n      };\n    } catch (error) {\n      console.log('Error', error);\n    }\n  } else {\n    // Client side render\n    const {\n      books\n    } = store.getState();\n    const {\n      list\n    } = books;\n    let selectedBookInfo = list[0];\n    list.some(bookInfo => {\n      if (bookInfo.publicPath === queryPath) {\n        selectedBookInfo = bookInfo;\n        return true;\n      }\n\n      return false;\n    });\n    const {\n      book,\n      viewers,\n      publicPath\n    } = selectedBookInfo;\n    const styleText = await getStyleText(publicPath, book.styles);\n    return {\n      book,\n      viewers,\n      styleText\n    };\n  }\n};\n\nexport default Viewer;","map":null,"metadata":{},"sourceType":"module"}