{"ast":null,"code":"var _jsxFileName = \"/Users/hyuntaeeom/Projects/personal/mini-viewer/components/books/BookList.tsx\";\nvar __jsx = React.createElement;\nimport React, { useCallback, useState } from 'react';\nimport styled from 'styled-components';\nimport { subColor } from '../../styles';\nconst Container = styled.ul``;\nconst CoverImage = styled.li`\n  width: 10em;\n  min-height: 13em;\n  border: 1px solid ${subColor};\n  display: inline-block;\n  margin: 1em;\n  vertical-align: bottom;\n  & img {\n    width: 100%;\n  }\n`;\nconst DEFAULT_IMAGE = 'default-book.png';\n\nconst BookList = ({\n  books\n}) => {\n  const {\n    0: draggedItem,\n    1: setDraggedItem\n  } = useState(null);\n  const dragStart = useCallback((e, index) => {\n    console.log('Drag start');\n    setDraggedItem(books[index]);\n    e.dataTransfer.effectAllowed = 'move';\n    e.dataTransfer.setData('text/html', e.target.parentNode);\n    e.dataTransfer.setDragImage(e.target.parentNode, 20, 20);\n  }, [books]);\n  const dragOver = useCallback(index => {\n    const draggedOverItem = books[index]; // // if the item is dragged over itself, ignore\n\n    if (draggedItem.publicPath === draggedOverItem.publicPath) {\n      return;\n    } // // filter out the currently dragged item\n\n\n    let newSortedBooks = books.filter(book => book.publicPath !== draggedItem.publicPath); // // add the dragged item after the dragged over item\n\n    newSortedBooks.splice(index, 0, draggedItem);\n    console.log(\"AAA\", newSortedBooks);\n  }, [books, draggedItem]);\n  const dragEnd = useCallback(e => {\n    e.preventDefault();\n  }, []);\n  return __jsx(Container, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63\n    },\n    __self: this\n  }, books.map(({\n    cover,\n    publicPath\n  }, index) => __jsx(CoverImage, {\n    onDragOver: () => dragOver(index),\n    key: publicPath,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66\n    },\n    __self: this\n  }, __jsx(\"img\", {\n    src: cover ? `${publicPath}/${cover.href}` : DEFAULT_IMAGE,\n    draggable: true,\n    onDragStart: e => dragStart(e, index),\n    onDragEnd: dragEnd,\n    alt: \"Cover\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70\n    },\n    __self: this\n  }))));\n};\n\nexport default BookList;","map":{"version":3,"sources":["/Users/hyuntaeeom/Projects/personal/mini-viewer/components/books/BookList.tsx"],"names":["React","useCallback","useState","styled","subColor","Container","ul","CoverImage","li","DEFAULT_IMAGE","BookList","books","draggedItem","setDraggedItem","dragStart","e","index","console","log","dataTransfer","effectAllowed","setData","target","parentNode","setDragImage","dragOver","draggedOverItem","publicPath","newSortedBooks","filter","book","splice","dragEnd","preventDefault","map","cover","href"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,WAAhB,EAA6BC,QAA7B,QAA6C,OAA7C;AAEA,OAAOC,MAAP,MAAmB,mBAAnB;AAEA,SAASC,QAAT,QAAyB,cAAzB;AAIA,MAAMC,SAAS,GAAGF,MAAM,CAACG,EAAG,EAA5B;AAEA,MAAMC,UAAU,GAAGJ,MAAM,CAACK,EAAG;;;sBAGPJ,QAAS;;;;;;;CAH/B;AAYA,MAAMK,aAAa,GAAG,kBAAtB;;AAOA,MAAMC,QAAwC,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAe;AAC9D,QAAM;AAAA,OAACC,WAAD;AAAA,OAAcC;AAAd,MAAgCX,QAAQ,CAAW,IAAX,CAA9C;AAEA,QAAMY,SAAS,GAAGb,WAAW,CAAC,CAACc,CAAD,EAAIC,KAAJ,KAAc;AAC1CC,IAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ;AACAL,IAAAA,cAAc,CAACF,KAAK,CAACK,KAAD,CAAN,CAAd;AACAD,IAAAA,CAAC,CAACI,YAAF,CAAeC,aAAf,GAA+B,MAA/B;AACAL,IAAAA,CAAC,CAACI,YAAF,CAAeE,OAAf,CAAuB,WAAvB,EAAoCN,CAAC,CAACO,MAAF,CAASC,UAA7C;AACAR,IAAAA,CAAC,CAACI,YAAF,CAAeK,YAAf,CAA4BT,CAAC,CAACO,MAAF,CAASC,UAArC,EAAiD,EAAjD,EAAqD,EAArD;AACD,GAN4B,EAM1B,CAACZ,KAAD,CAN0B,CAA7B;AAQA,QAAMc,QAAQ,GAAGxB,WAAW,CAAEe,KAAD,IAAW;AACtC,UAAMU,eAAe,GAAGf,KAAK,CAACK,KAAD,CAA7B,CADsC,CAGtC;;AACA,QAAIJ,WAAW,CAACe,UAAZ,KAA2BD,eAAe,CAACC,UAA/C,EAA2D;AACzD;AACD,KANqC,CAQtC;;;AACA,QAAIC,cAAc,GAAGjB,KAAK,CAACkB,MAAN,CAAcC,IAAD,IAAUA,IAAI,CAACH,UAAL,KAAoBf,WAAW,CAACe,UAAvD,CAArB,CATsC,CAWtC;;AACAC,IAAAA,cAAc,CAACG,MAAf,CAAsBf,KAAtB,EAA6B,CAA7B,EAAgCJ,WAAhC;AAEAK,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAZ,EAAmBU,cAAnB;AACD,GAf2B,EAezB,CAACjB,KAAD,EAAQC,WAAR,CAfyB,CAA5B;AAiBA,QAAMoB,OAAO,GAAG/B,WAAW,CAAEc,CAAD,IAAO;AACjCA,IAAAA,CAAC,CAACkB,cAAF;AACD,GAF0B,EAExB,EAFwB,CAA3B;AAIA,SACE,MAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEItB,KAAK,CAACuB,GAAN,CAAU,CAAC;AAAEC,IAAAA,KAAF;AAASR,IAAAA;AAAT,GAAD,EAAwBX,KAAxB,KACR,MAAC,UAAD;AACE,IAAA,UAAU,EAAE,MAAMS,QAAQ,CAACT,KAAD,CAD5B;AAEE,IAAA,GAAG,EAAEW,UAFP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAIE;AACE,IAAA,GAAG,EAAEQ,KAAK,GAAI,GAAER,UAAW,IAAGQ,KAAK,CAACC,IAAK,EAA/B,GAAmC3B,aAD/C;AAEE,IAAA,SAAS,MAFX;AAGE,IAAA,WAAW,EAAGM,CAAD,IAAOD,SAAS,CAACC,CAAD,EAAIC,KAAJ,CAH/B;AAIE,IAAA,SAAS,EAAEgB,OAJb;AAKE,IAAA,GAAG,EAAC,OALN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAJF,CADF,CAFJ,CADF;AAoBD,CApDD;;AAsDA,eAAetB,QAAf","sourcesContent":["import React, { useCallback, useState } from 'react';\n\nimport styled from 'styled-components';\n\nimport { subColor } from '../../styles';\n\nimport { EpubBook } from '../../interfaces/books';\n\nconst Container = styled.ul``;\n\nconst CoverImage = styled.li`\n  width: 10em;\n  min-height: 13em;\n  border: 1px solid ${subColor};\n  display: inline-block;\n  margin: 1em;\n  vertical-align: bottom;\n  & img {\n    width: 100%;\n  }\n`;\n\nconst DEFAULT_IMAGE = 'default-book.png';\n\ninterface Props {\n  books: EpubBook[];\n}\n\n\nconst BookList: React.FunctionComponent<Props> = ({ books }) => {\n  const [draggedItem, setDraggedItem] = useState<EpubBook>(null);\n\n  const dragStart = useCallback((e, index) => {\n    console.log('Drag start');\n    setDraggedItem(books[index]);\n    e.dataTransfer.effectAllowed = 'move';\n    e.dataTransfer.setData('text/html', e.target.parentNode);\n    e.dataTransfer.setDragImage(e.target.parentNode, 20, 20);\n  }, [books]);\n\n  const dragOver = useCallback((index) => {\n    const draggedOverItem = books[index];\n\n    // // if the item is dragged over itself, ignore\n    if (draggedItem.publicPath === draggedOverItem.publicPath) {\n      return;\n    }\n\n    // // filter out the currently dragged item\n    let newSortedBooks = books.filter((book) => book.publicPath !== draggedItem.publicPath);\n\n    // // add the dragged item after the dragged over item\n    newSortedBooks.splice(index, 0, draggedItem);\n\n    console.log(\"AAA\", newSortedBooks);\n  }, [books, draggedItem]);\n\n  const dragEnd = useCallback((e) => {\n    e.preventDefault();\n  }, []);\n\n  return (\n    <Container>\n      {\n        books.map(({ cover, publicPath }, index) => (\n          <CoverImage\n            onDragOver={() => dragOver(index)}\n            key={publicPath}\n          >\n            <img\n              src={cover ? `${publicPath}/${cover.href}` : DEFAULT_IMAGE}\n              draggable\n              onDragStart={(e) => dragStart(e, index)}\n              onDragEnd={dragEnd}\n              alt=\"Cover\"\n            />\n          </CoverImage>\n        ))\n      }\n    </Container>\n  );\n};\n\nexport default BookList;\n"]},"metadata":{},"sourceType":"module"}