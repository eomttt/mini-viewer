{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nexport var getBook = function getBook(parser, _ref) {\n  var unzipPath, book;\n  return _regeneratorRuntime.async(function getBook$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          unzipPath = _ref.unzipPath;\n          _context.prev = 1;\n          _context.next = 4;\n          return _regeneratorRuntime.awrap(parser.parse({\n            validatePackage: true,\n            parseStyle: false,\n            unzipPath: unzipPath\n          }));\n\n        case 4:\n          book = _context.sent;\n          return _context.abrupt(\"return\", book);\n\n        case 8:\n          _context.prev = 8;\n          _context.t0 = _context[\"catch\"](1);\n          console.log('Get book error', _context.t0);\n\n        case 11:\n          return _context.abrupt(\"return\", null);\n\n        case 12:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, [[1, 8]], Promise);\n};\nexport var getViewers = function getViewers(parser, _ref2) {\n  var bookSpines, publicPath, viewers;\n  return _regeneratorRuntime.async(function getViewers$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          bookSpines = _ref2.bookSpines, publicPath = _ref2.publicPath;\n          _context2.prev = 1;\n          _context2.next = 4;\n          return _regeneratorRuntime.awrap(parser.readItems(bookSpines, {\n            force: true,\n            extractBody: true,\n            serializedAnchor: true,\n            ignoreScript: true,\n            basePath: publicPath\n          }));\n\n        case 4:\n          viewers = _context2.sent;\n          return _context2.abrupt(\"return\", viewers);\n\n        case 8:\n          _context2.prev = 8;\n          _context2.t0 = _context2[\"catch\"](1);\n          console.log('Get viewers error', _context2.t0);\n\n        case 11:\n          return _context2.abrupt(\"return\", []);\n\n        case 12:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, [[1, 8]], Promise);\n};","map":{"version":3,"sources":["/Users/hyuntaeeom/Projects/personal/mini-viewer/lib/util.ts"],"names":["getBook","parser","unzipPath","parse","validatePackage","parseStyle","book","console","log","getViewers","bookSpines","publicPath","readItems","force","extractBody","serializedAnchor","ignoreScript","basePath","viewers"],"mappings":";AAEA,OAAO,IAAMA,OAAO,GAAG,SAAVA,OAAU,CAAOC,MAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AACrBC,UAAAA,SADqB,QACrBA,SADqB;AAAA;AAAA;AAAA,2CAIUD,MAAM,CAACE,KAAP,CAAa;AACxCC,YAAAA,eAAe,EAAE,IADuB;AAExCC,YAAAA,UAAU,EAAE,KAF4B;AAGxCH,YAAAA,SAAS,EAATA;AAHwC,WAAb,CAJV;;AAAA;AAIbI,UAAAA,IAJa;AAAA,2CAUZA,IAVY;;AAAA;AAAA;AAAA;AAYnBC,UAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ;;AAZmB;AAAA,2CAed,IAfc;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAhB;AAkBP,OAAO,IAAMC,UAAU,GAAG,SAAbA,UAAa,CAAOR,MAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AACxBS,UAAAA,UADwB,SACxBA,UADwB,EAExBC,UAFwB,SAExBA,UAFwB;AAAA;AAAA;AAAA,2CAKAV,MAAM,CAACW,SAAP,CAAiBF,UAAjB,EAA6B;AACjDG,YAAAA,KAAK,EAAE,IAD0C;AAEjDC,YAAAA,WAAW,EAAE,IAFoC;AAGjDC,YAAAA,gBAAgB,EAAE,IAH+B;AAIjDC,YAAAA,YAAY,EAAE,IAJmC;AAKjDC,YAAAA,QAAQ,EAAEN;AALuC,WAA7B,CALA;;AAAA;AAKhBO,UAAAA,OALgB;AAAA,4CAafA,OAbe;;AAAA;AAAA;AAAA;AAetBX,UAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ;;AAfsB;AAAA,4CAkBjB,EAlBiB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAnB","sourcesContent":["import { EpubBook } from '../interfaces/books';\n\nexport const getBook = async (parser, {\n  unzipPath,\n}): Promise<EpubBook | null> => {\n  try {\n    const book: EpubBook = await parser.parse({\n      validatePackage: true,\n      parseStyle: false,\n      unzipPath,\n    });\n\n    return book;\n  } catch (error) {\n    console.log('Get book error', error);\n  }\n\n  return null;\n};\n\nexport const getViewers = async (parser, {\n  bookSpines,\n  publicPath,\n}): Promise<string[]> => {\n  try {\n    const viewers = await parser.readItems(bookSpines, {\n      force: true,\n      extractBody: true,\n      serializedAnchor: true,\n      ignoreScript: true,\n      basePath: publicPath,\n    });\n\n    return viewers;\n  } catch (error) {\n    console.log('Get viewers error', error);\n  }\n\n  return [];\n};\n"]},"metadata":{},"sourceType":"module"}