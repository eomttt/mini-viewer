{"ast":null,"code":"var _jsxFileName = \"/Users/hyuntaeeom/Projects/personal/mini-viewer/pages/viewer.tsx\";\nvar __jsx = React.createElement;\nimport React, { useEffect, useState } from 'react';\nimport Head from 'next/head';\nimport ViewerPageComponent from '../components/viewer/ViewerPage';\nimport Layout from '../components/Layout';\n\nconst Viewer = ({\n  book,\n  viewerSpines,\n  styleLinks,\n  basePath\n}) => {\n  const {\n    0: styleTags,\n    1: setStyleTags\n  } = useState([]);\n  useEffect(() => {\n    const {\n      styles\n    } = book;\n    setStyleTags(styles.map(style => __jsx(\"link\", {\n      rel: \"stylesheet\",\n      href: `${basePath}/${style.href}`,\n      key: style.href,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 25\n      },\n      __self: this\n    })));\n  }, [basePath, book]);\n  console.log('Style', styleTags, styleLinks);\n  return __jsx(Layout, {\n    styleTags: styleLinks,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31\n    },\n    __self: this\n  }, __jsx(Head, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34\n    },\n    __self: this\n  }, styleTags.map(styleTag => styleTag)), __jsx(ViewerPageComponent, {\n    spines: book.spines,\n    viewerSpines: viewerSpines,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37\n    },\n    __self: this\n  }));\n}; // eslint-disable-next-line @typescript-eslint/unbound-method\n\n\nViewer.getInitialProps = async context => {\n  const {\n    req\n  } = context;\n\n  if (req) {\n    const {\n      EpubParser\n    } = require('@ridi/epub-parser');\n\n    try {\n      const parser = new EpubParser('public/jikji.epub');\n      const book = await parser.parse({\n        validatePackage: true,\n        parseStyle: false,\n        unzipPath: 'public/epub/jikji'\n      });\n      const viewerSpines = await parser.readItems(book.spines, {\n        force: true,\n        extractBody: true,\n        serializedAnchor: true,\n        ignoreScript: true,\n        basePath: 'epub/jikji'\n      });\n      return {\n        book,\n        viewerSpines,\n        styleLinks: book.styles.map(style => `epub/jikji/${style.href}`),\n        basePath: 'epub/jikji'\n      };\n    } catch (error) {\n      console.log('Error', error);\n    }\n  }\n\n  return {};\n};\n\nexport default Viewer;","map":{"version":3,"sources":["/Users/hyuntaeeom/Projects/personal/mini-viewer/pages/viewer.tsx"],"names":["React","useEffect","useState","Head","ViewerPageComponent","Layout","Viewer","book","viewerSpines","styleLinks","basePath","styleTags","setStyleTags","styles","map","style","href","console","log","styleTag","spines","getInitialProps","context","req","EpubParser","require","parser","parse","validatePackage","parseStyle","unzipPath","readItems","force","extractBody","serializedAnchor","ignoreScript","error"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AAEA,OAAOC,IAAP,MAAiB,WAAjB;AAEA,OAAOC,mBAAP,MAAgC,iCAAhC;AAGA,OAAOC,MAAP,MAAmB,sBAAnB;;AASA,MAAMC,MAAuB,GAAG,CAAC;AAAEC,EAAAA,IAAF;AAAQC,EAAAA,YAAR;AAAsBC,EAAAA,UAAtB;AAAkCC,EAAAA;AAAlC,CAAD,KAAkD;AAChF,QAAM;AAAA,OAACC,SAAD;AAAA,OAAYC;AAAZ,MAA4BV,QAAQ,CAAC,EAAD,CAA1C;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACd,UAAM;AACJY,MAAAA;AADI,QAEFN,IAFJ;AAIAK,IAAAA,YAAY,CAACC,MAAM,CAACC,GAAP,CAAYC,KAAD,IAAW;AAAM,MAAA,GAAG,EAAC,YAAV;AAAuB,MAAA,IAAI,EAAG,GAAEL,QAAS,IAAGK,KAAK,CAACC,IAAK,EAAvD;AAA0D,MAAA,GAAG,EAAED,KAAK,CAACC,IAArE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAtB,CAAD,CAAZ;AACD,GANQ,EAMN,CAACN,QAAD,EAAWH,IAAX,CANM,CAAT;AAQAU,EAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBP,SAArB,EAAgCF,UAAhC;AAEA,SACE,MAAC,MAAD;AACE,IAAA,SAAS,EAAEA,UADb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAGE,MAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGE,SAAS,CAACG,GAAV,CAAeK,QAAD,IAAcA,QAA5B,CADH,CAHF,EAME,MAAC,mBAAD;AACE,IAAA,MAAM,EAAEZ,IAAI,CAACa,MADf;AAEE,IAAA,YAAY,EAAEZ,YAFhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IANF,CADF;AAaD,CA1BD,C,CA4BA;;;AACAF,MAAM,CAACe,eAAP,GAAyB,MAAOC,OAAP,IAAuD;AAC9E,QAAM;AAAEC,IAAAA;AAAF,MAAUD,OAAhB;;AACA,MAAIC,GAAJ,EAAS;AACP,UAAM;AAAEC,MAAAA;AAAF,QAAiBC,OAAO,CAAC,mBAAD,CAA9B;;AACA,QAAI;AACF,YAAMC,MAAM,GAAG,IAAIF,UAAJ,CAAe,mBAAf,CAAf;AACA,YAAMjB,IAAc,GAAG,MAAMmB,MAAM,CAACC,KAAP,CAAa;AACxCC,QAAAA,eAAe,EAAE,IADuB;AAExCC,QAAAA,UAAU,EAAE,KAF4B;AAGxCC,QAAAA,SAAS,EAAE;AAH6B,OAAb,CAA7B;AAKA,YAAMtB,YAAY,GAAG,MAAMkB,MAAM,CAACK,SAAP,CAAiBxB,IAAI,CAACa,MAAtB,EAA8B;AACvDY,QAAAA,KAAK,EAAE,IADgD;AAEvDC,QAAAA,WAAW,EAAE,IAF0C;AAGvDC,QAAAA,gBAAgB,EAAE,IAHqC;AAIvDC,QAAAA,YAAY,EAAE,IAJyC;AAKvDzB,QAAAA,QAAQ,EAAE;AAL6C,OAA9B,CAA3B;AAQA,aAAO;AACLH,QAAAA,IADK;AAELC,QAAAA,YAFK;AAGLC,QAAAA,UAAU,EAAEF,IAAI,CAACM,MAAL,CAAYC,GAAZ,CAAiBC,KAAD,IAAY,cAAaA,KAAK,CAACC,IAAK,EAApD,CAHP;AAILN,QAAAA,QAAQ,EAAE;AAJL,OAAP;AAMD,KArBD,CAqBE,OAAO0B,KAAP,EAAc;AACdnB,MAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBkB,KAArB;AACD;AACF;;AAGD,SAAO,EAAP;AACD,CAhCD;;AAkCA,eAAe9B,MAAf","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { NextPageContext, NextPage } from 'next';\nimport Head from 'next/head';\n\nimport ViewerPageComponent from '../components/viewer/ViewerPage';\n\nimport { EpubBook } from '../interfaces/books';\nimport Layout from '../components/Layout';\n\ninterface Props {\n  book: EpubBook;\n  viewerSpines: string[];\n  styleLinks: string[];\n  basePath: string;\n}\n\nconst Viewer: NextPage<Props> = ({ book, viewerSpines, styleLinks, basePath }) => {\n  const [styleTags, setStyleTags] = useState([]);\n\n  useEffect(() => {\n    const {\n      styles,\n    } = book;\n\n    setStyleTags(styles.map((style) => <link rel=\"stylesheet\" href={`${basePath}/${style.href}`} key={style.href} />));\n  }, [basePath, book]);\n\n  console.log('Style', styleTags, styleLinks);\n\n  return (\n    <Layout\n      styleTags={styleLinks}\n    >\n      <Head>\n        {styleTags.map((styleTag) => styleTag)}\n      </Head>\n      <ViewerPageComponent\n        spines={book.spines}\n        viewerSpines={viewerSpines}\n      />\n    </Layout>\n  );\n};\n\n// eslint-disable-next-line @typescript-eslint/unbound-method\nViewer.getInitialProps = async (context: NextPageContext<any>): Promise<any> => {\n  const { req } = context;\n  if (req) {\n    const { EpubParser } = require('@ridi/epub-parser');\n    try {\n      const parser = new EpubParser('public/jikji.epub');\n      const book: EpubBook = await parser.parse({\n        validatePackage: true,\n        parseStyle: false,\n        unzipPath: 'public/epub/jikji',\n      });\n      const viewerSpines = await parser.readItems(book.spines, {\n        force: true,\n        extractBody: true,\n        serializedAnchor: true,\n        ignoreScript: true,\n        basePath: 'epub/jikji',\n      });\n\n      return {\n        book,\n        viewerSpines,\n        styleLinks: book.styles.map((style) => `epub/jikji/${style.href}`),\n        basePath: 'epub/jikji',\n      };\n    } catch (error) {\n      console.log('Error', error);\n    }\n  }\n\n\n  return {};\n};\n\nexport default Viewer;\n"]},"metadata":{},"sourceType":"module"}