{"ast":null,"code":"export const getBook = async (parser, {\n  unzipPath\n}) => {\n  try {\n    const book = await parser.parse({\n      validatePackage: true,\n      parseStyle: false,\n      unzipPath\n    });\n    return book;\n  } catch (error) {\n    console.log('Get book error', error);\n  }\n\n  return null;\n};\nexport const getViewers = async (parser, {\n  bookSpines,\n  publicPath\n}) => {\n  try {\n    const viewers = await parser.readItems(bookSpines, {\n      force: true,\n      extractBody: true,\n      serializedAnchor: true,\n      ignoreScript: true,\n      basePath: publicPath\n    });\n    return viewers;\n  } catch (error) {\n    console.log('Get viewers error', error);\n  }\n\n  return [];\n};\nexport const getBookInfo = async (EpubParser, {\n  epubFile,\n  epubPath\n}) => {\n  const parser = new EpubParser(`public/${epubFile}.epub`);\n\n  try {\n    const book = await getBook(parser, {\n      unzipPath: `public/${epubPath}`\n    });\n\n    if (book) {\n      const viewers = await getViewers(parser, {\n        bookSpines: book.spines,\n        publicPath: epubPath\n      });\n      return {\n        book,\n        viewers\n      };\n    }\n  } catch (error) {\n    console.log('Get book info error', error);\n  }\n\n  return {\n    book: null,\n    viewers: []\n  };\n};\nexport const isEpubFile = fileName => {\n  return fileName.includes('.epub');\n};","map":{"version":3,"sources":["/Users/hyuntaeeom/Projects/personal/mini-viewer/lib/util.ts"],"names":["getBook","parser","unzipPath","book","parse","validatePackage","parseStyle","error","console","log","getViewers","bookSpines","publicPath","viewers","readItems","force","extractBody","serializedAnchor","ignoreScript","basePath","getBookInfo","EpubParser","epubFile","epubPath","spines","isEpubFile","fileName","includes"],"mappings":"AAEA,OAAO,MAAMA,OAAO,GAAG,OAAOC,MAAP,EAAe;AACpCC,EAAAA;AADoC,CAAf,KAES;AAC9B,MAAI;AACF,UAAMC,IAAc,GAAG,MAAMF,MAAM,CAACG,KAAP,CAAa;AACxCC,MAAAA,eAAe,EAAE,IADuB;AAExCC,MAAAA,UAAU,EAAE,KAF4B;AAGxCJ,MAAAA;AAHwC,KAAb,CAA7B;AAMA,WAAOC,IAAP;AACD,GARD,CAQE,OAAOI,KAAP,EAAc;AACdC,IAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ,EAA8BF,KAA9B;AACD;;AAED,SAAO,IAAP;AACD,CAhBM;AAkBP,OAAO,MAAMG,UAAU,GAAG,OAAOT,MAAP,EAAe;AACvCU,EAAAA,UADuC;AAEvCC,EAAAA;AAFuC,CAAf,KAGD;AACvB,MAAI;AACF,UAAMC,OAAO,GAAG,MAAMZ,MAAM,CAACa,SAAP,CAAiBH,UAAjB,EAA6B;AACjDI,MAAAA,KAAK,EAAE,IAD0C;AAEjDC,MAAAA,WAAW,EAAE,IAFoC;AAGjDC,MAAAA,gBAAgB,EAAE,IAH+B;AAIjDC,MAAAA,YAAY,EAAE,IAJmC;AAKjDC,MAAAA,QAAQ,EAAEP;AALuC,KAA7B,CAAtB;AAQA,WAAOC,OAAP;AACD,GAVD,CAUE,OAAON,KAAP,EAAc;AACdC,IAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ,EAAiCF,KAAjC;AACD;;AAED,SAAO,EAAP;AACD,CAnBM;AAqBP,OAAO,MAAMa,WAAW,GAAG,OAAOC,UAAP,EAAmB;AAC5CC,EAAAA,QAD4C;AAE5CC,EAAAA;AAF4C,CAAnB,KAMrB;AACJ,QAAMtB,MAAM,GAAG,IAAIoB,UAAJ,CAAgB,UAASC,QAAS,OAAlC,CAAf;;AACA,MAAI;AACF,UAAMnB,IAAc,GAAG,MAAMH,OAAO,CAACC,MAAD,EAAS;AAC3CC,MAAAA,SAAS,EAAG,UAASqB,QAAS;AADa,KAAT,CAApC;;AAIA,QAAIpB,IAAJ,EAAU;AACR,YAAMU,OAAO,GAAG,MAAMH,UAAU,CAACT,MAAD,EAAS;AACvCU,QAAAA,UAAU,EAAER,IAAI,CAACqB,MADsB;AAEvCZ,QAAAA,UAAU,EAAEW;AAF2B,OAAT,CAAhC;AAKA,aAAO;AACLpB,QAAAA,IADK;AAELU,QAAAA;AAFK,OAAP;AAID;AACF,GAhBD,CAgBE,OAAON,KAAP,EAAc;AACdC,IAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ,EAAmCF,KAAnC;AACD;;AAED,SAAO;AACLJ,IAAAA,IAAI,EAAE,IADD;AAELU,IAAAA,OAAO,EAAE;AAFJ,GAAP;AAID,CAhCM;AAkCP,OAAO,MAAMY,UAAU,GAAIC,QAAD,IAAc;AACtC,SAAOA,QAAQ,CAACC,QAAT,CAAkB,OAAlB,CAAP;AACD,CAFM","sourcesContent":["import { EpubBook } from '../interfaces/books';\n\nexport const getBook = async (parser, {\n  unzipPath,\n}): Promise<EpubBook | null> => {\n  try {\n    const book: EpubBook = await parser.parse({\n      validatePackage: true,\n      parseStyle: false,\n      unzipPath,\n    });\n\n    return book;\n  } catch (error) {\n    console.log('Get book error', error);\n  }\n\n  return null;\n};\n\nexport const getViewers = async (parser, {\n  bookSpines,\n  publicPath,\n}): Promise<string[]> => {\n  try {\n    const viewers = await parser.readItems(bookSpines, {\n      force: true,\n      extractBody: true,\n      serializedAnchor: true,\n      ignoreScript: true,\n      basePath: publicPath,\n    });\n\n    return viewers;\n  } catch (error) {\n    console.log('Get viewers error', error);\n  }\n\n  return [];\n};\n\nexport const getBookInfo = async (EpubParser, {\n  epubFile,\n  epubPath,\n}): Promise<{\n  book: EpubBook | null;\n  viewers: string[];\n}> => {\n  const parser = new EpubParser(`public/${epubFile}.epub`);\n  try {\n    const book: EpubBook = await getBook(parser, {\n      unzipPath: `public/${epubPath}`,\n    });\n\n    if (book) {\n      const viewers = await getViewers(parser, {\n        bookSpines: book.spines,\n        publicPath: epubPath,\n      });\n\n      return {\n        book,\n        viewers,\n      };\n    }\n  } catch (error) {\n    console.log('Get book info error', error);\n  }\n\n  return {\n    book: null,\n    viewers: [],\n  };\n};\n\nexport const isEpubFile = (fileName) => {\n  return fileName.includes('.epub');\n};\n"]},"metadata":{},"sourceType":"module"}