{"ast":null,"code":"var _jsxFileName = \"/Users/hyuntaeeom/Projects/personal/mini-viewer/pages/index.tsx\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport { useSelector } from 'react-redux';\nimport Layout from '../components/Layout';\nimport BookList from '../components/books/BookList';\nimport * as booksActions from '../reducers/books';\n\nconst Home = () => {\n  const {\n    list\n  } = useSelector(state => state.books);\n  return __jsx(Layout, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17\n    },\n    __self: this\n  }, __jsx(BookList, {\n    books: list,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18\n    },\n    __self: this\n  }));\n}; // eslint-disable-next-line @typescript-eslint/unbound-method\n\n\nHome.getInitialProps = async context => {\n  const {\n    req,\n    store\n  } = context;\n\n  if (req) {\n    const fs = require('fs');\n\n    const {\n      EpubParser\n    } = require('@ridi/epub-parser');\n\n    const books = [];\n    const files = fs.readdirSync('public/');\n\n    try {\n      // eslint-disable-next-line no-restricted-syntax\n      for (const file of files) {\n        if (file.includes('.epub')) {\n          const publicPath = `epub/${file.split('.epub')[0]}`;\n          const parser = new EpubParser(`public/${file}`); // eslint-disable-next-line no-await-in-loop\n\n          const book = await parser.parse({\n            validatePackage: true,\n            parseStyle: false,\n            unzipPath: `public/${publicPath}`\n          });\n          books.push({\n            book,\n            publicPath\n          });\n        }\n      }\n\n      store.dispatch(booksActions.setBookList(books));\n      return {\n        books\n      };\n    } catch (error) {\n      console.log('Error', error);\n    }\n  }\n\n  return {};\n};\n\nexport default Home;","map":{"version":3,"sources":["/Users/hyuntaeeom/Projects/personal/mini-viewer/pages/index.tsx"],"names":["React","useSelector","Layout","BookList","booksActions","Home","list","state","books","getInitialProps","context","req","store","fs","require","EpubParser","files","readdirSync","file","includes","publicPath","split","parser","book","parse","validatePackage","parseStyle","unzipPath","push","dispatch","setBookList","error","console","log"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,WAAT,QAA4B,aAA5B;AAGA,OAAOC,MAAP,MAAmB,sBAAnB;AACA,OAAOC,QAAP,MAAqB,8BAArB;AAEA,OAAO,KAAKC,YAAZ,MAA8B,mBAA9B;;AAKA,MAAMC,IAAc,GAAG,MAAM;AAC3B,QAAM;AAAEC,IAAAA;AAAF,MAAWL,WAAW,CAAEM,KAAD,IAAyBA,KAAK,CAACC,KAAhC,CAA5B;AAEA,SACE,MAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,QAAD;AAAU,IAAA,KAAK,EAAEF,IAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF;AAKD,CARD,C,CASA;;;AACAD,IAAI,CAACI,eAAL,GAAuB,MAAOC,OAAP,IAAuD;AAC5E,QAAM;AAAEC,IAAAA,GAAF;AAAOC,IAAAA;AAAP,MAAiBF,OAAvB;;AACA,MAAIC,GAAJ,EAAS;AACP,UAAME,EAAE,GAAGC,OAAO,CAAC,IAAD,CAAlB;;AACA,UAAM;AAAEC,MAAAA;AAAF,QAAiBD,OAAO,CAAC,mBAAD,CAA9B;;AACA,UAAMN,KAAiB,GAAG,EAA1B;AAEA,UAAMQ,KAAK,GAAGH,EAAE,CAACI,WAAH,CAAe,SAAf,CAAd;;AACA,QAAI;AACF;AACA,WAAK,MAAMC,IAAX,IAAmBF,KAAnB,EAA0B;AACxB,YAAIE,IAAI,CAACC,QAAL,CAAc,OAAd,CAAJ,EAA4B;AAC1B,gBAAMC,UAAU,GAAI,QAAOF,IAAI,CAACG,KAAL,CAAW,OAAX,EAAoB,CAApB,CAAuB,EAAlD;AACA,gBAAMC,MAAM,GAAG,IAAIP,UAAJ,CAAgB,UAASG,IAAK,EAA9B,CAAf,CAF0B,CAG1B;;AACA,gBAAMK,IAAc,GAAG,MAAMD,MAAM,CAACE,KAAP,CAAa;AACxCC,YAAAA,eAAe,EAAE,IADuB;AAExCC,YAAAA,UAAU,EAAE,KAF4B;AAGxCC,YAAAA,SAAS,EAAG,UAASP,UAAW;AAHQ,WAAb,CAA7B;AAMAZ,UAAAA,KAAK,CAACoB,IAAN,CAAW;AACTL,YAAAA,IADS;AAETH,YAAAA;AAFS,WAAX;AAID;AACF;;AAEDR,MAAAA,KAAK,CAACiB,QAAN,CAAezB,YAAY,CAAC0B,WAAb,CAAyBtB,KAAzB,CAAf;AAEA,aAAO;AACLA,QAAAA;AADK,OAAP;AAGD,KAzBD,CAyBE,OAAOuB,KAAP,EAAc;AACdC,MAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBF,KAArB;AACD;AACF;;AACD,SAAO,EAAP;AACD,CAtCD;;AAwCA,eAAe1B,IAAf","sourcesContent":["import React from 'react';\nimport { useSelector } from 'react-redux';\nimport { NextPageContext, NextPage } from 'next';\n\nimport Layout from '../components/Layout';\nimport BookList from '../components/books/BookList';\n\nimport * as booksActions from '../reducers/books';\n\nimport { ReducerState } from '../interfaces';\nimport { BookInfo, EpubBook } from '../interfaces/books';\n\nconst Home: NextPage = () => {\n  const { list } = useSelector((state: ReducerState) => state.books);\n\n  return (\n    <Layout>\n      <BookList books={list} />\n    </Layout>\n  );\n};\n// eslint-disable-next-line @typescript-eslint/unbound-method\nHome.getInitialProps = async (context: NextPageContext<any>): Promise<any> => {\n  const { req, store } = context;\n  if (req) {\n    const fs = require('fs');\n    const { EpubParser } = require('@ridi/epub-parser');\n    const books: BookInfo[] = [];\n\n    const files = fs.readdirSync('public/');\n    try {\n      // eslint-disable-next-line no-restricted-syntax\n      for (const file of files) {\n        if (file.includes('.epub')) {\n          const publicPath = `epub/${file.split('.epub')[0]}`;\n          const parser = new EpubParser(`public/${file}`);\n          // eslint-disable-next-line no-await-in-loop\n          const book: EpubBook = await parser.parse({\n            validatePackage: true,\n            parseStyle: false,\n            unzipPath: `public/${publicPath}`,\n          });\n\n          books.push({\n            book,\n            publicPath,\n          });\n        }\n      }\n\n      store.dispatch(booksActions.setBookList(books));\n\n      return {\n        books,\n      };\n    } catch (error) {\n      console.log('Error', error);\n    }\n  }\n  return {};\n};\n\nexport default Home;\n"]},"metadata":{},"sourceType":"module"}