{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nvar _jsxFileName = \"/Users/hyuntaeeom/Projects/personal/mini-viewer/pages/index.tsx\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport styled from 'styled-components';\nvar Container = styled.div.withConfig({\n  displayName: \"pages__Container\",\n  componentId: \"sc-18mi7mi-0\"\n})([\"color:blue\"]);\n\nvar Home = function Home(_ref) {\n  var books = _ref.books;\n  console.log('AAAA', books);\n  return __jsx(Container, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19\n    },\n    __self: this\n  }, \"HOME\");\n}; // eslint-disable-next-line @typescript-eslint/unbound-method\n\n\nHome.getInitialProps = function (context) {\n  var req = context.req;\n\n  if (req) {\n    var fs = require('fs');\n\n    var _require = require('@ridi/epub-parser'),\n        EpubParser = _require.EpubParser;\n\n    var books = [];\n    fs.readdir('public', function _callee(err, files) {\n      var _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, file, fileName, parser, book;\n\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              // eslint-disable-next-line no-restricted-syntax\n              _iteratorNormalCompletion = true;\n              _didIteratorError = false;\n              _iteratorError = undefined;\n              _context.prev = 3;\n              _iterator = files[Symbol.iterator]();\n\n            case 5:\n              if (_iteratorNormalCompletion = (_step = _iterator.next()).done) {\n                _context.next = 17;\n                break;\n              }\n\n              file = _step.value;\n\n              if (!file.includes('.epub')) {\n                _context.next = 14;\n                break;\n              }\n\n              fileName = file.split('.epub')[0];\n              parser = new EpubParser(file); // eslint-disable-next-line no-await-in-loop\n\n              _context.next = 12;\n              return _regeneratorRuntime.awrap(parser.parse({\n                validatePackage: true,\n                parseStyle: false,\n                unzipPath: \"public/epub/\".concat(fileName)\n              }));\n\n            case 12:\n              book = _context.sent;\n              books.push(book);\n\n            case 14:\n              _iteratorNormalCompletion = true;\n              _context.next = 5;\n              break;\n\n            case 17:\n              _context.next = 23;\n              break;\n\n            case 19:\n              _context.prev = 19;\n              _context.t0 = _context[\"catch\"](3);\n              _didIteratorError = true;\n              _iteratorError = _context.t0;\n\n            case 23:\n              _context.prev = 23;\n              _context.prev = 24;\n\n              if (!_iteratorNormalCompletion && _iterator[\"return\"] != null) {\n                _iterator[\"return\"]();\n              }\n\n            case 26:\n              _context.prev = 26;\n\n              if (!_didIteratorError) {\n                _context.next = 29;\n                break;\n              }\n\n              throw _iteratorError;\n\n            case 29:\n              return _context.finish(26);\n\n            case 30:\n              return _context.finish(23);\n\n            case 31:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, [[3, 19, 23, 31], [24,, 26, 30]], Promise);\n    });\n    return {\n      books: books\n    };\n  }\n\n  return {};\n};\n\nexport default Home;","map":{"version":3,"sources":["/Users/hyuntaeeom/Projects/personal/mini-viewer/pages/index.tsx"],"names":["React","styled","Container","div","Home","books","console","log","getInitialProps","context","req","fs","require","EpubParser","readdir","err","files","file","includes","fileName","split","parser","parse","validatePackage","parseStyle","unzipPath","book","push"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAGA,OAAOC,MAAP,MAAmB,mBAAnB;AAGA,IAAMC,SAAS,GAAGD,MAAM,CAACE,GAAV;AAAA;AAAA;AAAA,kBAAf;;AAQA,IAAMC,IAAqB,GAAG,SAAxBA,IAAwB,OAAe;AAAA,MAAZC,KAAY,QAAZA,KAAY;AAC3CC,EAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ,EAAoBF,KAApB;AAEA,SACE,MAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAKD,CARD,C,CASA;;;AACAD,IAAI,CAACI,eAAL,GAAuB,UAACC,OAAD,EAAwC;AAAA,MACrDC,GADqD,GAC7CD,OAD6C,CACrDC,GADqD;;AAE7D,MAAIA,GAAJ,EAAS;AACP,QAAMC,EAAE,GAAGC,OAAO,CAAC,IAAD,CAAlB;;AADO,mBAEgBA,OAAO,CAAC,mBAAD,CAFvB;AAAA,QAECC,UAFD,YAECA,UAFD;;AAGP,QAAMR,KAAiB,GAAG,EAA1B;AAEAM,IAAAA,EAAE,CAACG,OAAH,CAAW,QAAX,EAAqB,iBAAOC,GAAP,EAAYC,KAAZ;AAAA;;AAAA;AAAA;AAAA;AAAA;AACnB;AADmB;AAAA;AAAA;AAAA;AAAA,0BAEAA,KAFA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAERC,cAAAA,IAFQ;;AAAA,mBAGbA,IAAI,CAACC,QAAL,CAAc,OAAd,CAHa;AAAA;AAAA;AAAA;;AAITC,cAAAA,QAJS,GAIEF,IAAI,CAACG,KAAL,CAAW,OAAX,EAAoB,CAApB,CAJF;AAKTC,cAAAA,MALS,GAKA,IAAIR,UAAJ,CAAeI,IAAf,CALA,EAMf;;AANe;AAAA,+CAOcI,MAAM,CAACC,KAAP,CAAa;AACxCC,gBAAAA,eAAe,EAAE,IADuB;AAExCC,gBAAAA,UAAU,EAAE,KAF4B;AAGxCC,gBAAAA,SAAS,wBAAiBN,QAAjB;AAH+B,eAAb,CAPd;;AAAA;AAOTO,cAAAA,IAPS;AAafrB,cAAAA,KAAK,CAACsB,IAAN,CAAWD,IAAX;;AAbe;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAArB;AAkBA,WAAO;AACLrB,MAAAA,KAAK,EAALA;AADK,KAAP;AAGD;;AACD,SAAO,EAAP;AACD,CA9BD;;AAgCA,eAAeD,IAAf","sourcesContent":["import React from 'react';\nimport { NextPageContext, NextPage } from 'next';\n\nimport styled from 'styled-components';\nimport { EpubBook } from '../interfaces/books';\n\nconst Container = styled.div`\n  color: blue\n`;\n\ninterface Props {\n  books: EpubBook[];\n}\n\nconst Home: NextPage<Props> = ({ books }) => {\n  console.log('AAAA', books);\n\n  return (\n    <Container>\n      HOME\n    </Container>\n  );\n};\n// eslint-disable-next-line @typescript-eslint/unbound-method\nHome.getInitialProps = (context: NextPageContext<any>): any => {\n  const { req } = context;\n  if (req) {\n    const fs = require('fs');\n    const { EpubParser } = require('@ridi/epub-parser');\n    const books: EpubBook[] = [];\n\n    fs.readdir('public', async (err, files) => {\n      // eslint-disable-next-line no-restricted-syntax\n      for (const file of files) {\n        if (file.includes('.epub')) {\n          const fileName = file.split('.epub')[0];\n          const parser = new EpubParser(file);\n          // eslint-disable-next-line no-await-in-loop\n          const book: EpubBook = await parser.parse({\n            validatePackage: true,\n            parseStyle: false,\n            unzipPath: `public/epub/${fileName}`,\n          });\n\n          books.push(book);\n        }\n      }\n    });\n\n    return {\n      books,\n    };\n  }\n  return {};\n};\n\nexport default Home;\n"]},"metadata":{},"sourceType":"module"}