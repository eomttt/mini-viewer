{"ast":null,"code":"var _jsxFileName = \"/Users/hyuntaeeom/Projects/personal/mini-viewer/components/viewer/ViewerSetting.tsx\";\nvar __jsx = React.createElement;\nimport React, { useCallback, useState } from 'react';\nimport styled from 'styled-components';\nimport ViewerSettingItem from './ViewerSettingItem';\nimport ViewerSettingColor from './ViewerSettingColor';\nimport { subColor } from '../../styles';\nimport { SETTING_ITEM_TYPE, SETTING_ITEMS } from '../../constants/viewer';\nvar Container = styled.div.withConfig({\n  displayName: \"ViewerSetting__Container\",\n  componentId: \"sc-1omnhz6-0\"\n})([\"position:relative;\"]);\nvar ToggleButton = styled.div.withConfig({\n  displayName: \"ViewerSetting__ToggleButton\",\n  componentId: \"sc-1omnhz6-1\"\n})([\"cursor:pointer;\"]);\nvar SettingItems = styled.ul.withConfig({\n  displayName: \"ViewerSetting__SettingItems\",\n  componentId: \"sc-1omnhz6-2\"\n})([\"position:absolute;width:10em;left:50%;transform:translateX(-50%);overflow:scroll;list-style-type:none;margin:0;padding:0;border:1px solid \", \";background-color:white;\"], subColor);\nvar SettingItem = styled.li.withConfig({\n  displayName: \"ViewerSetting__SettingItem\",\n  componentId: \"sc-1omnhz6-3\"\n})([\"text-align:center;padding:2px;border-bottom:1px solid \", \";cursor:pointer;margin:0;&:nth-last-child(1){border-bottom:initial;}\"], subColor);\n\nvar ViewerSetting = function ViewerSetting() {\n  var _useState = useState(false),\n      isShowSetting = _useState[0],\n      setIsShowSetting = _useState[1];\n\n  var toggleShowNcs = useCallback(function () {\n    setIsShowSetting(!isShowSetting);\n  }, [isShowSetting]);\n  var renderSettingItem = useCallback(function (settingItem) {\n    var id = settingItem.id,\n        type = settingItem.type,\n        label = settingItem.label;\n\n    if (type === SETTING_ITEM_TYPE.COLOR) {\n      return __jsx(ViewerSettingColor, {\n        key: id,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 57\n        },\n        __self: this\n      });\n    }\n\n    return __jsx(ViewerSettingItem, {\n      key: id,\n      label: label,\n      value: 0,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61\n      },\n      __self: this\n    });\n  }, []);\n  return __jsx(Container, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70\n    },\n    __self: this\n  }, __jsx(ToggleButton, {\n    onClick: toggleShowNcs,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71\n    },\n    __self: this\n  }, \"\\uC124\\uC815\"), isShowSetting && __jsx(SettingItems, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77\n    },\n    __self: this\n  }, SETTING_ITEMS.map(function (settingItem) {\n    return renderSettingItem(settingItem);\n  })));\n};\n\nexport default ViewerSetting;","map":{"version":3,"sources":["/Users/hyuntaeeom/Projects/personal/mini-viewer/components/viewer/ViewerSetting.tsx"],"names":["React","useCallback","useState","styled","ViewerSettingItem","ViewerSettingColor","subColor","SETTING_ITEM_TYPE","SETTING_ITEMS","Container","div","ToggleButton","SettingItems","ul","SettingItem","li","ViewerSetting","isShowSetting","setIsShowSetting","toggleShowNcs","renderSettingItem","settingItem","id","type","label","COLOR","map"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,WAAhB,EAA6BC,QAA7B,QAA6C,OAA7C;AAEA,OAAOC,MAAP,MAAmB,mBAAnB;AAEA,OAAOC,iBAAP,MAA8B,qBAA9B;AACA,OAAOC,kBAAP,MAA+B,sBAA/B;AAEA,SAASC,QAAT,QAAyB,cAAzB;AAEA,SAASC,iBAAT,EAA4BC,aAA5B,QAAiD,wBAAjD;AAEA,IAAMC,SAAS,GAAGN,MAAM,CAACO,GAAV;AAAA;AAAA;AAAA,0BAAf;AAIA,IAAMC,YAAY,GAAGR,MAAM,CAACO,GAAV;AAAA;AAAA;AAAA,uBAAlB;AAIA,IAAME,YAAY,GAAGT,MAAM,CAACU,EAAV;AAAA;AAAA;AAAA,+KASIP,QATJ,CAAlB;AAaA,IAAMQ,WAAW,GAAGX,MAAM,CAACY,EAAV;AAAA;AAAA;AAAA,uIAGYT,QAHZ,CAAjB;;AAYA,IAAMU,aAAsC,GAAG,SAAzCA,aAAyC,GAAM;AAAA,kBACTd,QAAQ,CAAC,KAAD,CADC;AAAA,MAC5Ce,aAD4C;AAAA,MAC7BC,gBAD6B;;AAGnD,MAAMC,aAAa,GAAGlB,WAAW,CAAC,YAAM;AACtCiB,IAAAA,gBAAgB,CAAC,CAACD,aAAF,CAAhB;AACD,GAFgC,EAE9B,CAACA,aAAD,CAF8B,CAAjC;AAIA,MAAMG,iBAAiB,GAAGnB,WAAW,CAAC,UAACoB,WAAD,EAAiB;AAAA,QAC7CC,EAD6C,GACzBD,WADyB,CAC7CC,EAD6C;AAAA,QACzCC,IADyC,GACzBF,WADyB,CACzCE,IADyC;AAAA,QACnCC,KADmC,GACzBH,WADyB,CACnCG,KADmC;;AAGrD,QAAID,IAAI,KAAKhB,iBAAiB,CAACkB,KAA/B,EAAsC;AACpC,aACE,MAAC,kBAAD;AAAoB,QAAA,GAAG,EAAEH,EAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF;AAGD;;AACD,WACE,MAAC,iBAAD;AACE,MAAA,GAAG,EAAEA,EADP;AAEE,MAAA,KAAK,EAAEE,KAFT;AAGE,MAAA,KAAK,EAAE,CAHT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF;AAOD,GAfoC,EAelC,EAfkC,CAArC;AAiBA,SACE,MAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,YAAD;AAAc,IAAA,OAAO,EAAEL,aAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADF,EAKIF,aAAa,IAEb,MAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEIT,aAAa,CAACkB,GAAd,CAAkB,UAACL,WAAD;AAAA,WAAiBD,iBAAiB,CAACC,WAAD,CAAlC;AAAA,GAAlB,CAFJ,CAPJ,CADF;AAiBD,CAzCD;;AA2CA,eAAeL,aAAf","sourcesContent":["import React, { useCallback, useState } from 'react';\n\nimport styled from 'styled-components';\n\nimport ViewerSettingItem from './ViewerSettingItem';\nimport ViewerSettingColor from './ViewerSettingColor';\n\nimport { subColor } from '../../styles';\n\nimport { SETTING_ITEM_TYPE, SETTING_ITEMS } from '../../constants/viewer';\n\nconst Container = styled.div`\n  position: relative;\n`;\n\nconst ToggleButton = styled.div`\n  cursor: pointer;\n`;\n\nconst SettingItems = styled.ul`\n  position: absolute;\n  width: 10em;\n  left: 50%;\n  transform: translateX(-50%);\n  overflow: scroll;\n  list-style-type: none;\n  margin: 0;\n  padding: 0;\n  border: 1px solid ${subColor};\n  background-color: white;\n`;\n\nconst SettingItem = styled.li`\n  text-align: center;\n  padding: 2px;\n  border-bottom: 1px solid ${subColor};\n  cursor: pointer;\n  margin: 0;\n  &:nth-last-child(1) {\n    border-bottom: initial;\n  }\n`;\n\n\nconst ViewerSetting: React.FunctionComponent = () => {\n  const [isShowSetting, setIsShowSetting] = useState(false);\n\n  const toggleShowNcs = useCallback(() => {\n    setIsShowSetting(!isShowSetting);\n  }, [isShowSetting]);\n\n  const renderSettingItem = useCallback((settingItem) => {\n    const { id, type, label } = settingItem;\n\n    if (type === SETTING_ITEM_TYPE.COLOR) {\n      return (\n        <ViewerSettingColor key={id} />\n      );\n    }\n    return (\n      <ViewerSettingItem\n        key={id}\n        label={label}\n        value={0}\n      />\n    );\n  }, []);\n\n  return (\n    <Container>\n      <ToggleButton onClick={toggleShowNcs}>\n        설정\n      </ToggleButton>\n      {\n        isShowSetting\n        && (\n        <SettingItems>\n          {\n            SETTING_ITEMS.map((settingItem) => renderSettingItem(settingItem))\n          }\n        </SettingItems>\n        )\n      }\n    </Container>\n  );\n};\n\nexport default ViewerSetting;\n"]},"metadata":{},"sourceType":"module"}