{"ast":null,"code":"var __jsx = React.createElement;\n\n/* eslint-disable react/no-danger */\nimport React, { useState, useRef, useCallback, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport styled from 'styled-components';\nimport { ViewerButton, ViewerArticle, ViewerSection, ViewerContents } from '../../styles/viewer';\nimport * as viewerActions from '../../reducers/viewer';\nimport { VIEWER_PAGE_GAP } from '../../constants/viewer';\nconst Article = styled(ViewerArticle).withConfig({\n  displayName: \"ViewerPage__Article\",\n  componentId: \"sc-14mn4t-0\"\n})([\"overflow:hidden;text-align:initial;\"]);\nconst RightButton = styled(ViewerButton).withConfig({\n  displayName: \"ViewerPage__RightButton\",\n  componentId: \"sc-14mn4t-1\"\n})([\"right:2em;\"]);\nconst LeftButton = styled(ViewerButton).withConfig({\n  displayName: \"ViewerPage__LeftButton\",\n  componentId: \"sc-14mn4t-2\"\n})([\"left:2em;\"]);\n\nconst ViewerPage = ({\n  viewerWidth,\n  viewerHeight,\n  pageColumnOffset,\n  viewerSpine,\n  isFirstPage,\n  isLastPage\n}) => {\n  const dispatch = useDispatch();\n  const {\n    0: nowViewerCount,\n    1: setNowViewerCount\n  } = useState(0);\n  const {\n    fontSize,\n    widthRatio,\n    lineHeight\n  } = useSelector(state => state.viewerSetting);\n  const viewArticleRef = useRef(null);\n  useEffect(() => {\n    const {\n      current: viewArticleRefCurrent\n    } = viewArticleRef;\n    viewArticleRefCurrent.scrollLeft = pageColumnOffset * (viewerWidth + VIEWER_PAGE_GAP);\n    setNowViewerCount(pageColumnOffset);\n  }, [viewerSpine, pageColumnOffset, viewerWidth]);\n  const clickRight = useCallback(() => {\n    const {\n      current: viewArticleRefCurrent\n    } = viewArticleRef;\n    setNowViewerCount(nowViewerCount + 1);\n    viewArticleRefCurrent.scrollLeft += viewerWidth + VIEWER_PAGE_GAP;\n    dispatch(viewerActions.setCountUpViewerPageCount());\n  }, [dispatch, nowViewerCount, viewerWidth]);\n  const clickLeft = useCallback(() => {\n    const {\n      current: viewArticleRefCurrent\n    } = viewArticleRef;\n    setNowViewerCount(nowViewerCount - 1);\n    viewArticleRefCurrent.scrollLeft -= viewerWidth + VIEWER_PAGE_GAP;\n    dispatch(viewerActions.setCountDownViewerPageCount());\n  }, [dispatch, nowViewerCount, viewerWidth]);\n  return __jsx(React.Fragment, null, __jsx(Article, {\n    ref: viewArticleRef,\n    onClick: clickRight,\n    styleProps: {\n      widthRatio,\n      fontSize,\n      lineHeight,\n      width: viewerWidth,\n      height: viewerHeight\n    }\n  }, __jsx(ViewerSection, {\n    styleProps: {\n      widthRatio,\n      fontSize,\n      lineHeight,\n      width: viewerWidth,\n      height: viewerHeight\n    }\n  }, __jsx(ViewerContents, {\n    dangerouslySetInnerHTML: {\n      __html: viewerSpine\n    }\n  }))), !isFirstPage && __jsx(LeftButton, {\n    onClick: clickLeft\n  }, \"Left\"), !isLastPage && __jsx(RightButton, {\n    onClick: clickRight\n  }, \"Right\"));\n};\n\nexport default ViewerPage;","map":null,"metadata":{},"sourceType":"module"}