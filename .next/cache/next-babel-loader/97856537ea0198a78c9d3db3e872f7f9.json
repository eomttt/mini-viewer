{"ast":null,"code":"var _jsxFileName = \"/Users/hyuntaeeom/Projects/personal/mini-viewer/pages/viewer.tsx\";\nvar __jsx = React.createElement;\nimport React, { useState, useMemo, useEffect, useCallback } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport styled from 'styled-components';\nimport ViewerBottom from '../components/viewer/ViewerBottom';\nimport ViewerCalculator from '../components/viewer/ViewerCalculator';\nimport ViewerHeader from '../components/viewer/ViewerHeader';\nimport ViewerPage from '../components/viewer/ViewerPage';\nimport * as viewerActions from '../reducers/viewer';\nimport { getBookInfo } from '../lib/util';\nimport { VIEWER_WIDTH_RATIO, VIEWER_HEIGHT_RATIO } from '../constants/viewer';\nconst Container = styled.div.withConfig({\n  displayName: \"viewer__Container\",\n  componentId: \"sc-1iklkx5-0\"\n})([\"padding:\", \"% \", \"%;height:\", \"px;background-color:\", \";text-align:center;overflow:hidden;\"], (100 - VIEWER_HEIGHT_RATIO) / 2, (100 - VIEWER_WIDTH_RATIO) / 2, props => props.styleProps.height, props => props.styleProps.backgroundColor);\n\nconst Viewer = ({\n  book,\n  viewers\n}) => {\n  const {\n    spines,\n    titles,\n    ncx,\n    contributors\n  } = book;\n  const dispatch = useDispatch();\n  const {\n    0: viewerWidth,\n    1: setViewerWidth\n  } = useState(0);\n  const {\n    0: viewerHeight,\n    1: setViewerHeight\n  } = useState(0);\n  const {\n    0: nowSpineIndex,\n    1: setNowSpineIndex\n  } = useState(0);\n  const {\n    0: wholePageCount,\n    1: setWholePageCount\n  } = useState(0);\n  const {\n    viewerCountList,\n    viewerPageCount\n  } = useSelector(state => state.viewer);\n  const {\n    fontSize,\n    widthRatio,\n    lineHeight,\n    backgroundColor\n  } = useSelector(state => state.viewerSetting);\n  const isAnalyzedSpine = useMemo(() => viewerCountList.length >= viewers.length, [viewerCountList, viewers]);\n  const isFirstPage = useMemo(() => viewerPageCount === 0, [viewerPageCount]);\n  const isLastPage = useMemo(() => viewerPageCount === wholePageCount, [viewerPageCount, wholePageCount]);\n  const selectedSpineIndex = useMemo(() => {\n    let spineIndex = 0;\n    let accurateCount = 0;\n    viewerCountList.some(viewerCount => {\n      if (accurateCount + viewerCount.count > viewerPageCount) {\n        spineIndex = viewerCount.index;\n        return true;\n      }\n\n      accurateCount += viewerCount.count;\n      return false;\n    });\n    return spineIndex;\n  }, [viewerPageCount, viewerCountList]);\n  const pageColumnOffset = useMemo(() => {\n    let columnOffset = viewerPageCount;\n    viewerCountList.some((viewerCount, index) => {\n      if (index < nowSpineIndex) {\n        columnOffset -= viewerCount.count;\n        return false;\n      }\n\n      return true;\n    });\n    return columnOffset;\n  }, [viewerCountList, viewerPageCount, nowSpineIndex]);\n  useEffect(() => {\n    setViewerWidth(Math.floor(window.innerWidth * (VIEWER_WIDTH_RATIO / 100)));\n    setViewerHeight(Math.floor(window.innerHeight * (VIEWER_HEIGHT_RATIO / 100)));\n    return () => {\n      dispatch(viewerActions.initViewerState());\n    };\n  }, [dispatch]);\n  useEffect(() => {\n    console.log('Now spine index', selectedSpineIndex);\n    setNowSpineIndex(selectedSpineIndex);\n  }, [selectedSpineIndex]);\n  useEffect(() => {\n    if (isAnalyzedSpine) {\n      console.log('Set whole page count');\n      const pageCount = viewerCountList.reduce((acc, cur) => acc + cur.count, 0);\n      setWholePageCount(pageCount - 1);\n    }\n  }, [isAnalyzedSpine, viewerCountList]);\n  useEffect(() => {\n    console.log('New style');\n    dispatch(viewerActions.initViewerState());\n  }, [dispatch, fontSize, lineHeight, widthRatio]);\n  const calculateViewerWidth = useCallback((nowWidth, newRatio) => Math.floor(Number(nowWidth) * (Number(newRatio) / 100)), []);\n  return __jsx(React.Fragment, null, __jsx(ViewerHeader, {\n    titles: titles,\n    authors: contributors,\n    ncxItem: ncx,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115\n    },\n    __self: this\n  }), __jsx(Container, {\n    styleProps: {\n      height: viewerHeight,\n      backgroundColor\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120\n    },\n    __self: this\n  }, isAnalyzedSpine && __jsx(ViewerPage, {\n    viewerWidth: calculateViewerWidth(viewerWidth, widthRatio),\n    viewerHeight: viewerHeight,\n    pageColumnOffset: pageColumnOffset,\n    viewerSpine: viewers[nowSpineIndex],\n    isFirstPage: isFirstPage,\n    isLastPage: isLastPage,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128\n    },\n    __self: this\n  }), !isAnalyzedSpine && __jsx(ViewerCalculator, {\n    viewerWidth: calculateViewerWidth(viewerWidth, widthRatio),\n    viewerHeight: viewerHeight,\n    spines: spines,\n    viewers: viewers,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139\n    },\n    __self: this\n  })), __jsx(ViewerBottom, {\n    sliderMaxValue: wholePageCount,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147\n    },\n    __self: this\n  }));\n}; // eslint-disable-next-line @typescript-eslint/unbound-method\n\n\nViewer.getInitialProps = async context => {\n  const {\n    req,\n    store,\n    query\n  } = context;\n  const {\n    bookPath\n  } = query;\n  const queryPath = decodeURI(String(bookPath));\n\n  if (req) {\n    // Server side render\n    const {\n      EpubParser\n    } = require('@ridi/epub-parser');\n\n    const [, fileName] = queryPath.split('/');\n\n    try {\n      const {\n        book,\n        viewers\n      } = await getBookInfo(EpubParser, {\n        epubFile: fileName,\n        epubPath: queryPath\n      });\n      return {\n        book,\n        viewers,\n        styleLinks: book.styles.map(style => `${queryPath}/${style.href}`)\n      };\n    } catch (error) {\n      console.log('Error', error);\n    }\n  } else {\n    // Client side render\n    const {\n      books\n    } = store.getState();\n    const {\n      list\n    } = books;\n    let selectedBookInfo = list[0];\n    list.some(bookInfo => {\n      if (bookInfo.publicPath === queryPath) {\n        selectedBookInfo = bookInfo;\n        return true;\n      }\n\n      return false;\n    });\n    const {\n      book,\n      viewers,\n      publicPath\n    } = selectedBookInfo;\n    return {\n      book,\n      viewers,\n      styleLinks: book.styles.map(style => `${publicPath}/${style.href}`)\n    };\n  }\n\n  return {};\n};\n\nexport default Viewer;","map":{"version":3,"sources":["/Users/hyuntaeeom/Projects/personal/mini-viewer/pages/viewer.tsx"],"names":["React","useState","useMemo","useEffect","useCallback","useSelector","useDispatch","styled","ViewerBottom","ViewerCalculator","ViewerHeader","ViewerPage","viewerActions","getBookInfo","VIEWER_WIDTH_RATIO","VIEWER_HEIGHT_RATIO","Container","div","props","styleProps","height","backgroundColor","Viewer","book","viewers","spines","titles","ncx","contributors","dispatch","viewerWidth","setViewerWidth","viewerHeight","setViewerHeight","nowSpineIndex","setNowSpineIndex","wholePageCount","setWholePageCount","viewerCountList","viewerPageCount","state","viewer","fontSize","widthRatio","lineHeight","viewerSetting","isAnalyzedSpine","length","isFirstPage","isLastPage","selectedSpineIndex","spineIndex","accurateCount","some","viewerCount","count","index","pageColumnOffset","columnOffset","Math","floor","window","innerWidth","innerHeight","initViewerState","console","log","pageCount","reduce","acc","cur","calculateViewerWidth","nowWidth","newRatio","Number","getInitialProps","context","req","store","query","bookPath","queryPath","decodeURI","String","EpubParser","require","fileName","split","epubFile","epubPath","styleLinks","styles","map","style","href","error","books","getState","list","selectedBookInfo","bookInfo","publicPath"],"mappings":";;AAAA,OAAOA,KAAP,IACEC,QADF,EACYC,OADZ,EACqBC,SADrB,EACgCC,WADhC,QAEO,OAFP;AAGA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AAGA,OAAOC,MAAP,MAAmB,mBAAnB;AAEA,OAAOC,YAAP,MAAyB,mCAAzB;AACA,OAAOC,gBAAP,MAA6B,uCAA7B;AACA,OAAOC,YAAP,MAAyB,mCAAzB;AACA,OAAOC,UAAP,MAAuB,iCAAvB;AAEA,OAAO,KAAKC,aAAZ,MAA+B,oBAA/B;AAEA,SAASC,WAAT,QAA4B,aAA5B;AAEA,SAASC,kBAAT,EAA6BC,mBAA7B,QAAwD,qBAAxD;AAKA,MAAMC,SAAS,GAAGT,MAAM,CAACU,GAAV;AAAA;AAAA;AAAA,mGACF,CAAC,MAAMF,mBAAP,IAA8B,CAD5B,EACkC,CAAC,MAAMD,kBAAP,IAA6B,CAD/D,EAEFI,KAAD,IAAWA,KAAK,CAACC,UAAN,CAAiBC,MAFzB,EAGQF,KAAD,IAAWA,KAAK,CAACC,UAAN,CAAiBE,eAHnC,CAAf;;AAaA,MAAMC,MAAuB,GAAG,CAAC;AAAEC,EAAAA,IAAF;AAAQC,EAAAA;AAAR,CAAD,KAAuB;AACrD,QAAM;AACJC,IAAAA,MADI;AACIC,IAAAA,MADJ;AACYC,IAAAA,GADZ;AACiBC,IAAAA;AADjB,MAEFL,IAFJ;AAGA,QAAMM,QAAQ,GAAGvB,WAAW,EAA5B;AAEA,QAAM;AAAA,OAACwB,WAAD;AAAA,OAAcC;AAAd,MAAgC9B,QAAQ,CAAC,CAAD,CAA9C;AACA,QAAM;AAAA,OAAC+B,YAAD;AAAA,OAAeC;AAAf,MAAkChC,QAAQ,CAAC,CAAD,CAAhD;AACA,QAAM;AAAA,OAACiC,aAAD;AAAA,OAAgBC;AAAhB,MAAoClC,QAAQ,CAAC,CAAD,CAAlD;AACA,QAAM;AAAA,OAACmC,cAAD;AAAA,OAAiBC;AAAjB,MAAsCpC,QAAQ,CAAC,CAAD,CAApD;AAEA,QAAM;AACJqC,IAAAA,eADI;AACaC,IAAAA;AADb,MAEFlC,WAAW,CAAEmC,KAAD,IAAyBA,KAAK,CAACC,MAAhC,CAFf;AAGA,QAAM;AACJC,IAAAA,QADI;AACMC,IAAAA,UADN;AACkBC,IAAAA,UADlB;AAC8BvB,IAAAA;AAD9B,MAEFhB,WAAW,CAAEmC,KAAD,IAAyBA,KAAK,CAACK,aAAhC,CAFf;AAIA,QAAMC,eAAe,GAAG5C,OAAO,CAAC,MAAMoC,eAAe,CAACS,MAAhB,IAA0BvB,OAAO,CAACuB,MAAzC,EAAiD,CAACT,eAAD,EAAkBd,OAAlB,CAAjD,CAA/B;AACA,QAAMwB,WAAW,GAAG9C,OAAO,CAAC,MAAMqC,eAAe,KAAK,CAA3B,EAA8B,CAACA,eAAD,CAA9B,CAA3B;AACA,QAAMU,UAAU,GAAG/C,OAAO,CAAC,MAAMqC,eAAe,KAAKH,cAA3B,EAA2C,CAACG,eAAD,EAAkBH,cAAlB,CAA3C,CAA1B;AACA,QAAMc,kBAAkB,GAAGhD,OAAO,CAAC,MAAM;AACvC,QAAIiD,UAAU,GAAG,CAAjB;AACA,QAAIC,aAAa,GAAG,CAApB;AACAd,IAAAA,eAAe,CAACe,IAAhB,CAAsBC,WAAD,IAAiB;AACpC,UAAIF,aAAa,GAAGE,WAAW,CAACC,KAA5B,GAAoChB,eAAxC,EAAyD;AACvDY,QAAAA,UAAU,GAAGG,WAAW,CAACE,KAAzB;AACA,eAAO,IAAP;AACD;;AACDJ,MAAAA,aAAa,IAAIE,WAAW,CAACC,KAA7B;AACA,aAAO,KAAP;AACD,KAPD;AAQA,WAAOJ,UAAP;AACD,GAZiC,EAY/B,CAACZ,eAAD,EAAkBD,eAAlB,CAZ+B,CAAlC;AAaA,QAAMmB,gBAAgB,GAAGvD,OAAO,CAAC,MAAM;AACrC,QAAIwD,YAAY,GAAGnB,eAAnB;AACAD,IAAAA,eAAe,CAACe,IAAhB,CAAqB,CAACC,WAAD,EAAcE,KAAd,KAAwB;AAC3C,UAAIA,KAAK,GAAGtB,aAAZ,EAA2B;AACzBwB,QAAAA,YAAY,IAAKJ,WAAW,CAACC,KAA7B;AACA,eAAO,KAAP;AACD;;AACD,aAAO,IAAP;AACD,KAND;AAOA,WAAOG,YAAP;AACD,GAV+B,EAU7B,CAACpB,eAAD,EAAkBC,eAAlB,EAAmCL,aAAnC,CAV6B,CAAhC;AAYA/B,EAAAA,SAAS,CAAC,MAAM;AACd4B,IAAAA,cAAc,CAAC4B,IAAI,CAACC,KAAL,CAAWC,MAAM,CAACC,UAAP,IAAqBhD,kBAAkB,GAAG,GAA1C,CAAX,CAAD,CAAd;AACAmB,IAAAA,eAAe,CAAC0B,IAAI,CAACC,KAAL,CAAWC,MAAM,CAACE,WAAP,IAAsBhD,mBAAmB,GAAG,GAA5C,CAAX,CAAD,CAAf;AACA,WAAO,MAAM;AACXc,MAAAA,QAAQ,CAACjB,aAAa,CAACoD,eAAd,EAAD,CAAR;AACD,KAFD;AAGD,GANQ,EAMN,CAACnC,QAAD,CANM,CAAT;AAQA1B,EAAAA,SAAS,CAAC,MAAM;AACd8D,IAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ,EAA+BhB,kBAA/B;AACAf,IAAAA,gBAAgB,CAACe,kBAAD,CAAhB;AACD,GAHQ,EAGN,CAACA,kBAAD,CAHM,CAAT;AAKA/C,EAAAA,SAAS,CAAC,MAAM;AACd,QAAI2C,eAAJ,EAAqB;AACnBmB,MAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ;AACA,YAAMC,SAAS,GAAG7B,eAAe,CAAC8B,MAAhB,CAAuB,CAACC,GAAD,EAAMC,GAAN,KAAcD,GAAG,GAAGC,GAAG,CAACf,KAA/C,EAAsD,CAAtD,CAAlB;AACAlB,MAAAA,iBAAiB,CAAC8B,SAAS,GAAG,CAAb,CAAjB;AACD;AACF,GANQ,EAMN,CAACrB,eAAD,EAAkBR,eAAlB,CANM,CAAT;AAQAnC,EAAAA,SAAS,CAAC,MAAM;AACd8D,IAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ;AACArC,IAAAA,QAAQ,CAACjB,aAAa,CAACoD,eAAd,EAAD,CAAR;AACD,GAHQ,EAGN,CAACnC,QAAD,EAAWa,QAAX,EAAqBE,UAArB,EAAiCD,UAAjC,CAHM,CAAT;AAKA,QAAM4B,oBAAoB,GAAGnE,WAAW,CACtC,CAACoE,QAAD,EAAWC,QAAX,KAAwBd,IAAI,CAACC,KAAL,CAAWc,MAAM,CAACF,QAAD,CAAN,IAAoBE,MAAM,CAACD,QAAD,CAAN,GAAmB,GAAvC,CAAX,CADc,EAEtC,EAFsC,CAAxC;AAKA,SACE,4BACE,MAAC,YAAD;AACE,IAAA,MAAM,EAAE/C,MADV;AAEE,IAAA,OAAO,EAAEE,YAFX;AAGE,IAAA,OAAO,EAAED,GAHX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAME,MAAC,SAAD;AACE,IAAA,UAAU,EAAE;AACVP,MAAAA,MAAM,EAAEY,YADE;AAEVX,MAAAA;AAFU,KADd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAMGyB,eAAe,IAEhB,MAAC,UAAD;AACE,IAAA,WAAW,EAAEyB,oBAAoB,CAACzC,WAAD,EAAca,UAAd,CADnC;AAEE,IAAA,YAAY,EAAEX,YAFhB;AAGE,IAAA,gBAAgB,EAAEyB,gBAHpB;AAIE,IAAA,WAAW,EAAEjC,OAAO,CAACU,aAAD,CAJtB;AAKE,IAAA,WAAW,EAAEc,WALf;AAME,IAAA,UAAU,EAAEC,UANd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IARF,EAiBG,CAACH,eAAD,IAED,MAAC,gBAAD;AACE,IAAA,WAAW,EAAEyB,oBAAoB,CAACzC,WAAD,EAAca,UAAd,CADnC;AAEE,IAAA,YAAY,EAAEX,YAFhB;AAGE,IAAA,MAAM,EAAEP,MAHV;AAIE,IAAA,OAAO,EAAED,OAJX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAnBF,CANF,EAiCE,MAAC,YAAD;AACE,IAAA,cAAc,EAAEY,cADlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAjCF,CADF;AAuCD,CApHD,C,CAsHA;;;AACAd,MAAM,CAACqD,eAAP,GAAyB,MAAOC,OAAP,IAAuD;AAC9E,QAAM;AAAEC,IAAAA,GAAF;AAAOC,IAAAA,KAAP;AAAcC,IAAAA;AAAd,MAAwBH,OAA9B;AACA,QAAM;AAAEI,IAAAA;AAAF,MAAeD,KAArB;AACA,QAAME,SAAS,GAAGC,SAAS,CAACC,MAAM,CAACH,QAAD,CAAP,CAA3B;;AAEA,MAAIH,GAAJ,EAAS;AACP;AACA,UAAM;AAAEO,MAAAA;AAAF,QAAiBC,OAAO,CAAC,mBAAD,CAA9B;;AACA,UAAM,GAAGC,QAAH,IAAeL,SAAS,CAACM,KAAV,CAAgB,GAAhB,CAArB;;AACA,QAAI;AACF,YAAM;AAAEhE,QAAAA,IAAF;AAAQC,QAAAA;AAAR,UAAoB,MAAMX,WAAW,CAACuE,UAAD,EAAa;AACtDI,QAAAA,QAAQ,EAAEF,QAD4C;AAEtDG,QAAAA,QAAQ,EAAER;AAF4C,OAAb,CAA3C;AAKA,aAAO;AACL1D,QAAAA,IADK;AAELC,QAAAA,OAFK;AAGLkE,QAAAA,UAAU,EAAEnE,IAAI,CAACoE,MAAL,CAAYC,GAAZ,CAAiBC,KAAD,IAAY,GAAEZ,SAAU,IAAGY,KAAK,CAACC,IAAK,EAAtD;AAHP,OAAP;AAKD,KAXD,CAWE,OAAOC,KAAP,EAAc;AACd9B,MAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqB6B,KAArB;AACD;AACF,GAlBD,MAkBO;AACL;AACA,UAAM;AAAEC,MAAAA;AAAF,QAA0BlB,KAAK,CAACmB,QAAN,EAAhC;AACA,UAAM;AAAEC,MAAAA;AAAF,QAAWF,KAAjB;AAEA,QAAIG,gBAAgB,GAAGD,IAAI,CAAC,CAAD,CAA3B;AAEAA,IAAAA,IAAI,CAAC7C,IAAL,CAAW+C,QAAD,IAAc;AACtB,UAAIA,QAAQ,CAACC,UAAT,KAAwBpB,SAA5B,EAAuC;AACrCkB,QAAAA,gBAAgB,GAAGC,QAAnB;AACA,eAAO,IAAP;AACD;;AACD,aAAO,KAAP;AACD,KAND;AAQA,UAAM;AAAE7E,MAAAA,IAAF;AAAQC,MAAAA,OAAR;AAAiB6E,MAAAA;AAAjB,QAAgCF,gBAAtC;AAEA,WAAO;AACL5E,MAAAA,IADK;AAELC,MAAAA,OAFK;AAGLkE,MAAAA,UAAU,EAAEnE,IAAI,CAACoE,MAAL,CAAYC,GAAZ,CAAiBC,KAAD,IAAY,GAAEQ,UAAW,IAAGR,KAAK,CAACC,IAAK,EAAvD;AAHP,KAAP;AAKD;;AAED,SAAO,EAAP;AACD,CAhDD;;AAkDA,eAAexE,MAAf","sourcesContent":["import React, {\n  useState, useMemo, useEffect, useCallback,\n} from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { NextPageContext, NextPage } from 'next';\n\nimport styled from 'styled-components';\n\nimport ViewerBottom from '../components/viewer/ViewerBottom';\nimport ViewerCalculator from '../components/viewer/ViewerCalculator';\nimport ViewerHeader from '../components/viewer/ViewerHeader';\nimport ViewerPage from '../components/viewer/ViewerPage';\n\nimport * as viewerActions from '../reducers/viewer';\n\nimport { getBookInfo } from '../lib/util';\n\nimport { VIEWER_WIDTH_RATIO, VIEWER_HEIGHT_RATIO } from '../constants/viewer';\n\nimport { ReducerState } from '../interfaces';\nimport { EpubBook } from '../interfaces/books';\n\nconst Container = styled.div`\n  padding: ${(100 - VIEWER_HEIGHT_RATIO) / 2}% ${(100 - VIEWER_WIDTH_RATIO) / 2}%;\n  height: ${(props) => props.styleProps.height}px;\n  background-color: ${(props) => props.styleProps.backgroundColor};\n  text-align: center;\n  overflow: hidden;\n`;\n\ninterface Props {\n  book: EpubBook;\n  viewers: string[];\n}\n\nconst Viewer: NextPage<Props> = ({ book, viewers }) => {\n  const {\n    spines, titles, ncx, contributors,\n  } = book;\n  const dispatch = useDispatch();\n\n  const [viewerWidth, setViewerWidth] = useState(0);\n  const [viewerHeight, setViewerHeight] = useState(0);\n  const [nowSpineIndex, setNowSpineIndex] = useState(0);\n  const [wholePageCount, setWholePageCount] = useState(0);\n\n  const {\n    viewerCountList, viewerPageCount,\n  } = useSelector((state: ReducerState) => state.viewer);\n  const {\n    fontSize, widthRatio, lineHeight, backgroundColor,\n  } = useSelector((state: ReducerState) => state.viewerSetting);\n\n  const isAnalyzedSpine = useMemo(() => viewerCountList.length >= viewers.length, [viewerCountList, viewers]);\n  const isFirstPage = useMemo(() => viewerPageCount === 0, [viewerPageCount]);\n  const isLastPage = useMemo(() => viewerPageCount === wholePageCount, [viewerPageCount, wholePageCount]);\n  const selectedSpineIndex = useMemo(() => {\n    let spineIndex = 0;\n    let accurateCount = 0;\n    viewerCountList.some((viewerCount) => {\n      if (accurateCount + viewerCount.count > viewerPageCount) {\n        spineIndex = viewerCount.index;\n        return true;\n      }\n      accurateCount += viewerCount.count;\n      return false;\n    });\n    return spineIndex;\n  }, [viewerPageCount, viewerCountList]);\n  const pageColumnOffset = useMemo(() => {\n    let columnOffset = viewerPageCount;\n    viewerCountList.some((viewerCount, index) => {\n      if (index < nowSpineIndex) {\n        columnOffset -= (viewerCount.count);\n        return false;\n      }\n      return true;\n    });\n    return columnOffset;\n  }, [viewerCountList, viewerPageCount, nowSpineIndex]);\n\n  useEffect(() => {\n    setViewerWidth(Math.floor(window.innerWidth * (VIEWER_WIDTH_RATIO / 100)));\n    setViewerHeight(Math.floor(window.innerHeight * (VIEWER_HEIGHT_RATIO / 100)));\n    return () => {\n      dispatch(viewerActions.initViewerState());\n    };\n  }, [dispatch]);\n\n  useEffect(() => {\n    console.log('Now spine index', selectedSpineIndex);\n    setNowSpineIndex(selectedSpineIndex);\n  }, [selectedSpineIndex]);\n\n  useEffect(() => {\n    if (isAnalyzedSpine) {\n      console.log('Set whole page count');\n      const pageCount = viewerCountList.reduce((acc, cur) => acc + cur.count, 0);\n      setWholePageCount(pageCount - 1);\n    }\n  }, [isAnalyzedSpine, viewerCountList]);\n\n  useEffect(() => {\n    console.log('New style');\n    dispatch(viewerActions.initViewerState());\n  }, [dispatch, fontSize, lineHeight, widthRatio]);\n\n  const calculateViewerWidth = useCallback(\n    (nowWidth, newRatio) => Math.floor(Number(nowWidth) * (Number(newRatio) / 100)),\n    [],\n  );\n\n  return (\n    <>\n      <ViewerHeader\n        titles={titles}\n        authors={contributors}\n        ncxItem={ncx}\n      />\n      <Container\n        styleProps={{\n          height: viewerHeight,\n          backgroundColor,\n        }}\n      >\n        {isAnalyzedSpine\n        && (\n        <ViewerPage\n          viewerWidth={calculateViewerWidth(viewerWidth, widthRatio)}\n          viewerHeight={viewerHeight}\n          pageColumnOffset={pageColumnOffset}\n          viewerSpine={viewers[nowSpineIndex]}\n          isFirstPage={isFirstPage}\n          isLastPage={isLastPage}\n        />\n        )}\n        {!isAnalyzedSpine\n        && (\n        <ViewerCalculator\n          viewerWidth={calculateViewerWidth(viewerWidth, widthRatio)}\n          viewerHeight={viewerHeight}\n          spines={spines}\n          viewers={viewers}\n        />\n        )}\n      </Container>\n      <ViewerBottom\n        sliderMaxValue={wholePageCount}\n      />\n    </>\n  );\n};\n\n// eslint-disable-next-line @typescript-eslint/unbound-method\nViewer.getInitialProps = async (context: NextPageContext<any>): Promise<any> => {\n  const { req, store, query } = context;\n  const { bookPath } = query;\n  const queryPath = decodeURI(String(bookPath));\n\n  if (req) {\n    // Server side render\n    const { EpubParser } = require('@ridi/epub-parser');\n    const [, fileName] = queryPath.split('/');\n    try {\n      const { book, viewers } = await getBookInfo(EpubParser, {\n        epubFile: fileName,\n        epubPath: queryPath,\n      });\n\n      return {\n        book,\n        viewers,\n        styleLinks: book.styles.map((style) => `${queryPath}/${style.href}`),\n      };\n    } catch (error) {\n      console.log('Error', error);\n    }\n  } else {\n    // Client side render\n    const { books }: ReducerState = store.getState();\n    const { list } = books;\n\n    let selectedBookInfo = list[0];\n\n    list.some((bookInfo) => {\n      if (bookInfo.publicPath === queryPath) {\n        selectedBookInfo = bookInfo;\n        return true;\n      }\n      return false;\n    });\n\n    const { book, viewers, publicPath } = selectedBookInfo;\n\n    return {\n      book,\n      viewers,\n      styleLinks: book.styles.map((style) => `${publicPath}/${style.href}`),\n    };\n  }\n\n  return {};\n};\n\nexport default Viewer;\n"]},"metadata":{},"sourceType":"module"}