{"ast":null,"code":"var _jsxFileName = \"/Users/hyuntaeeom/Projects/personal/mini-viewer/components/viewer/ViewerPage.tsx\";\nvar __jsx = React.createElement;\nimport React, { useCallback, useState, useEffect, useMemo } from 'react';\nimport { useSelector } from 'react-redux';\nimport Viewer from './Viewer';\nimport ViewerCount from './ViewerCount';\nimport { ViewerContainer } from '../../styles/viewer';\nimport { VIEWER_WIDTH_RATIO, VIEWER_HEIGHT_RATIO } from '../../constants/viewer';\n\nvar ViewerPage = function ViewerPage(_ref) {\n  var spines = _ref.spines,\n      viewerSpines = _ref.viewerSpines;\n\n  var _useState = useState(0),\n      viewerWidth = _useState[0],\n      setViewerWidth = _useState[1];\n\n  var _useState2 = useState(0),\n      viewerHeight = _useState2[0],\n      setViewerHeight = _useState2[1];\n\n  var _useState3 = useState(0),\n      nowSpineIndex = _useState3[0],\n      setNowSpineIndex = _useState3[1];\n\n  var _useState4 = useState(false),\n      isClickedPrev = _useState4[0],\n      setIsClickedPrev = _useState4[1];\n\n  var _useSelector = useSelector(function (state) {\n    return state.viewer;\n  }),\n      viewerCountList = _useSelector.viewerCountList;\n\n  var isAnalizedSpine = useMemo(function () {\n    return viewerCountList.length === viewerSpines.length;\n  }, [viewerCountList, viewerSpines]);\n  useEffect(function () {\n    setViewerWidth(Math.floor(window.innerWidth * (VIEWER_WIDTH_RATIO / 100)));\n    setViewerHeight(Math.floor(window.innerHeight * (VIEWER_HEIGHT_RATIO / 100)));\n  }, []);\n  var setNextSpine = useCallback(function () {\n    if (nowSpineIndex + 1 >= viewerSpines.length) {\n      alert('마지막 페이지 입니다.');\n    } else {\n      setNowSpineIndex(nowSpineIndex + 1);\n      setIsClickedPrev(false);\n    }\n  }, [nowSpineIndex, viewerSpines]);\n  var setPrevSpine = useCallback(function () {\n    if (nowSpineIndex - 1 < 0) {\n      alert('첫번째 페이지 입니다');\n    } else {\n      setNowSpineIndex(nowSpineIndex - 1);\n      setIsClickedPrev(true);\n    }\n  }, [nowSpineIndex]);\n  return __jsx(ViewerContainer, {\n    styleProps: {\n      height: viewerHeight\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56\n    },\n    __self: this\n  }, isAnalizedSpine && __jsx(Viewer, {\n    viewerWidth: viewerWidth,\n    viewerHeight: viewerHeight,\n    isShowPrevViewer: isClickedPrev,\n    wholeColumnCount: viewerCountList[nowSpineIndex].count,\n    spine: spines[nowSpineIndex],\n    viewerSpine: viewerSpines[nowSpineIndex],\n    setNextSpine: setNextSpine,\n    setPrevSpine: setPrevSpine,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64\n    },\n    __self: this\n  }), __jsx(\"section\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76\n    },\n    __self: this\n  }, viewerSpines.map(function (viewerSpine, index) {\n    return __jsx(ViewerCount, {\n      key: viewerSpine,\n      viewerWidth: viewerWidth,\n      viewerHeight: viewerHeight,\n      viewerSpine: viewerSpine,\n      viewerSpineIndex: index,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    });\n  })));\n};\n\nexport default ViewerPage;","map":{"version":3,"sources":["/Users/hyuntaeeom/Projects/personal/mini-viewer/components/viewer/ViewerPage.tsx"],"names":["React","useCallback","useState","useEffect","useMemo","useSelector","Viewer","ViewerCount","ViewerContainer","VIEWER_WIDTH_RATIO","VIEWER_HEIGHT_RATIO","ViewerPage","spines","viewerSpines","viewerWidth","setViewerWidth","viewerHeight","setViewerHeight","nowSpineIndex","setNowSpineIndex","isClickedPrev","setIsClickedPrev","state","viewer","viewerCountList","isAnalizedSpine","length","Math","floor","window","innerWidth","innerHeight","setNextSpine","alert","setPrevSpine","height","count","map","viewerSpine","index"],"mappings":"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","sourcesContent":["import React, {\n  useCallback, useState, useEffect, useMemo,\n} from 'react';\nimport { useSelector } from 'react-redux';\n\nimport Viewer from './Viewer';\nimport ViewerCount from './ViewerCount';\n\nimport { ViewerContainer } from '../../styles/viewer';\n\nimport { ReducerState } from '../../interfaces';\nimport { EpubSpineItem, EpubNcxItem } from '../../interfaces/books';\n\nimport { VIEWER_WIDTH_RATIO, VIEWER_HEIGHT_RATIO } from '../../constants/viewer';\n\ninterface Props {\n  spines: EpubSpineItem[];\n  viewerSpines: string[];\n  ncxItems?: EpubNcxItem[];\n}\n\nconst ViewerPage: React.FunctionComponent<Props> = ({ spines, viewerSpines }) => {\n  const [viewerWidth, setViewerWidth] = useState(0);\n  const [viewerHeight, setViewerHeight] = useState(0);\n  const [nowSpineIndex, setNowSpineIndex] = useState(0);\n  const [isClickedPrev, setIsClickedPrev] = useState(false);\n\n  const { viewerCountList } = useSelector((state: ReducerState) => state.viewer);\n\n  const isAnalizedSpine = useMemo(() => viewerCountList.length === viewerSpines.length, [viewerCountList, viewerSpines]);\n\n  useEffect(() => {\n    setViewerWidth(Math.floor(window.innerWidth * (VIEWER_WIDTH_RATIO / 100)));\n    setViewerHeight(Math.floor(window.innerHeight * (VIEWER_HEIGHT_RATIO / 100)));\n  }, []);\n\n  const setNextSpine = useCallback(() => {\n    if (nowSpineIndex + 1 >= viewerSpines.length) {\n      alert('마지막 페이지 입니다.');\n    } else {\n      setNowSpineIndex(nowSpineIndex + 1);\n      setIsClickedPrev(false);\n    }\n  }, [nowSpineIndex, viewerSpines]);\n\n  const setPrevSpine = useCallback(() => {\n    if (nowSpineIndex - 1 < 0) {\n      alert('첫번째 페이지 입니다');\n    } else {\n      setNowSpineIndex(nowSpineIndex - 1);\n      setIsClickedPrev(true);\n    }\n  }, [nowSpineIndex]);\n\n  return (\n    <ViewerContainer\n      styleProps={{\n        height: viewerHeight,\n      }}\n    >\n      {\n        isAnalizedSpine\n        && (\n        <Viewer\n          viewerWidth={viewerWidth}\n          viewerHeight={viewerHeight}\n          isShowPrevViewer={isClickedPrev}\n          wholeColumnCount={viewerCountList[nowSpineIndex].count}\n          spine={spines[nowSpineIndex]}\n          viewerSpine={viewerSpines[nowSpineIndex]}\n          setNextSpine={setNextSpine}\n          setPrevSpine={setPrevSpine}\n        />\n        )\n      }\n      <section>\n        {\n          viewerSpines.map((viewerSpine, index) => (\n            <ViewerCount\n              key={viewerSpine}\n              viewerWidth={viewerWidth}\n              viewerHeight={viewerHeight}\n              viewerSpine={viewerSpine}\n              viewerSpineIndex={index}\n            />\n          ))\n        }\n      </section>\n    </ViewerContainer>\n  );\n};\n\nexport default ViewerPage;\n"]},"metadata":{},"sourceType":"module"}