{"ast":null,"code":"var _jsxFileName = \"/Users/hyuntaeeom/Projects/personal/mini-viewer/components/viewer/ViewerSettingColorItem.tsx\";\nvar __jsx = React.createElement;\nimport React, { useCallback } from 'react';\nimport styled from 'styled-components';\nimport { subColor } from '../../styles';\nimport { ViewerSettingItem, ViewerSettingLabel } from '../../styles/viewer';\nconst Controller = styled.div.withConfig({\n  displayName: \"ViewerSettingColorItem__Controller\",\n  componentId: \"sc-4drjko-0\"\n})([\"display:flex;margin:auto 0 auto auto;\"]);\nconst Content = styled.div.withConfig({\n  displayName: \"ViewerSettingColorItem__Content\",\n  componentId: \"sc-4drjko-1\"\n})([\"width:1em;height:1em;border:1px solid \", \";border-radius:50%;background-color:\", \" !important;cursor:pointer;margin:0 .2em;\"], props => props.styleProps.isSelected ? 'black' : `${subColor}`, props => props.styleProps.color);\n\nconst ViewerSettingColorItem = ({\n  label,\n  value,\n  colors,\n  action\n}) => {\n  const selectColor = useCallback(selectedColor => {\n    action(selectedColor);\n  }, [action]);\n  return __jsx(ViewerSettingItem, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41\n    },\n    __self: this\n  }, __jsx(ViewerSettingLabel, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42\n    },\n    __self: this\n  }, label), __jsx(Controller, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45\n    },\n    __self: this\n  }, colors.map(color => __jsx(Content, {\n    key: color,\n    styleProps: {\n      color,\n      isSelected: color === value\n    },\n    onClick: () => selectColor(color),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48\n    },\n    __self: this\n  }))));\n};\n\nexport default ViewerSettingColorItem;","map":{"version":3,"sources":["/Users/hyuntaeeom/Projects/personal/mini-viewer/components/viewer/ViewerSettingColorItem.tsx"],"names":["React","useCallback","styled","subColor","ViewerSettingItem","ViewerSettingLabel","Controller","div","Content","props","styleProps","isSelected","color","ViewerSettingColorItem","label","value","colors","action","selectColor","selectedColor","map"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,WAAhB,QAAmC,OAAnC;AAEA,OAAOC,MAAP,MAAmB,mBAAnB;AAEA,SAASC,QAAT,QAAyB,cAAzB;AACA,SACEC,iBADF,EAEEC,kBAFF,QAGO,qBAHP;AAKA,MAAMC,UAAU,GAAGJ,MAAM,CAACK,GAAV;AAAA;AAAA;AAAA,6CAAhB;AAKA,MAAMC,OAAO,GAAGN,MAAM,CAACK,GAAV;AAAA;AAAA;AAAA,oIAGUE,KAAD,IAAYA,KAAK,CAACC,UAAN,CAAiBC,UAAjB,GAA8B,OAA9B,GAAyC,GAAER,QAAS,EAHzE,EAKUM,KAAD,IAAWA,KAAK,CAACC,UAAN,CAAiBE,KALrC,CAAb;;AAiBA,MAAMC,sBAAsD,GAAG,CAAC;AAC9DC,EAAAA,KAD8D;AACvDC,EAAAA,KADuD;AAChDC,EAAAA,MADgD;AACxCC,EAAAA;AADwC,CAAD,KAEzD;AACJ,QAAMC,WAAW,GAAGjB,WAAW,CAAEkB,aAAD,IAA2B;AACzDF,IAAAA,MAAM,CAACE,aAAD,CAAN;AACD,GAF8B,EAE5B,CAACF,MAAD,CAF4B,CAA/B;AAIA,SACE,MAAC,iBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,kBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGH,KADH,CADF,EAIE,MAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEEE,MAAM,CAACI,GAAP,CAAYR,KAAD,IACT,MAAC,OAAD;AACE,IAAA,GAAG,EAAEA,KADP;AAEE,IAAA,UAAU,EAAE;AACVA,MAAAA,KADU;AAEVD,MAAAA,UAAU,EAAEC,KAAK,KAAKG;AAFZ,KAFd;AAME,IAAA,OAAO,EAAE,MAAMG,WAAW,CAACN,KAAD,CAN5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CAFF,CAJF,CADF;AAqBD,CA5BD;;AA8BA,eAAeC,sBAAf","sourcesContent":["import React, { useCallback } from 'react';\n\nimport styled from 'styled-components';\n\nimport { subColor } from '../../styles';\nimport {\n  ViewerSettingItem,\n  ViewerSettingLabel,\n} from '../../styles/viewer';\n\nconst Controller = styled.div`\n  display: flex;\n  margin: auto 0 auto auto;\n`;\n\nconst Content = styled.div`\n  width: 1em;\n  height: 1em;\n  border: 1px solid ${(props) => (props.styleProps.isSelected ? 'black' : `${subColor}`)};  \n  border-radius: 50%;\n  background-color: ${(props) => props.styleProps.color} !important;\n  cursor: pointer;\n  margin: 0 .2em;\n`;\n\ninterface Props {\n  label: string;\n  value: number | string;\n  colors: string[];\n  action: (param: string | number) => void;\n}\n\nconst ViewerSettingColorItem: React.FunctionComponent<Props> = ({\n  label, value, colors, action,\n}) => {\n  const selectColor = useCallback((selectedColor: string) => {\n    action(selectedColor);\n  }, [action]);\n\n  return (\n    <ViewerSettingItem>\n      <ViewerSettingLabel>\n        {label}\n      </ViewerSettingLabel>\n      <Controller>\n        {\n        colors.map((color) => (\n          <Content\n            key={color}\n            styleProps={{\n              color,\n              isSelected: color === value,\n            }}\n            onClick={() => selectColor(color)}\n          />\n        ))\n      }\n      </Controller>\n    </ViewerSettingItem>\n  );\n};\n\nexport default ViewerSettingColorItem;\n"]},"metadata":{},"sourceType":"module"}