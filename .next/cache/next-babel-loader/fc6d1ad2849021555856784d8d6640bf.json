{"ast":null,"code":"var _jsxFileName = \"/Users/hyuntaeeom/Projects/personal/mini-viewer/components/viewer/Viewer.tsx\";\nvar __jsx = React.createElement;\nimport React, { useCallback, useState, useEffect, useMemo } from 'react';\nimport { useSelector } from 'react-redux';\nimport ViewerPage from './ViewerPage';\nimport ViewerCount from './ViewerCount';\nimport { ViewerContainer } from '../../styles/viewer';\nimport { VIEWER_WIDTH_RATIO, VIEWER_HEIGHT_RATIO } from '../../constants/viewer';\n\nconst Viewer = ({\n  spines,\n  viewerSpines,\n  ncxItem\n}) => {\n  const {\n    0: viewerWidth,\n    1: setViewerWidth\n  } = useState(0);\n  const {\n    0: viewerHeight,\n    1: setViewerHeight\n  } = useState(0);\n  const {\n    0: nowSpineIndex,\n    1: setNowSpineIndex\n  } = useState(0);\n  const {\n    0: isClickedPrev,\n    1: setIsClickedPrev\n  } = useState(false);\n  const {\n    viewerCountList\n  } = useSelector(state => state.viewer);\n  const isAnalizedSpine = useMemo(() => viewerCountList.length === viewerSpines.length, [viewerCountList, viewerSpines]);\n  useEffect(() => {\n    setViewerWidth(Math.floor(window.innerWidth * (VIEWER_WIDTH_RATIO / 100)));\n    setViewerHeight(Math.floor(window.innerHeight * (VIEWER_HEIGHT_RATIO / 100)));\n  }, []);\n  const setNextSpine = useCallback(() => {\n    if (nowSpineIndex + 1 >= viewerSpines.length) {\n      alert('마지막 페이지 입니다.');\n    } else {\n      setNowSpineIndex(nowSpineIndex + 1);\n      setIsClickedPrev(false);\n    }\n  }, [nowSpineIndex, viewerSpines]);\n  const setPrevSpine = useCallback(() => {\n    if (nowSpineIndex - 1 < 0) {\n      alert('첫번째 페이지 입니다');\n    } else {\n      setNowSpineIndex(nowSpineIndex - 1);\n      setIsClickedPrev(true);\n    }\n  }, [nowSpineIndex]);\n  return __jsx(ViewerContainer, {\n    styleProps: {\n      height: viewerHeight\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58\n    },\n    __self: this\n  }, isAnalizedSpine && __jsx(ViewerPage, {\n    viewerWidth: viewerWidth,\n    viewerHeight: viewerHeight,\n    isShowPrevViewer: isClickedPrev,\n    wholeColumnCount: viewerCountList[nowSpineIndex].count,\n    spine: spines[nowSpineIndex],\n    viewerSpine: viewerSpines[nowSpineIndex],\n    setNextSpine: setNextSpine,\n    setPrevSpine: setPrevSpine,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66\n    },\n    __self: this\n  }), __jsx(\"section\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78\n    },\n    __self: this\n  }, viewerSpines.map((viewerSpine, index) => __jsx(ViewerCount, {\n    key: viewerSpine,\n    viewerWidth: viewerWidth,\n    viewerHeight: viewerHeight,\n    viewerSpine: viewerSpine,\n    viewerSpineIndex: index,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81\n    },\n    __self: this\n  }))));\n};\n\nexport default Viewer;","map":{"version":3,"sources":["/Users/hyuntaeeom/Projects/personal/mini-viewer/components/viewer/Viewer.tsx"],"names":["React","useCallback","useState","useEffect","useMemo","useSelector","ViewerPage","ViewerCount","ViewerContainer","VIEWER_WIDTH_RATIO","VIEWER_HEIGHT_RATIO","Viewer","spines","viewerSpines","ncxItem","viewerWidth","setViewerWidth","viewerHeight","setViewerHeight","nowSpineIndex","setNowSpineIndex","isClickedPrev","setIsClickedPrev","viewerCountList","state","viewer","isAnalizedSpine","length","Math","floor","window","innerWidth","innerHeight","setNextSpine","alert","setPrevSpine","height","count","map","viewerSpine","index"],"mappings":"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","sourcesContent":["import React, {\n  useCallback, useState, useEffect, useMemo,\n} from 'react';\nimport { useSelector } from 'react-redux';\n\nimport ViewerPage from './ViewerPage';\nimport ViewerCount from './ViewerCount';\n\nimport { ViewerContainer } from '../../styles/viewer';\n\nimport { ReducerState } from '../../interfaces';\nimport { EpubSpineItem, EpubNcxItem } from '../../interfaces/books';\n\nimport { VIEWER_WIDTH_RATIO, VIEWER_HEIGHT_RATIO } from '../../constants/viewer';\n\ninterface Props {\n  spines: EpubSpineItem[];\n  viewerSpines: string[];\n  ncxItem?: EpubNcxItem;\n}\n\nconst Viewer: React.FunctionComponent<Props> = ({\n  spines, viewerSpines, ncxItem,\n}) => {\n  const [viewerWidth, setViewerWidth] = useState(0);\n  const [viewerHeight, setViewerHeight] = useState(0);\n  const [nowSpineIndex, setNowSpineIndex] = useState(0);\n  const [isClickedPrev, setIsClickedPrev] = useState(false);\n\n  const { viewerCountList } = useSelector((state: ReducerState) => state.viewer);\n\n  const isAnalizedSpine = useMemo(() => viewerCountList.length === viewerSpines.length, [viewerCountList, viewerSpines]);\n\n  useEffect(() => {\n    setViewerWidth(Math.floor(window.innerWidth * (VIEWER_WIDTH_RATIO / 100)));\n    setViewerHeight(Math.floor(window.innerHeight * (VIEWER_HEIGHT_RATIO / 100)));\n  }, []);\n\n  const setNextSpine = useCallback(() => {\n    if (nowSpineIndex + 1 >= viewerSpines.length) {\n      alert('마지막 페이지 입니다.');\n    } else {\n      setNowSpineIndex(nowSpineIndex + 1);\n      setIsClickedPrev(false);\n    }\n  }, [nowSpineIndex, viewerSpines]);\n\n  const setPrevSpine = useCallback(() => {\n    if (nowSpineIndex - 1 < 0) {\n      alert('첫번째 페이지 입니다');\n    } else {\n      setNowSpineIndex(nowSpineIndex - 1);\n      setIsClickedPrev(true);\n    }\n  }, [nowSpineIndex]);\n\n  return (\n    <ViewerContainer\n      styleProps={{\n        height: viewerHeight,\n      }}\n    >\n      {\n        isAnalizedSpine\n        && (\n        <ViewerPage\n          viewerWidth={viewerWidth}\n          viewerHeight={viewerHeight}\n          isShowPrevViewer={isClickedPrev}\n          wholeColumnCount={viewerCountList[nowSpineIndex].count}\n          spine={spines[nowSpineIndex]}\n          viewerSpine={viewerSpines[nowSpineIndex]}\n          setNextSpine={setNextSpine}\n          setPrevSpine={setPrevSpine}\n        />\n        )\n      }\n      <section>\n        {\n          viewerSpines.map((viewerSpine, index) => (\n            <ViewerCount\n              key={viewerSpine}\n              viewerWidth={viewerWidth}\n              viewerHeight={viewerHeight}\n              viewerSpine={viewerSpine}\n              viewerSpineIndex={index}\n            />\n          ))\n        }\n      </section>\n    </ViewerContainer>\n  );\n};\n\nexport default Viewer;\n"]},"metadata":{},"sourceType":"module"}