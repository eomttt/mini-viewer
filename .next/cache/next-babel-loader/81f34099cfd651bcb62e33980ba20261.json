{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useCallback, useState, useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport styled from 'styled-components';\nimport ViewerSettingCountItem from './ViewerSettingCountItem';\nimport ViewerSettingColorItem from './ViewerSettingColorItem';\nimport * as settingActions from '../../reducers/viewerSetting';\nimport { subColor, defaultColor } from '../../styles';\nimport { SETTING_ITEM_KEY, SETTING_ITEM_LABEL, SETTING_ITEM_UNIT, FONT_SIZE_RANGE, WIDTH_RATIO_RANGE, LINE_HEIGHT_RANGE, BACKGROUND_COLORS } from '../../constants/viewer';\nconst Container = styled.div.withConfig({\n  displayName: \"ViewerSetting__Container\",\n  componentId: \"sc-1omnhz6-0\"\n})([\"position:relative;\"]);\nconst ToggleButton = styled.div.withConfig({\n  displayName: \"ViewerSetting__ToggleButton\",\n  componentId: \"sc-1omnhz6-1\"\n})([\"cursor:pointer;\"]);\nconst SettingItems = styled.ul.withConfig({\n  displayName: \"ViewerSetting__SettingItems\",\n  componentId: \"sc-1omnhz6-2\"\n})([\"position:absolute;width:15em;left:50%;transform:translateX(-50%);overflow:scroll;list-style-type:none;margin:0;padding:0;border:1px solid \", \";background-color:\", \";\"], subColor, defaultColor);\n\nconst ViewerSetting = () => {\n  const {\n    fontSize,\n    widthRatio,\n    lineHeight,\n    backgroundColor\n  } = useSelector(state => state.viewerSetting);\n  const dispatch = useDispatch();\n  const {\n    0: isShowSetting,\n    1: setIsShowSetting\n  } = useState(false);\n  const {\n    0: settingItems,\n    1: setSettingItems\n  } = useState([]);\n  useEffect(() => {\n    setSettingItems([{\n      label: SETTING_ITEM_LABEL.FONT_SIZE,\n      key: SETTING_ITEM_KEY.FONT_SIZE,\n      value: fontSize,\n      valueUnit: SETTING_ITEM_UNIT.FONT_SIZE,\n      minValue: FONT_SIZE_RANGE.MIN,\n      maxValue: FONT_SIZE_RANGE.MAX,\n      action: value => {\n        dispatch(settingActions.setViewerSettingFontSize(value));\n      }\n    }, {\n      label: SETTING_ITEM_LABEL.WIDTH_RATIO,\n      key: SETTING_ITEM_KEY.WIDTH_RATIO,\n      value: widthRatio,\n      valueUnit: SETTING_ITEM_UNIT.WIDTH,\n      minValue: WIDTH_RATIO_RANGE.MIN,\n      maxValue: WIDTH_RATIO_RANGE.MAX,\n      action: value => {\n        dispatch(settingActions.setViewerSettingWidthRatio(value));\n      }\n    }, {\n      label: SETTING_ITEM_LABEL.LINE_HEIGHT,\n      key: SETTING_ITEM_KEY.LINE_HEIGHT,\n      value: lineHeight,\n      valueUnit: SETTING_ITEM_UNIT.LINE_HEIGHT,\n      minValue: LINE_HEIGHT_RANGE.MIN,\n      maxValue: LINE_HEIGHT_RANGE.MAX,\n      action: value => {\n        dispatch(settingActions.setViewerSettingLineHeight(value));\n      }\n    }, {\n      label: SETTING_ITEM_LABEL.BACKGROUND_COLOR,\n      key: SETTING_ITEM_KEY.BACKGROUND_COLOR,\n      value: backgroundColor,\n      colors: BACKGROUND_COLORS,\n      action: value => {\n        dispatch(settingActions.setViewerSettingBackgroundColor(value));\n      }\n    }]);\n  }, [dispatch, fontSize, widthRatio, lineHeight, backgroundColor]);\n  const toggleShowNcs = useCallback(() => {\n    setIsShowSetting(!isShowSetting);\n  }, [isShowSetting]);\n  const renderSettingItem = useCallback(settingItem => {\n    const {\n      key,\n      label,\n      value,\n      valueUnit,\n      action,\n      minValue,\n      maxValue,\n      colors\n    } = settingItem;\n\n    if (colors) {\n      return __jsx(ViewerSettingColorItem, {\n        key: key,\n        label: label,\n        value: value,\n        colors: colors,\n        action: action\n      });\n    }\n\n    return __jsx(ViewerSettingCountItem, {\n      key: key,\n      label: label,\n      value: value,\n      valueUnit: valueUnit,\n      minValue: minValue,\n      maxValue: maxValue,\n      action: action\n    });\n  }, []);\n  return __jsx(Container, null, __jsx(ToggleButton, {\n    onClick: toggleShowNcs\n  }, \"\\uC124\\uC815\"), isShowSetting && __jsx(SettingItems, null, settingItems.map(settingItem => renderSettingItem(settingItem))));\n};\n\nexport default ViewerSetting;","map":null,"metadata":{},"sourceType":"module"}