{"ast":null,"code":"var _jsxFileName = \"/Users/hyuntaeeom/Projects/personal/mini-viewer/pages/viewer.tsx\";\nvar __jsx = React.createElement;\nimport React, { useEffect, useState } from 'react';\nimport ViewerPageComponent from '../components/viewer/ViewerPage';\nimport Layout from '../components/Layout';\n\nconst Viewer = ({\n  book,\n  viewerSpines,\n  styleTags\n}) => {\n  const {\n    0: flag,\n    1: setFlag\n  } = useState(true);\n  useEffect(() => {\n    setTimeout(() => {\n      setFlag(true);\n    }, 3000);\n  }, []);\n  return __jsx(Layout, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27\n    },\n    __self: this\n  }, flag && __jsx(ViewerPageComponent, {\n    spines: book.spines,\n    viewerSpines: viewerSpines,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32\n    },\n    __self: this\n  }));\n}; // eslint-disable-next-line @typescript-eslint/unbound-method\n\n\nViewer.getInitialProps = async context => {\n  const {\n    req\n  } = context;\n\n  if (req) {\n    const {\n      EpubParser\n    } = require('@ridi/epub-parser');\n\n    try {\n      const parser = new EpubParser('public/jikji.epub');\n      const book = await parser.parse({\n        validatePackage: true,\n        parseStyle: false,\n        unzipPath: 'public/epub/jikji'\n      });\n      const viewerSpines = await parser.readItems(book.spines, {\n        force: true,\n        extractBody: true,\n        serializedAnchor: true,\n        ignoreScript: true,\n        basePath: 'epub/jikji'\n      });\n      return {\n        book,\n        viewerSpines,\n        styleTags: book.styles.map(style => __jsx(\"link\", {\n          rel: \"stylesheet\",\n          href: `epub/jikji/${style.href}`,\n          key: style.href,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 65\n          },\n          __self: this\n        }))\n      };\n    } catch (error) {\n      console.log('Error', error);\n    }\n  }\n\n  return {};\n};\n\nexport default Viewer;","map":{"version":3,"sources":["/Users/hyuntaeeom/Projects/personal/mini-viewer/pages/viewer.tsx"],"names":["React","useEffect","useState","ViewerPageComponent","Layout","Viewer","book","viewerSpines","styleTags","flag","setFlag","setTimeout","spines","getInitialProps","context","req","EpubParser","require","parser","parse","validatePackage","parseStyle","unzipPath","readItems","force","extractBody","serializedAnchor","ignoreScript","basePath","styles","map","style","href","error","console","log"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AAIA,OAAOC,mBAAP,MAAgC,iCAAhC;AAGA,OAAOC,MAAP,MAAmB,sBAAnB;;AAQA,MAAMC,MAAuB,GAAG,CAAC;AAAEC,EAAAA,IAAF;AAAQC,EAAAA,YAAR;AAAsBC,EAAAA;AAAtB,CAAD,KAAuC;AACrE,QAAM;AAAA,OAACC,IAAD;AAAA,OAAOC;AAAP,MAAkBR,QAAQ,CAAC,IAAD,CAAhC;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACdU,IAAAA,UAAU,CAAC,MAAM;AACfD,MAAAA,OAAO,CAAC,IAAD,CAAP;AACD,KAFS,EAEP,IAFO,CAAV;AAGD,GAJQ,EAIN,EAJM,CAAT;AAOA,SACE,MAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAIID,IAAI,IACJ,MAAC,mBAAD;AACA,IAAA,MAAM,EAAEH,IAAI,CAACM,MADb;AAEA,IAAA,YAAY,EAAEL,YAFd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IALJ,CADF;AAcD,CAxBD,C,CA0BA;;;AACAF,MAAM,CAACQ,eAAP,GAAyB,MAAOC,OAAP,IAAuD;AAC9E,QAAM;AAAEC,IAAAA;AAAF,MAAUD,OAAhB;;AACA,MAAIC,GAAJ,EAAS;AACP,UAAM;AAAEC,MAAAA;AAAF,QAAiBC,OAAO,CAAC,mBAAD,CAA9B;;AACA,QAAI;AACF,YAAMC,MAAM,GAAG,IAAIF,UAAJ,CAAe,mBAAf,CAAf;AACA,YAAMV,IAAc,GAAG,MAAMY,MAAM,CAACC,KAAP,CAAa;AACxCC,QAAAA,eAAe,EAAE,IADuB;AAExCC,QAAAA,UAAU,EAAE,KAF4B;AAGxCC,QAAAA,SAAS,EAAE;AAH6B,OAAb,CAA7B;AAKA,YAAMf,YAAY,GAAG,MAAMW,MAAM,CAACK,SAAP,CAAiBjB,IAAI,CAACM,MAAtB,EAA8B;AACvDY,QAAAA,KAAK,EAAE,IADgD;AAEvDC,QAAAA,WAAW,EAAE,IAF0C;AAGvDC,QAAAA,gBAAgB,EAAE,IAHqC;AAIvDC,QAAAA,YAAY,EAAE,IAJyC;AAKvDC,QAAAA,QAAQ,EAAE;AAL6C,OAA9B,CAA3B;AAQA,aAAO;AACLtB,QAAAA,IADK;AAELC,QAAAA,YAFK;AAGLC,QAAAA,SAAS,EAAEF,IAAI,CAACuB,MAAL,CAAYC,GAAZ,CAAiBC,KAAD,IAAW;AAAM,UAAA,GAAG,EAAC,YAAV;AAAuB,UAAA,IAAI,EAAG,cAAaA,KAAK,CAACC,IAAK,EAAtD;AAAyD,UAAA,GAAG,EAAED,KAAK,CAACC,IAApE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAA3B;AAHN,OAAP;AAKD,KApBD,CAoBE,OAAOC,KAAP,EAAc;AACdC,MAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBF,KAArB;AACD;AACF;;AAGD,SAAO,EAAP;AACD,CA/BD;;AAiCA,eAAe5B,MAAf","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { NextPageContext, NextPage } from 'next';\n\n\nimport ViewerPageComponent from '../components/viewer/ViewerPage';\n\nimport { EpubBook } from '../interfaces/books';\nimport Layout from '../components/Layout';\n\ninterface Props {\n  book: EpubBook;\n  viewerSpines: string[];\n  styleTags: string[];\n}\n\nconst Viewer: NextPage<Props> = ({ book, viewerSpines, styleTags }) => {\n  const [flag, setFlag] = useState(true);\n\n  useEffect(() => {\n    setTimeout(() => {\n      setFlag(true); \n    }, 3000);\n  }, [])\n\n\n  return (\n    <Layout\n    >\n\n      {\n        flag &&\n        <ViewerPageComponent\n        spines={book.spines}\n        viewerSpines={viewerSpines}\n      />\n      }\n\n    </Layout>\n  );\n};\n\n// eslint-disable-next-line @typescript-eslint/unbound-method\nViewer.getInitialProps = async (context: NextPageContext<any>): Promise<any> => {\n  const { req } = context;\n  if (req) {\n    const { EpubParser } = require('@ridi/epub-parser');\n    try {\n      const parser = new EpubParser('public/jikji.epub');\n      const book: EpubBook = await parser.parse({\n        validatePackage: true,\n        parseStyle: false,\n        unzipPath: 'public/epub/jikji',\n      });\n      const viewerSpines = await parser.readItems(book.spines, {\n        force: true,\n        extractBody: true,\n        serializedAnchor: true,\n        ignoreScript: true,\n        basePath: 'epub/jikji',\n      });\n\n      return {\n        book,\n        viewerSpines,\n        styleTags: book.styles.map((style) => <link rel=\"stylesheet\" href={`epub/jikji/${style.href}`} key={style.href} />),\n      };\n    } catch (error) {\n      console.log('Error', error);\n    }\n  }\n\n\n  return {};\n};\n\nexport default Viewer;\n"]},"metadata":{},"sourceType":"module"}