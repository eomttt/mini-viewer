{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nvar _jsxFileName = \"/Users/hyuntaeeom/Projects/personal/mini-viewer/pages/viewer.tsx\";\nvar __jsx = React.createElement;\nimport React, { useState, useMemo, useEffect, useCallback } from 'react';\nimport { useSelector } from 'react-redux';\nimport Layout from '../components/Layout';\nimport ViewerHeader from '../components/viewer/ViewerHeader';\nimport { VIEWER_WIDTH_RATIO, VIEWER_HEIGHT_RATIO } from '../constants/viewer';\n\nvar Viewer = function Viewer(_ref) {\n  var book = _ref.book,\n      viewerSpines = _ref.viewerSpines,\n      styleLinks = _ref.styleLinks;\n  var spines = book.spines,\n      titles = book.titles,\n      ncx = book.ncx;\n  console.log('Book', book);\n\n  var _useState = useState(0),\n      viewerWidth = _useState[0],\n      setViewerWidth = _useState[1];\n\n  var _useState2 = useState(0),\n      viewerHeight = _useState2[0],\n      setViewerHeight = _useState2[1];\n\n  var _useState3 = useState(0),\n      nowSpineIndex = _useState3[0],\n      setNowSpineIndex = _useState3[1];\n\n  var _useState4 = useState(false),\n      isClickedPrev = _useState4[0],\n      setIsClickedPrev = _useState4[1];\n\n  var _useSelector = useSelector(function (state) {\n    return state.viewer;\n  }),\n      viewerCountList = _useSelector.viewerCountList;\n\n  var isAnalizedSpine = useMemo(function () {\n    return viewerCountList.length === viewerSpines.length;\n  }, [viewerCountList, viewerSpines]);\n  useEffect(function () {\n    setViewerWidth(Math.floor(window.innerWidth * (VIEWER_WIDTH_RATIO / 100)));\n    setViewerHeight(Math.floor(window.innerHeight * (VIEWER_HEIGHT_RATIO / 100)));\n  }, []);\n  var setNextSpine = useCallback(function () {\n    if (nowSpineIndex + 1 >= viewerSpines.length) {\n      alert('마지막 페이지 입니다.');\n    } else {\n      setNowSpineIndex(nowSpineIndex + 1);\n      setIsClickedPrev(false);\n    }\n  }, [nowSpineIndex, viewerSpines]);\n  var setPrevSpine = useCallback(function () {\n    if (nowSpineIndex - 1 < 0) {\n      alert('첫번째 페이지 입니다');\n    } else {\n      setNowSpineIndex(nowSpineIndex - 1);\n      setIsClickedPrev(true);\n    }\n  }, [nowSpineIndex]);\n  return __jsx(Layout, {\n    styleLinks: styleLinks,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63\n    },\n    __self: this\n  }, __jsx(ViewerHeader, {\n    viewerHeight: viewerHeight,\n    titles: titles,\n    ncxItem: ncx,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66\n    },\n    __self: this\n  }));\n}; // eslint-disable-next-line @typescript-eslint/unbound-method\n\n\nViewer.getInitialProps = function _callee(context) {\n  var req, _require, EpubParser, parser, book, viewerSpines;\n\n  return _regeneratorRuntime.async(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          req = context.req;\n\n          if (!req) {\n            _context.next = 17;\n            break;\n          }\n\n          _require = require('@ridi/epub-parser'), EpubParser = _require.EpubParser;\n          _context.prev = 3;\n          parser = new EpubParser('public/jikji.epub');\n          _context.next = 7;\n          return _regeneratorRuntime.awrap(parser.parse({\n            validatePackage: true,\n            parseStyle: false,\n            unzipPath: 'public/epub/jikji'\n          }));\n\n        case 7:\n          book = _context.sent;\n          _context.next = 10;\n          return _regeneratorRuntime.awrap(parser.readItems(book.spines, {\n            force: true,\n            extractBody: true,\n            serializedAnchor: true,\n            ignoreScript: true,\n            basePath: 'epub/jikji'\n          }));\n\n        case 10:\n          viewerSpines = _context.sent;\n          return _context.abrupt(\"return\", {\n            book: book,\n            viewerSpines: viewerSpines,\n            styleLinks: book.styles.map(function (style) {\n              return \"epub/jikji/\".concat(style.href);\n            })\n          });\n\n        case 14:\n          _context.prev = 14;\n          _context.t0 = _context[\"catch\"](3);\n          console.log('Error', _context.t0);\n\n        case 17:\n          return _context.abrupt(\"return\", {});\n\n        case 18:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, [[3, 14]], Promise);\n};\n\nexport default Viewer;","map":{"version":3,"sources":["/Users/hyuntaeeom/Projects/personal/mini-viewer/pages/viewer.tsx"],"names":["React","useState","useMemo","useEffect","useCallback","useSelector","Layout","ViewerHeader","VIEWER_WIDTH_RATIO","VIEWER_HEIGHT_RATIO","Viewer","book","viewerSpines","styleLinks","spines","titles","ncx","console","log","viewerWidth","setViewerWidth","viewerHeight","setViewerHeight","nowSpineIndex","setNowSpineIndex","isClickedPrev","setIsClickedPrev","state","viewer","viewerCountList","isAnalizedSpine","length","Math","floor","window","innerWidth","innerHeight","setNextSpine","alert","setPrevSpine","getInitialProps","context","req","require","EpubParser","parser","parse","validatePackage","parseStyle","unzipPath","readItems","force","extractBody","serializedAnchor","ignoreScript","basePath","styles","map","style","href"],"mappings":"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","sourcesContent":["import React, {\n  useState, useMemo, useEffect, useCallback,\n} from 'react';\nimport { useSelector } from 'react-redux';\nimport { NextPageContext, NextPage } from 'next';\n\nimport Layout from '../components/Layout';\nimport ViewerCount from '../components/viewer/ViewerCount';\nimport ViewerHeader from '../components/viewer/ViewerHeader';\nimport ViewerPage from '../components/viewer/ViewerPage';\n\nimport { VIEWER_WIDTH_RATIO, VIEWER_HEIGHT_RATIO } from '../constants/viewer';\n\nimport { ReducerState } from '../interfaces';\nimport { EpubBook } from '../interfaces/books';\n\nimport { ViewerContainer } from '../styles/viewer';\n\ninterface Props {\n  book: EpubBook;\n  viewerSpines: string[];\n  styleLinks: string[];\n}\n\nconst Viewer: NextPage<Props> = ({ book, viewerSpines, styleLinks }) => {\n  const { spines, titles, ncx } = book;\n\n  console.log('Book', book);\n\n  const [viewerWidth, setViewerWidth] = useState(0);\n  const [viewerHeight, setViewerHeight] = useState(0);\n  const [nowSpineIndex, setNowSpineIndex] = useState(0);\n  const [isClickedPrev, setIsClickedPrev] = useState(false);\n\n  const { viewerCountList } = useSelector((state: ReducerState) => state.viewer);\n\n  const isAnalizedSpine = useMemo(() => viewerCountList.length === viewerSpines.length, [viewerCountList, viewerSpines]);\n\n  useEffect(() => {\n    setViewerWidth(Math.floor(window.innerWidth * (VIEWER_WIDTH_RATIO / 100)));\n    setViewerHeight(Math.floor(window.innerHeight * (VIEWER_HEIGHT_RATIO / 100)));\n  }, []);\n\n  const setNextSpine = useCallback(() => {\n    if (nowSpineIndex + 1 >= viewerSpines.length) {\n      alert('마지막 페이지 입니다.');\n    } else {\n      setNowSpineIndex(nowSpineIndex + 1);\n      setIsClickedPrev(false);\n    }\n  }, [nowSpineIndex, viewerSpines]);\n\n  const setPrevSpine = useCallback(() => {\n    if (nowSpineIndex - 1 < 0) {\n      alert('첫번째 페이지 입니다');\n    } else {\n      setNowSpineIndex(nowSpineIndex - 1);\n      setIsClickedPrev(true);\n    }\n  }, [nowSpineIndex]);\n\n  return (\n    <Layout\n      styleLinks={styleLinks}\n    >\n      <ViewerHeader\n        viewerHeight={viewerHeight}\n        titles={titles}\n        ncxItem={ncx}\n      />\n      {/* <ViewerContainer\n        styleProps={{\n          height: viewerHeight,\n        }}\n      >\n        {\n        isAnalizedSpine\n        && (\n          <ViewerPage\n            viewerWidth={viewerWidth}\n            viewerHeight={viewerHeight}\n            isShowPrevViewer={isClickedPrev}\n            wholeColumnCount={viewerCountList[nowSpineIndex].count}\n            spine={spines[nowSpineIndex]}\n            viewerSpine={viewerSpines[nowSpineIndex]}\n            setNextSpine={setNextSpine}\n            setPrevSpine={setPrevSpine}\n          />\n        )\n      }\n        <section>\n          {\n          viewerSpines.map((viewerSpine, index) => (\n            <ViewerCount\n              key={viewerSpine}\n              viewerWidth={viewerWidth}\n              viewerHeight={viewerHeight}\n              viewerSpine={viewerSpine}\n              viewerSpineIndex={index}\n            />\n          ))\n        }\n        </section>\n      </ViewerContainer> */}\n    </Layout>\n  );\n};\n\n// eslint-disable-next-line @typescript-eslint/unbound-method\nViewer.getInitialProps = async (context: NextPageContext<any>): Promise<any> => {\n  const { req } = context;\n  if (req) {\n    const { EpubParser } = require('@ridi/epub-parser');\n    try {\n      const parser = new EpubParser('public/jikji.epub');\n      const book: EpubBook = await parser.parse({\n        validatePackage: true,\n        parseStyle: false,\n        unzipPath: 'public/epub/jikji',\n      });\n      const viewerSpines = await parser.readItems(book.spines, {\n        force: true,\n        extractBody: true,\n        serializedAnchor: true,\n        ignoreScript: true,\n        basePath: 'epub/jikji',\n      });\n\n      return {\n        book,\n        viewerSpines,\n        styleLinks: book.styles.map((style) => `epub/jikji/${style.href}`),\n      };\n    } catch (error) {\n      console.log('Error', error);\n    }\n  }\n\n\n  return {};\n};\n\nexport default Viewer;\n"]},"metadata":{},"sourceType":"module"}