{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nvar __jsx = React.createElement;\nimport React, { useState, useMemo, useEffect, useCallback } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport styled from 'styled-components';\nimport ViewerBottom from '../components/viewer/ViewerBottom';\nimport ViewerCalculator from '../components/viewer/ViewerCalculator';\nimport ViewerHeader from '../components/viewer/ViewerHeader';\nimport ViewerPage from '../components/viewer/ViewerPage';\nimport * as viewerActions from '../reducers/viewer';\nimport { getBookInfo, getStyleText } from '../lib/util';\nimport { VIEWER_WIDTH_RATIO, VIEWER_HEIGHT_RATIO } from '../constants/viewer';\nimport Layout from '../components/Layout';\nvar Container = styled.div.withConfig({\n  displayName: \"viewer__Container\",\n  componentId: \"sc-1iklkx5-0\"\n})([\"padding:\", \"% \", \"%;height:\", \"px;background-color:\", \";text-align:center;overflow:hidden;\"], (100 - VIEWER_HEIGHT_RATIO) / 2, (100 - VIEWER_WIDTH_RATIO) / 2, function (props) {\n  return props.styleProps.height;\n}, function (props) {\n  return props.styleProps.backgroundColor;\n});\n\nvar Viewer = function Viewer(_ref) {\n  var book = _ref.book,\n      viewers = _ref.viewers,\n      styleText = _ref.styleText;\n  var spines = book.spines,\n      titles = book.titles,\n      ncx = book.ncx,\n      contributors = book.contributors;\n  var dispatch = useDispatch();\n\n  var _useState = useState(0),\n      viewerWidth = _useState[0],\n      setViewerWidth = _useState[1];\n\n  var _useState2 = useState(0),\n      viewerHeight = _useState2[0],\n      setViewerHeight = _useState2[1];\n\n  var _useState3 = useState(0),\n      nowSpineIndex = _useState3[0],\n      setNowSpineIndex = _useState3[1];\n\n  var _useState4 = useState(0),\n      wholePageCount = _useState4[0],\n      setWholePageCount = _useState4[1];\n\n  var _useSelector = useSelector(function (state) {\n    return state.viewer;\n  }),\n      viewerCountList = _useSelector.viewerCountList,\n      viewerPageCount = _useSelector.viewerPageCount;\n\n  var _useSelector2 = useSelector(function (state) {\n    return state.viewerSetting;\n  }),\n      fontSize = _useSelector2.fontSize,\n      widthRatio = _useSelector2.widthRatio,\n      lineHeight = _useSelector2.lineHeight,\n      backgroundColor = _useSelector2.backgroundColor;\n\n  var isAnalyzedSpine = useMemo(function () {\n    return viewerCountList.length >= viewers.length;\n  }, [viewerCountList, viewers]);\n  var isFirstPage = useMemo(function () {\n    return viewerPageCount === 0;\n  }, [viewerPageCount]);\n  var isLastPage = useMemo(function () {\n    return viewerPageCount === wholePageCount;\n  }, [viewerPageCount, wholePageCount]);\n  var selectedSpineIndex = useMemo(function () {\n    var spineIndex = 0;\n    var accurateCount = 0;\n    viewerCountList.some(function (viewerCount) {\n      if (accurateCount + viewerCount.count > viewerPageCount) {\n        spineIndex = viewerCount.index;\n        return true;\n      }\n\n      accurateCount += viewerCount.count;\n      return false;\n    });\n    return spineIndex;\n  }, [viewerPageCount, viewerCountList]);\n  var pageColumnOffset = useMemo(function () {\n    var columnOffset = viewerPageCount;\n    viewerCountList.some(function (viewerCount, index) {\n      if (index < nowSpineIndex) {\n        columnOffset -= viewerCount.count;\n        return false;\n      }\n\n      return true;\n    });\n    return columnOffset;\n  }, [viewerCountList, viewerPageCount, nowSpineIndex]);\n  useEffect(function () {\n    setViewerWidth(Math.floor(window.innerWidth * (VIEWER_WIDTH_RATIO / 100)));\n    setViewerHeight(Math.floor(window.innerHeight * (VIEWER_HEIGHT_RATIO / 100)));\n    return function () {\n      dispatch(viewerActions.initViewerState());\n    };\n  }, [dispatch]);\n  useEffect(function () {\n    console.log('Now spine index', selectedSpineIndex);\n    setNowSpineIndex(selectedSpineIndex);\n  }, [selectedSpineIndex]);\n  useEffect(function () {\n    if (isAnalyzedSpine) {\n      console.log('Set whole page count');\n      var pageCount = viewerCountList.reduce(function (acc, cur) {\n        return acc + cur.count;\n      }, 0);\n      setWholePageCount(pageCount - 1);\n    }\n  }, [isAnalyzedSpine, viewerCountList]);\n  useEffect(function () {\n    console.log('New style');\n    dispatch(viewerActions.initViewerState());\n  }, [dispatch, fontSize, lineHeight, widthRatio]);\n  var calculateViewerWidth = useCallback(function (nowWidth, newRatio) {\n    return Math.floor(Number(nowWidth) * (Number(newRatio) / 100));\n  }, []);\n  return __jsx(Layout, {\n    styleText: styleText\n  }, __jsx(ViewerHeader, {\n    titles: titles,\n    authors: contributors,\n    ncxItem: ncx\n  }), __jsx(Container, {\n    styleProps: {\n      height: viewerHeight,\n      backgroundColor: backgroundColor\n    }\n  }, isAnalyzedSpine && __jsx(ViewerPage, {\n    viewerWidth: calculateViewerWidth(viewerWidth, widthRatio),\n    viewerHeight: viewerHeight,\n    pageColumnOffset: pageColumnOffset,\n    viewerSpine: viewers[nowSpineIndex],\n    isFirstPage: isFirstPage,\n    isLastPage: isLastPage\n  }), !isAnalyzedSpine && __jsx(ViewerCalculator, {\n    viewerWidth: calculateViewerWidth(viewerWidth, widthRatio),\n    viewerHeight: viewerHeight,\n    spines: spines,\n    viewers: viewers\n  })), __jsx(ViewerBottom, {\n    sliderMaxValue: wholePageCount\n  }));\n}; // eslint-disable-next-line @typescript-eslint/unbound-method\n\n\nViewer.getInitialProps = function _callee(context) {\n  var req, store, query, bookPath, queryPath, _require, EpubParser, _queryPath$split, _queryPath$split2, fileName, publicPath, _ref2, book, viewers, styleText, _store$getState, books, list, selectedBookInfo, _selectedBookInfo, _book, _viewers, _publicPath, _styleText;\n\n  return _regeneratorRuntime.async(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          req = context.req, store = context.store, query = context.query;\n          bookPath = query.bookPath;\n          queryPath = decodeURI(String(bookPath || 'epub/jikji'));\n\n          if (!req) {\n            _context.next = 24;\n            break;\n          }\n\n          // Server side render\n          _require = require('@ridi/epub-parser'), EpubParser = _require.EpubParser;\n          _queryPath$split = queryPath.split('/'), _queryPath$split2 = _slicedToArray(_queryPath$split, 2), fileName = _queryPath$split2[1];\n          publicPath = \"http://\".concat(req.headers.host, \"/\").concat(queryPath);\n          _context.prev = 7;\n          _context.next = 10;\n          return _regeneratorRuntime.awrap(getBookInfo(EpubParser, {\n            epubFile: fileName,\n            epubPath: queryPath\n          }));\n\n        case 10:\n          _ref2 = _context.sent;\n          book = _ref2.book;\n          viewers = _ref2.viewers;\n          _context.next = 15;\n          return _regeneratorRuntime.awrap(getStyleText(publicPath, book.styles));\n\n        case 15:\n          styleText = _context.sent;\n          return _context.abrupt(\"return\", {\n            book: book,\n            viewers: viewers,\n            styleText: styleText\n          });\n\n        case 19:\n          _context.prev = 19;\n          _context.t0 = _context[\"catch\"](7);\n          console.log('Error', _context.t0);\n\n        case 22:\n          _context.next = 33;\n          break;\n\n        case 24:\n          // Client side render\n          _store$getState = store.getState(), books = _store$getState.books;\n          list = books.list;\n          selectedBookInfo = list[0];\n          list.some(function (bookInfo) {\n            if (bookInfo.publicPath === queryPath) {\n              selectedBookInfo = bookInfo;\n              return true;\n            }\n\n            return false;\n          });\n          _selectedBookInfo = selectedBookInfo, _book = _selectedBookInfo.book, _viewers = _selectedBookInfo.viewers, _publicPath = _selectedBookInfo.publicPath;\n          _context.next = 31;\n          return _regeneratorRuntime.awrap(getStyleText(_publicPath, _book.styles));\n\n        case 31:\n          _styleText = _context.sent;\n          return _context.abrupt(\"return\", {\n            book: _book,\n            viewers: _viewers,\n            styleText: _styleText\n          });\n\n        case 33:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, [[7, 19]], Promise);\n};\n\nexport default Viewer;","map":null,"metadata":{},"sourceType":"module"}