{"ast":null,"code":"var _jsxFileName = \"/Users/hyuntaeeom/Projects/personal/mini-viewer/components/viewer/ViewerSetting.tsx\";\nvar __jsx = React.createElement;\nimport React, { useCallback, useState, useEffect } from 'react';\nimport { useSelector } from 'react-redux';\nimport styled from 'styled-components';\nimport ViewerSettingColor from './ViewerSettingColor';\nimport * as settingActions from '../../reducers/viewerSetting';\nimport { subColor, defaultColor } from '../../styles';\nimport { SETTING_ITEM_TYPE, SETTING_ITEM_KEY, SETTING_ITEM_LABEL } from '../../constants/viewer';\nvar Container = styled.div.withConfig({\n  displayName: \"ViewerSetting__Container\",\n  componentId: \"sc-1omnhz6-0\"\n})([\"position:relative;\"]);\nvar ToggleButton = styled.div.withConfig({\n  displayName: \"ViewerSetting__ToggleButton\",\n  componentId: \"sc-1omnhz6-1\"\n})([\"cursor:pointer;\"]);\nvar SettingItems = styled.ul.withConfig({\n  displayName: \"ViewerSetting__SettingItems\",\n  componentId: \"sc-1omnhz6-2\"\n})([\"position:absolute;width:10em;left:50%;transform:translateX(-50%);overflow:scroll;list-style-type:none;margin:0;padding:0;border:1px solid \", \";background-color:\", \";\"], subColor, defaultColor);\n\nvar ViewerSetting = function ViewerSetting() {\n  var _useSelector = useSelector(function (state) {\n    return state.viewerSetting;\n  }),\n      fontSize = _useSelector.fontSize,\n      padding = _useSelector.padding,\n      lineHeight = _useSelector.lineHeight,\n      backgroundColor = _useSelector.backgroundColor;\n\n  var _useState = useState(true),\n      isShowSetting = _useState[0],\n      setIsShowSetting = _useState[1];\n\n  var _useState2 = useState([]),\n      settingItems = _useState2[0],\n      setSettingItems = _useState2[1];\n\n  useEffect(function () {\n    setSettingItems([{\n      label: SETTING_ITEM_LABEL.FONT_SIZE,\n      key: SETTING_ITEM_KEY.FONT_SIZE,\n      value: fontSize,\n      action: settingActions.setViewerSettingFontSize\n    }, {\n      label: SETTING_ITEM_LABEL.PADDING,\n      key: SETTING_ITEM_KEY.PADDING,\n      value: padding,\n      action: settingActions.setViewerSettingPadding\n    }, {\n      label: SETTING_ITEM_LABEL.LINE_HEIGHT,\n      key: SETTING_ITEM_KEY.LINE_HEIGHT,\n      value: lineHeight,\n      action: settingActions.setViewerSettingLineHeight\n    }, {\n      label: SETTING_ITEM_LABEL.BACKGROUND_COLOR,\n      key: SETTING_ITEM_KEY.BACKGROUND_COLOR,\n      value: backgroundColor,\n      action: settingActions.setViewerSettingBackgroundColor\n    }]);\n  }, [fontSize, padding, lineHeight, backgroundColor]);\n  var toggleShowNcs = useCallback(function () {\n    setIsShowSetting(!isShowSetting);\n  }, [isShowSetting]);\n  var renderSettingItem = useCallback(function (settingItem) {\n    var type = settingItem.type,\n        key = settingItem.key,\n        label = settingItem.label,\n        value = settingItem.value,\n        action = settingItem.action;\n\n    if (type === SETTING_ITEM_TYPE.COLOR) {\n      return __jsx(ViewerSettingColor, {\n        key: key,\n        label: label,\n        value: value,\n        action: action,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 84\n        },\n        __self: this\n      });\n    }\n\n    return __jsx(ViewerSettingItem, {\n      key: key,\n      label: label,\n      value: value,\n      action: action,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93\n      },\n      __self: this\n    });\n  }, []);\n  return __jsx(Container, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103\n    },\n    __self: this\n  }, __jsx(ToggleButton, {\n    onClick: toggleShowNcs,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104\n    },\n    __self: this\n  }, \"\\uC124\\uC815\"), isShowSetting && __jsx(SettingItems, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110\n    },\n    __self: this\n  }, settingItems.map(function (settingItem) {\n    return renderSettingItem(settingItem);\n  })));\n};\n\nexport default ViewerSetting;","map":{"version":3,"sources":["/Users/hyuntaeeom/Projects/personal/mini-viewer/components/viewer/ViewerSetting.tsx"],"names":["React","useCallback","useState","useEffect","useSelector","styled","ViewerSettingColor","settingActions","subColor","defaultColor","SETTING_ITEM_TYPE","SETTING_ITEM_KEY","SETTING_ITEM_LABEL","Container","div","ToggleButton","SettingItems","ul","ViewerSetting","state","viewerSetting","fontSize","padding","lineHeight","backgroundColor","isShowSetting","setIsShowSetting","settingItems","setSettingItems","label","FONT_SIZE","key","value","action","setViewerSettingFontSize","PADDING","setViewerSettingPadding","LINE_HEIGHT","setViewerSettingLineHeight","BACKGROUND_COLOR","setViewerSettingBackgroundColor","toggleShowNcs","renderSettingItem","settingItem","type","COLOR","map"],"mappings":"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","sourcesContent":["import React, { useCallback, useState, useEffect } from 'react';\nimport { useSelector } from 'react-redux';\n\nimport styled from 'styled-components';\n\nimport ViewerSettingCountItem from './ViewerSettingCountItem';\nimport ViewerSettingColor from './ViewerSettingColor';\n\nimport * as settingActions from '../../reducers/viewerSetting';\n\nimport { subColor, defaultColor } from '../../styles';\n\nimport { SETTING_ITEM_TYPE, SETTING_ITEM_KEY, SETTING_ITEM_LABEL } from '../../constants/viewer';\n\nimport { ReducerState } from '../../interfaces';\nimport { SettingItem } from '../../interfaces/viewer';\n\nconst Container = styled.div`\n  position: relative;\n`;\n\nconst ToggleButton = styled.div`\n  cursor: pointer;\n`;\n\nconst SettingItems = styled.ul`\n  position: absolute;\n  width: 10em;\n  left: 50%;\n  transform: translateX(-50%);\n  overflow: scroll;\n  list-style-type: none;\n  margin: 0;\n  padding: 0;\n  border: 1px solid ${subColor};\n  background-color: ${defaultColor};\n`;\n\nconst ViewerSetting: React.FunctionComponent = () => {\n  const {\n    fontSize, padding, lineHeight, backgroundColor,\n  } = useSelector((state: ReducerState) => state.viewerSetting);\n\n  const [isShowSetting, setIsShowSetting] = useState(true);\n  const [settingItems, setSettingItems] = useState<SettingItem[]>([]);\n\n  useEffect(() => {\n    setSettingItems([\n      {\n        label: SETTING_ITEM_LABEL.FONT_SIZE,\n        key: SETTING_ITEM_KEY.FONT_SIZE,\n        value: fontSize,\n        action: settingActions.setViewerSettingFontSize,\n      }, {\n        label: SETTING_ITEM_LABEL.PADDING,\n        key: SETTING_ITEM_KEY.PADDING,\n        value: padding,\n        action: settingActions.setViewerSettingPadding,\n      }, {\n        label: SETTING_ITEM_LABEL.LINE_HEIGHT,\n        key: SETTING_ITEM_KEY.LINE_HEIGHT,\n        value: lineHeight,\n        action: settingActions.setViewerSettingLineHeight,\n      }, {\n        label: SETTING_ITEM_LABEL.BACKGROUND_COLOR,\n        key: SETTING_ITEM_KEY.BACKGROUND_COLOR,\n        value: backgroundColor,\n        action: settingActions.setViewerSettingBackgroundColor,\n      },\n    ]);\n  }, [fontSize, padding, lineHeight, backgroundColor]);\n\n  const toggleShowNcs = useCallback(() => {\n    setIsShowSetting(!isShowSetting);\n  }, [isShowSetting]);\n\n  const renderSettingItem = useCallback((settingItem: SettingItem) => {\n    const {\n      type, key, label, value, action,\n    } = settingItem;\n\n    if (type === SETTING_ITEM_TYPE.COLOR) {\n      return (\n        <ViewerSettingColor\n          key={key}\n          label={label}\n          value={value}\n          action={action}\n        />\n      );\n    }\n    return (\n      <ViewerSettingItem\n        key={key}\n        label={label}\n        value={value}\n        action={action}\n      />\n    );\n  }, []);\n\n  return (\n    <Container>\n      <ToggleButton onClick={toggleShowNcs}>\n        설정\n      </ToggleButton>\n      {\n        isShowSetting\n        && (\n        <SettingItems>\n          {\n            settingItems.map((settingItem) => renderSettingItem(settingItem))\n          }\n        </SettingItems>\n        )\n      }\n    </Container>\n  );\n};\n\nexport default ViewerSetting;\n"]},"metadata":{},"sourceType":"module"}