{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useEffect, useCallback, useReducer } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport * as viewerActions from '../../reducers/viewer';\nimport ViewerCount from './ViewerCount';\nvar PRIVATE_ADD_COUNT_ACTION = 'AddCount';\nvar initialState = {\n  countItems: []\n};\n\nvar privateReducer = function privateReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case PRIVATE_ADD_COUNT_ACTION:\n      {\n        var data = action.payload;\n        return _objectSpread({}, state, {\n          countItems: [].concat(_toConsumableArray(state.countItems), [data])\n        });\n      }\n\n    default:\n      {\n        return _objectSpread({}, state);\n      }\n  }\n};\n\nvar ViewerCalculator = function ViewerCalculator(_ref) {\n  var viewerWidth = _ref.viewerWidth,\n      viewerHeight = _ref.viewerHeight,\n      viewers = _ref.viewers,\n      spines = _ref.spines;\n  var dispatch = useDispatch();\n\n  var _useReducer = useReducer(privateReducer, initialState),\n      reducerState = _useReducer[0],\n      dispatchReducer = _useReducer[1];\n\n  var _useSelector = useSelector(function (state) {\n    return state.viewerSetting;\n  }),\n      fontSize = _useSelector.fontSize,\n      widthRatio = _useSelector.widthRatio,\n      lineHeight = _useSelector.lineHeight;\n\n  var _setCountCallback = useCallback(function (count, index) {\n    var spine = spines[index];\n    dispatchReducer({\n      type: PRIVATE_ADD_COUNT_ACTION,\n      payload: {\n        index: index,\n        count: count,\n        spineId: spine.id\n      }\n    });\n  }, [spines]);\n\n  useEffect(function () {\n    var countItems = reducerState.countItems;\n\n    if (countItems.length >= spines.length) {\n      dispatch(viewerActions.setViewerCountList(countItems));\n    }\n  }, [dispatch, reducerState, spines]);\n  return __jsx(React.Fragment, null, viewers.map(function (viewer, index) {\n    return __jsx(ViewerCount, {\n      key: viewer,\n      viewerWidth: viewerWidth,\n      viewerHeight: viewerHeight,\n      viewer: viewer,\n      viewerStyle: {\n        fontSize: fontSize,\n        widthRatio: widthRatio,\n        lineHeight: lineHeight\n      },\n      setCountCallback: function setCountCallback(count) {\n        return _setCountCallback(count, index);\n      }\n    });\n  }));\n};\n\nexport default ViewerCalculator;","map":null,"metadata":{},"sourceType":"module"}