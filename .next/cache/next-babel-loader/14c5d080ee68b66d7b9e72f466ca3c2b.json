{"ast":null,"code":"var _jsxFileName = \"/Users/hyuntaeeom/Projects/personal/mini-viewer/components/viewer/ViewerCount.tsx\";\nvar __jsx = React.createElement;\nimport React, { useRef, useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { HiddenViewSection, Contents } from '../../styles/viewer';\nimport { VIEWER_HEIGHT_RATIO } from '../../constants/viewer';\n\nvar ViewerCount = function ViewerCount(_ref) {\n  var viewerSpineIndex = _ref.viewerSpineIndex,\n      viewerSpine = _ref.viewerSpine;\n  var dispatch = useDispatch();\n  var hiddenViewSectionRef = useRef(null);\n  useEffect(function () {\n    if (hiddenViewSectionRef) {\n      setTimeout(function () {\n        var viewerHeight = Math.floor(window.innerHeight * (VIEWER_HEIGHT_RATIO / 100));\n        var hiddenViewSectionCurrent = hiddenViewSectionRef.current;\n        var count = hiddenViewSectionCurrent.clientHeight / viewerHeight;\n        console.log('AA', hiddenViewSectionCurrent.clientWidth);\n        console.log('BB', hiddenViewSectionCurrent.offsetHeight);\n        console.log('hiddenViewSectionCurrent.clientHeight', hiddenViewSectionCurrent, hiddenViewSectionCurrent.clientHeight, viewerHeight);\n      }); // dispatch(actions.setViewerCount({\n      //   index: viewerSpineIndex,\n      //   count: count,\n      // }));\n    } // eslint-disable-next-line react-hooks/exhaustive-deps\n\n  }, [hiddenViewSectionRef]);\n  return __jsx(HiddenViewSection, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42\n    },\n    __self: this\n  }, __jsx(Contents, {\n    ref: hiddenViewSectionRef,\n    dangerouslySetInnerHTML: {\n      __html: viewerSpine\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45\n    },\n    __self: this\n  }));\n};\n\nexport default ViewerCount;","map":{"version":3,"sources":["/Users/hyuntaeeom/Projects/personal/mini-viewer/components/viewer/ViewerCount.tsx"],"names":["React","useRef","useEffect","useDispatch","HiddenViewSection","Contents","VIEWER_HEIGHT_RATIO","ViewerCount","viewerSpineIndex","viewerSpine","dispatch","hiddenViewSectionRef","setTimeout","viewerHeight","Math","floor","window","innerHeight","hiddenViewSectionCurrent","current","count","clientHeight","console","log","clientWidth","offsetHeight","__html"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,MAAhB,EAAwBC,SAAxB,QAAyC,OAAzC;AACA,SAASC,WAAT,QAA4B,aAA5B;AAEA,SAASC,iBAAT,EAA4BC,QAA5B,QAA4C,qBAA5C;AAEA,SAASC,mBAAT,QAAoC,wBAApC;;AASA,IAAMC,WAA2C,GAAG,SAA9CA,WAA8C,OAE9C;AAAA,MADJC,gBACI,QADJA,gBACI;AAAA,MADcC,WACd,QADcA,WACd;AACJ,MAAMC,QAAQ,GAAGP,WAAW,EAA5B;AACA,MAAMQ,oBAAoB,GAAGV,MAAM,CAAC,IAAD,CAAnC;AAEAC,EAAAA,SAAS,CAAC,YAAM;AACd,QAAIS,oBAAJ,EAA0B;AACxBC,MAAAA,UAAU,CAAC,YAAM;AACf,YAAMC,YAAY,GAAGC,IAAI,CAACC,KAAL,CAAWC,MAAM,CAACC,WAAP,IAAsBX,mBAAmB,GAAG,GAA5C,CAAX,CAArB;AADe,YAEEY,wBAFF,GAE+BP,oBAF/B,CAEPQ,OAFO;AAGf,YAAMC,KAAK,GAAGF,wBAAwB,CAACG,YAAzB,GAAwCR,YAAtD;AACAS,QAAAA,OAAO,CAACC,GAAR,CAAY,IAAZ,EAAkBL,wBAAwB,CAACM,WAA3C;AACAF,QAAAA,OAAO,CAACC,GAAR,CAAY,IAAZ,EAAkBL,wBAAwB,CAACO,YAA3C;AACAH,QAAAA,OAAO,CAACC,GAAR,CAAY,uCAAZ,EAAqDL,wBAArD,EAA+EA,wBAAwB,CAACG,YAAxG,EAAsHR,YAAtH;AAED,OARS,CAAV,CADwB,CAWxB;AACA;AACA;AACA;AACD,KAhBa,CAiBhB;;AACC,GAlBQ,EAkBN,CAACF,oBAAD,CAlBM,CAAT;AAoBA,SACE,MAAC,iBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAGE,MAAC,QAAD;AAAU,IAAA,GAAG,EAAEA,oBAAf;AAAqC,IAAA,uBAAuB,EAAE;AAAEe,MAAAA,MAAM,EAAEjB;AAAV,KAA9D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHF,CADF;AAOD,CAjCD;;AAmCA,eAAeF,WAAf","sourcesContent":["import React, { useRef, useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\n\nimport { HiddenViewSection, Contents } from '../../styles/viewer';\n\nimport { VIEWER_HEIGHT_RATIO } from '../../constants/viewer';\n\nimport * as actions from '../../reducers/viewer';\n\ninterface Props {\n  viewerSpineIndex: number;\n  viewerSpine: string;\n}\n\nconst ViewerCount: React.FunctionComponent<Props> = ({\n  viewerSpineIndex, viewerSpine,\n}) => {\n  const dispatch = useDispatch();\n  const hiddenViewSectionRef = useRef(null);\n\n  useEffect(() => {\n    if (hiddenViewSectionRef) {\n      setTimeout(() => {\n        const viewerHeight = Math.floor(window.innerHeight * (VIEWER_HEIGHT_RATIO / 100));\n        const { current: hiddenViewSectionCurrent } = hiddenViewSectionRef;\n        const count = hiddenViewSectionCurrent.clientHeight / viewerHeight;\n        console.log('AA', hiddenViewSectionCurrent.clientWidth);\n        console.log('BB', hiddenViewSectionCurrent.offsetHeight);\n        console.log('hiddenViewSectionCurrent.clientHeight', hiddenViewSectionCurrent, hiddenViewSectionCurrent.clientHeight, viewerHeight);\n  \n      });\n\n      // dispatch(actions.setViewerCount({\n      //   index: viewerSpineIndex,\n      //   count: count,\n      // }));\n    }\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [hiddenViewSectionRef]);\n\n  return (\n    <HiddenViewSection\n      \n    >\n      <Contents ref={hiddenViewSectionRef} dangerouslySetInnerHTML={{ __html: viewerSpine }} />\n    </HiddenViewSection>\n  );\n};\n\nexport default ViewerCount;\n"]},"metadata":{},"sourceType":"module"}