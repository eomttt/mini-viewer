{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useEffect } from 'react';\nimport { useSelector } from 'react-redux';\nimport BookList from '../components/books/BookList';\nimport * as booksActions from '../reducers/books';\nimport { getBookInfo, isEpubFile } from '../lib/util';\nimport Layout from '../components/Layout';\n\nconst Home = () => {\n  const {\n    list\n  } = useSelector(state => state.books);\n  useEffect(() => {\n    if (!list) {\n      window.location.reload();\n    }\n  }, [list]);\n  return __jsx(Layout, null, list && __jsx(BookList, {\n    books: list\n  }));\n}; // eslint-disable-next-line @typescript-eslint/unbound-method\n\n\nHome.getInitialProps = async context => {\n  const {\n    req,\n    store\n  } = context;\n\n  if (req) {\n    const fs = require('fs');\n\n    const {\n      EpubParser\n    } = require('@ridi/epub-parser');\n\n    const files = fs.readdirSync('public/');\n    const booksInfo = []; // eslint-disable-next-line no-restricted-syntax\n\n    for (const file of files) {\n      if (isEpubFile(file)) {\n        const [fileName] = file.split('.epub');\n        const epubPath = `epub/${fileName}`;\n\n        try {\n          const {\n            book,\n            viewers\n          } = await getBookInfo(EpubParser, {\n            epubFile: fileName,\n            epubPath\n          });\n          booksInfo.push({\n            book,\n            viewers,\n            publicPath: epubPath\n          });\n        } catch (error) {\n          console.log('Error index.', error);\n        }\n      }\n    }\n\n    store.dispatch(booksActions.setBookList(booksInfo));\n  }\n};\n\nexport default Home;","map":null,"metadata":{},"sourceType":"module"}