{"ast":null,"code":"var _jsxFileName = \"/Users/hyuntaeeom/Projects/personal/mini-viewer/components/viewer/ViewerCalculator.tsx\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useEffect, useCallback, useState, useReducer } from 'react';\nimport ViewerCount from './ViewerCount';\nconst initialState = {\n  countItems: []\n};\n\nconst privateReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case 'AddCount':\n      {\n        const data = action.payload;\n        return _objectSpread({}, state, {\n          countItems: [...state.countItems, data]\n        });\n      }\n\n    default:\n      {\n        return _objectSpread({}, state);\n      }\n  }\n};\n\nconst ViewerCalculator = ({\n  viewerWidth,\n  viewerHeight,\n  viewers,\n  spines,\n  viewerStyle\n}) => {\n  const {\n    0: reducerState,\n    1: dispatchReducer\n  } = useReducer(privateReducer, initialState);\n  const test = [];\n  const {\n    0: item,\n    1: setItem\n  } = useState([]);\n  const setCountCallback = useCallback((count, index) => {\n    const spine = spines[index];\n    dispatchReducer({\n      type: 'AddCount',\n      payload: {\n        index,\n        count,\n        spineId: spine.id\n      }\n    });\n  }, [spines]);\n  useEffect(() => {\n    console.log('AAAA', reducerState);\n  }, [reducerState]);\n  return __jsx(React.Fragment, null, viewers.map((viewer, index) => __jsx(ViewerCount, {\n    key: viewer,\n    viewerWidth: viewerWidth,\n    viewerHeight: viewerHeight,\n    viewer: viewer,\n    viewerStyle: viewerStyle,\n    setCountCallback: count => setCountCallback(count, index),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69\n    },\n    __self: this\n  })));\n};\n\nexport default ViewerCalculator;","map":{"version":3,"sources":["/Users/hyuntaeeom/Projects/personal/mini-viewer/components/viewer/ViewerCalculator.tsx"],"names":["React","useEffect","useCallback","useState","useReducer","ViewerCount","initialState","countItems","privateReducer","state","action","type","data","payload","ViewerCalculator","viewerWidth","viewerHeight","viewers","spines","viewerStyle","reducerState","dispatchReducer","test","item","setItem","setCountCallback","count","index","spine","spineId","id","console","log","map","viewer"],"mappings":";;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,WAA3B,EAAwCC,QAAxC,EAAkDC,UAAlD,QAAoE,OAApE;AAGA,OAAOC,WAAP,MAAwB,eAAxB;AAcA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,UAAU,EAAE;AADO,CAArB;;AAIA,MAAMC,cAAc,GAAG,CAACC,KAAK,GAAGH,YAAT,EAAuBI,MAAvB,KAAkC;AACvD,UAAQA,MAAM,CAACC,IAAf;AACE,SAAK,UAAL;AAAiB;AACf,cAAMC,IAAI,GAAGF,MAAM,CAACG,OAApB;AACA,iCACKJ,KADL;AAEEF,UAAAA,UAAU,EAAE,CAAC,GAAGE,KAAK,CAACF,UAAV,EAAsBK,IAAtB;AAFd;AAID;;AACD;AAAS;AACP,iCACKH,KADL;AAGD;AAZH;AAcD,CAfD;;AAiBA,MAAMK,gBAAgD,GAAG,CAAC;AACxDC,EAAAA,WADwD;AAC3CC,EAAAA,YAD2C;AAExDC,EAAAA,OAFwD;AAE/CC,EAAAA,MAF+C;AAGxDC,EAAAA;AAHwD,CAAD,KAInD;AACJ,QAAM;AAAA,OAACC,YAAD;AAAA,OAAeC;AAAf,MAAkCjB,UAAU,CAACI,cAAD,EAAiBF,YAAjB,CAAlD;AACA,QAAMgB,IAAI,GAAG,EAAb;AACA,QAAM;AAAA,OAACC,IAAD;AAAA,OAAOC;AAAP,MAAkBrB,QAAQ,CAAC,EAAD,CAAhC;AAEA,QAAMsB,gBAAgB,GAAGvB,WAAW,CAAC,CAACwB,KAAD,EAAgBC,KAAhB,KAAkC;AACrE,UAAMC,KAAK,GAAGV,MAAM,CAACS,KAAD,CAApB;AAEAN,IAAAA,eAAe,CAAC;AACdV,MAAAA,IAAI,EAAE,UADQ;AAEdE,MAAAA,OAAO,EAAE;AACPc,QAAAA,KADO;AAEPD,QAAAA,KAFO;AAGPG,QAAAA,OAAO,EAAED,KAAK,CAACE;AAHR;AAFK,KAAD,CAAf;AAQD,GAXmC,EAWjC,CAACZ,MAAD,CAXiC,CAApC;AAaAjB,EAAAA,SAAS,CAAC,MAAM;AACd8B,IAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ,EAAoBZ,YAApB;AACD,GAFQ,EAEN,CAACA,YAAD,CAFM,CAAT;AAIA,SACE,4BAEIH,OAAO,CAACgB,GAAR,CAAY,CAACC,MAAD,EAASP,KAAT,KACV,MAAC,WAAD;AACE,IAAA,GAAG,EAAEO,MADP;AAEE,IAAA,WAAW,EAAEnB,WAFf;AAGE,IAAA,YAAY,EAAEC,YAHhB;AAIE,IAAA,MAAM,EAAEkB,MAJV;AAKE,IAAA,WAAW,EAAEf,WALf;AAME,IAAA,gBAAgB,EAAGO,KAAD,IAAWD,gBAAgB,CAACC,KAAD,EAAQC,KAAR,CAN/C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CAFJ,CADF;AAiBD,CA3CD;;AA6CA,eAAeb,gBAAf","sourcesContent":["import React, { useEffect, useCallback, useState, useReducer } from 'react';\nimport { useDispatch } from 'react-redux';\n\nimport ViewerCount from './ViewerCount';\n\n\nimport { EpubSpineItem } from '../../interfaces/books';\nimport { ViewerStyle } from '../../interfaces/viewer';\n\ninterface Props {\n  viewerWidth: number;\n  viewerHeight: number;\n  viewers: string[];\n  spines: EpubSpineItem[];\n  viewerStyle: ViewerStyle;\n}\n\nconst initialState = {\n  countItems: [],\n};\n\nconst privateReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case 'AddCount': {\n      const data = action.payload;\n      return {\n        ...state,\n        countItems: [...state.countItems, data],\n      };\n    }\n    default: {\n      return {\n        ...state,\n      };\n    }\n  }\n};\n\nconst ViewerCalculator: React.FunctionComponent<Props> = ({\n  viewerWidth, viewerHeight,\n  viewers, spines,\n  viewerStyle,\n}) => {\n  const [reducerState, dispatchReducer] = useReducer(privateReducer, initialState);\n  const test = [];\n  const [item, setItem] = useState([]);\n\n  const setCountCallback = useCallback((count: number, index: number) => {\n    const spine = spines[index];\n\n    dispatchReducer({\n      type: 'AddCount',\n      payload: {\n        index,\n        count,\n        spineId: spine.id,\n      },\n    });\n  }, [spines]);\n\n  useEffect(() => {\n    console.log('AAAA', reducerState);\n  }, [reducerState]);\n\n  return (\n    <>\n      {\n        viewers.map((viewer, index) => (\n          <ViewerCount\n            key={viewer}\n            viewerWidth={viewerWidth}\n            viewerHeight={viewerHeight}\n            viewer={viewer}\n            viewerStyle={viewerStyle}\n            setCountCallback={(count) => setCountCallback(count, index)}\n          />\n        ))\n      }\n    </>\n\n  );\n};\n\nexport default ViewerCalculator;\n"]},"metadata":{},"sourceType":"module"}