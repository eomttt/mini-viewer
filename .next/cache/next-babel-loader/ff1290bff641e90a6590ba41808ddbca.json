{"ast":null,"code":"var _jsxFileName = \"/Users/hyuntaeeom/Projects/personal/mini-viewer/components/viewer/ViewerSetting.tsx\";\nvar __jsx = React.createElement;\nimport React, { useCallback, useState } from 'react';\nimport styled from 'styled-components';\nimport ViewerSettingItem from './ViewerSettingItem';\nimport ViewerSettingColor from './ViewerSettingColor';\nimport { subColor } from '../../styles';\nimport { SETTING_ITEM_TYPE, SETTING_ITEMS } from '../../constants/viewer';\nconst Container = styled.div.withConfig({\n  displayName: \"ViewerSetting__Container\",\n  componentId: \"sc-1omnhz6-0\"\n})([\"position:relative;\"]);\nconst ToggleButton = styled.div.withConfig({\n  displayName: \"ViewerSetting__ToggleButton\",\n  componentId: \"sc-1omnhz6-1\"\n})([\"cursor:pointer;\"]);\nconst SettingItems = styled.ul.withConfig({\n  displayName: \"ViewerSetting__SettingItems\",\n  componentId: \"sc-1omnhz6-2\"\n})([\"position:absolute;width:10em;left:50%;transform:translateX(-50%);overflow:scroll;list-style-type:none;margin:0;padding:0;border:1px solid \", \";background-color:white;\"], subColor);\n\nconst ViewerSetting = () => {\n  const {\n    0: isShowSetting,\n    1: setIsShowSetting\n  } = useState(false);\n  const toggleShowNcs = useCallback(() => {\n    setIsShowSetting(!isShowSetting);\n  }, [isShowSetting]);\n  const renderSettingItem = useCallback(settingItem => {\n    const {\n      id,\n      type,\n      label\n    } = settingItem;\n\n    if (type === SETTING_ITEM_TYPE.COLOR) {\n      return __jsx(ViewerSettingColor, {\n        key: id,\n        label: label,\n        value: 0,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 45\n        },\n        __self: this\n      });\n    }\n\n    return __jsx(ViewerSettingItem, {\n      key: id,\n      label: label,\n      value: 0,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53\n      },\n      __self: this\n    });\n  }, []);\n  return __jsx(Container, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62\n    },\n    __self: this\n  }, __jsx(ToggleButton, {\n    onClick: toggleShowNcs,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63\n    },\n    __self: this\n  }, \"\\uC124\\uC815\"), isShowSetting && __jsx(SettingItems, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69\n    },\n    __self: this\n  }, SETTING_ITEMS.map(settingItem => renderSettingItem(settingItem))));\n};\n\nexport default ViewerSetting;","map":{"version":3,"sources":["/Users/hyuntaeeom/Projects/personal/mini-viewer/components/viewer/ViewerSetting.tsx"],"names":["React","useCallback","useState","styled","ViewerSettingItem","ViewerSettingColor","subColor","SETTING_ITEM_TYPE","SETTING_ITEMS","Container","div","ToggleButton","SettingItems","ul","ViewerSetting","isShowSetting","setIsShowSetting","toggleShowNcs","renderSettingItem","settingItem","id","type","label","COLOR","map"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,WAAhB,EAA6BC,QAA7B,QAA6C,OAA7C;AAEA,OAAOC,MAAP,MAAmB,mBAAnB;AAEA,OAAOC,iBAAP,MAA8B,qBAA9B;AACA,OAAOC,kBAAP,MAA+B,sBAA/B;AAEA,SAASC,QAAT,QAAyB,cAAzB;AAEA,SAASC,iBAAT,EAA4BC,aAA5B,QAAiD,wBAAjD;AAEA,MAAMC,SAAS,GAAGN,MAAM,CAACO,GAAV;AAAA;AAAA;AAAA,0BAAf;AAIA,MAAMC,YAAY,GAAGR,MAAM,CAACO,GAAV;AAAA;AAAA;AAAA,uBAAlB;AAIA,MAAME,YAAY,GAAGT,MAAM,CAACU,EAAV;AAAA;AAAA;AAAA,+KASIP,QATJ,CAAlB;;AAaA,MAAMQ,aAAsC,GAAG,MAAM;AACnD,QAAM;AAAA,OAACC,aAAD;AAAA,OAAgBC;AAAhB,MAAoCd,QAAQ,CAAC,KAAD,CAAlD;AAEA,QAAMe,aAAa,GAAGhB,WAAW,CAAC,MAAM;AACtCe,IAAAA,gBAAgB,CAAC,CAACD,aAAF,CAAhB;AACD,GAFgC,EAE9B,CAACA,aAAD,CAF8B,CAAjC;AAIA,QAAMG,iBAAiB,GAAGjB,WAAW,CAAEkB,WAAD,IAAiB;AACrD,UAAM;AAAEC,MAAAA,EAAF;AAAMC,MAAAA,IAAN;AAAYC,MAAAA;AAAZ,QAAsBH,WAA5B;;AAEA,QAAIE,IAAI,KAAKd,iBAAiB,CAACgB,KAA/B,EAAsC;AACpC,aACE,MAAC,kBAAD;AACE,QAAA,GAAG,EAAEH,EADP;AAEE,QAAA,KAAK,EAAEE,KAFT;AAGE,QAAA,KAAK,EAAE,CAHT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF;AAOD;;AACD,WACE,MAAC,iBAAD;AACE,MAAA,GAAG,EAAEF,EADP;AAEE,MAAA,KAAK,EAAEE,KAFT;AAGE,MAAA,KAAK,EAAE,CAHT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF;AAOD,GAnBoC,EAmBlC,EAnBkC,CAArC;AAqBA,SACE,MAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,YAAD;AAAc,IAAA,OAAO,EAAEL,aAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADF,EAKIF,aAAa,IAEb,MAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEIP,aAAa,CAACgB,GAAd,CAAmBL,WAAD,IAAiBD,iBAAiB,CAACC,WAAD,CAApD,CAFJ,CAPJ,CADF;AAiBD,CA7CD;;AA+CA,eAAeL,aAAf","sourcesContent":["import React, { useCallback, useState } from 'react';\n\nimport styled from 'styled-components';\n\nimport ViewerSettingItem from './ViewerSettingItem';\nimport ViewerSettingColor from './ViewerSettingColor';\n\nimport { subColor } from '../../styles';\n\nimport { SETTING_ITEM_TYPE, SETTING_ITEMS } from '../../constants/viewer';\n\nconst Container = styled.div`\n  position: relative;\n`;\n\nconst ToggleButton = styled.div`\n  cursor: pointer;\n`;\n\nconst SettingItems = styled.ul`\n  position: absolute;\n  width: 10em;\n  left: 50%;\n  transform: translateX(-50%);\n  overflow: scroll;\n  list-style-type: none;\n  margin: 0;\n  padding: 0;\n  border: 1px solid ${subColor};\n  background-color: white;\n`;\n\nconst ViewerSetting: React.FunctionComponent = () => {\n  const [isShowSetting, setIsShowSetting] = useState(false);\n\n  const toggleShowNcs = useCallback(() => {\n    setIsShowSetting(!isShowSetting);\n  }, [isShowSetting]);\n\n  const renderSettingItem = useCallback((settingItem) => {\n    const { id, type, label } = settingItem;\n\n    if (type === SETTING_ITEM_TYPE.COLOR) {\n      return (\n        <ViewerSettingColor\n          key={id}\n          label={label}\n          value={0}\n        />\n      );\n    }\n    return (\n      <ViewerSettingItem\n        key={id}\n        label={label}\n        value={0}\n      />\n    );\n  }, []);\n\n  return (\n    <Container>\n      <ToggleButton onClick={toggleShowNcs}>\n        설정\n      </ToggleButton>\n      {\n        isShowSetting\n        && (\n        <SettingItems>\n          {\n            SETTING_ITEMS.map((settingItem) => renderSettingItem(settingItem))\n          }\n        </SettingItems>\n        )\n      }\n    </Container>\n  );\n};\n\nexport default ViewerSetting;\n"]},"metadata":{},"sourceType":"module"}