{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useCallback, useState } from 'react';\nimport Router from 'next/router';\nimport styled from 'styled-components';\nimport { subColor } from '../../styles';\nimport { DEFAULT_IMAGE } from '../../constants/books';\nimport { VIEWER_PATH_NAME } from '../../constants/viewer';\nconst Container = styled.ul.withConfig({\n  displayName: \"BookList__Container\",\n  componentId: \"sc-14s4gg1-0\"\n})([\"\"]);\nconst CoverImage = styled.li.withConfig({\n  displayName: \"BookList__CoverImage\",\n  componentId: \"sc-14s4gg1-1\"\n})([\"width:10em;border:1px solid \", \";display:inline-block;margin:1em;vertical-align:bottom;cursor:grab;padding:0;& img{width:100%;user-select:none;}\"], subColor);\n\nconst BookList = ({\n  books\n}) => {\n  const {\n    0: bookList,\n    1: setBookList\n  } = useState(books);\n  const {\n    0: draggedItem,\n    1: setDraggedItem\n  } = useState(null);\n  const openBook = useCallback(bookIndex => {\n    const selectedBook = bookList[bookIndex];\n    Router.push({\n      pathname: VIEWER_PATH_NAME,\n      query: {\n        bookPath: encodeURI(selectedBook.publicPath)\n      }\n    });\n  }, [bookList]);\n  const dragStart = useCallback((e, index) => {\n    setDraggedItem(bookList[index]);\n    e.dataTransfer.effectAllowed = 'move';\n    e.dataTransfer.setData('text/html', e.target.parentNode);\n    e.dataTransfer.setDragImage(e.target.parentNode, 20, 20);\n  }, [bookList]);\n  const dragOver = useCallback((e, index) => {\n    e.preventDefault();\n    const draggedOverItem = bookList[index];\n\n    if (draggedItem.publicPath === draggedOverItem.publicPath) {\n      return;\n    }\n\n    const newSortedBooks = bookList.filter(item => item.publicPath !== draggedItem.publicPath);\n    newSortedBooks.splice(index, 0, draggedItem);\n    setBookList(newSortedBooks);\n  }, [bookList, draggedItem]);\n  const dragEnd = useCallback(e => {\n    e.preventDefault();\n  }, []);\n  return __jsx(Container, null, bookList.map(({\n    book,\n    publicPath\n  }, index) => __jsx(CoverImage, {\n    onClick: () => openBook(index),\n    onDragOver: e => dragOver(e, index),\n    key: publicPath\n  }, __jsx(\"img\", {\n    src: book.cover ? `${publicPath}/${book.cover.href}` : DEFAULT_IMAGE,\n    draggable: true,\n    onDragStart: e => dragStart(e, index),\n    onDragEnd: dragEnd,\n    alt: \"Cover\"\n  }))));\n};\n\nexport default BookList;","map":null,"metadata":{},"sourceType":"module"}