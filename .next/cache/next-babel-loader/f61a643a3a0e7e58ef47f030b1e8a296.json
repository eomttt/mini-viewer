{"ast":null,"code":"var __jsx = React.createElement;\n\n/* eslint-disable react/no-danger */\nimport React, { useState, useRef, useCallback, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport styled from 'styled-components';\nimport { ViewerButton, ViewerArticle, ViewerSection, ViewerContents } from '../../styles/viewer';\nimport * as viewerActions from '../../reducers/viewer';\nimport { VIEWER_PAGE_GAP } from '../../constants/viewer';\nvar Article = styled(ViewerArticle).withConfig({\n  displayName: \"ViewerPage__Article\",\n  componentId: \"sc-14mn4t-0\"\n})([\"overflow:hidden;text-align:initial;\"]);\nvar RightButton = styled(ViewerButton).withConfig({\n  displayName: \"ViewerPage__RightButton\",\n  componentId: \"sc-14mn4t-1\"\n})([\"right:2em;\"]);\nvar LeftButton = styled(ViewerButton).withConfig({\n  displayName: \"ViewerPage__LeftButton\",\n  componentId: \"sc-14mn4t-2\"\n})([\"left:2em;\"]);\n\nvar ViewerPage = function ViewerPage(_ref) {\n  var viewerWidth = _ref.viewerWidth,\n      viewerHeight = _ref.viewerHeight,\n      pageColumnOffset = _ref.pageColumnOffset,\n      viewerSpine = _ref.viewerSpine,\n      isFirstPage = _ref.isFirstPage,\n      isLastPage = _ref.isLastPage;\n  var dispatch = useDispatch();\n\n  var _useState = useState(0),\n      nowViewerCount = _useState[0],\n      setNowViewerCount = _useState[1];\n\n  var _useSelector = useSelector(function (state) {\n    return state.viewerSetting;\n  }),\n      fontSize = _useSelector.fontSize,\n      widthRatio = _useSelector.widthRatio,\n      lineHeight = _useSelector.lineHeight;\n\n  var viewArticleRef = useRef(null);\n  useEffect(function () {\n    var viewArticleRefCurrent = viewArticleRef.current;\n    viewArticleRefCurrent.scrollLeft = pageColumnOffset * (viewerWidth + VIEWER_PAGE_GAP);\n    setNowViewerCount(pageColumnOffset);\n  }, [viewerSpine, pageColumnOffset, viewerWidth]);\n  var clickRight = useCallback(function () {\n    var viewArticleRefCurrent = viewArticleRef.current;\n    setNowViewerCount(nowViewerCount + 1);\n    viewArticleRefCurrent.scrollLeft += viewerWidth + VIEWER_PAGE_GAP;\n    dispatch(viewerActions.setCountUpViewerPageCount());\n  }, [dispatch, nowViewerCount, viewerWidth]);\n  var clickLeft = useCallback(function () {\n    var viewArticleRefCurrent = viewArticleRef.current;\n    setNowViewerCount(nowViewerCount - 1);\n    viewArticleRefCurrent.scrollLeft -= viewerWidth + VIEWER_PAGE_GAP;\n    dispatch(viewerActions.setCountDownViewerPageCount());\n  }, [dispatch, nowViewerCount, viewerWidth]);\n  return __jsx(React.Fragment, null, __jsx(Article, {\n    ref: viewArticleRef,\n    onClick: clickRight,\n    styleProps: {\n      widthRatio: widthRatio,\n      fontSize: fontSize,\n      lineHeight: lineHeight,\n      width: viewerWidth,\n      height: viewerHeight\n    }\n  }, __jsx(ViewerSection, {\n    styleProps: {\n      widthRatio: widthRatio,\n      fontSize: fontSize,\n      lineHeight: lineHeight,\n      width: viewerWidth,\n      height: viewerHeight\n    }\n  }, __jsx(ViewerContents, {\n    dangerouslySetInnerHTML: {\n      __html: viewerSpine\n    }\n  }))), !isFirstPage && __jsx(LeftButton, {\n    onClick: clickLeft\n  }, \"Left\"), !isLastPage && __jsx(RightButton, {\n    onClick: clickRight\n  }, \"Right\"));\n};\n\nexport default ViewerPage;","map":null,"metadata":{},"sourceType":"module"}