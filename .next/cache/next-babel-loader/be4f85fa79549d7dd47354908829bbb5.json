{"ast":null,"code":"var _jsxFileName = \"/Users/hyuntaeeom/Projects/personal/mini-viewer/components/viewer/ViewerCalculator.tsx\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useEffect, useCallback, useReducer } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport * as viewerActions from '../../reducers/viewer';\nimport ViewerCount from './ViewerCount';\nconst PRIVATE_ADD_COUNT_ACTION = 'AddCount';\nconst initialState = {\n  countItems: []\n};\n\nconst privateReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case PRIVATE_ADD_COUNT_ACTION:\n      {\n        const data = action.payload;\n        return _objectSpread({}, state, {\n          countItems: [...state.countItems, data]\n        });\n      }\n\n    default:\n      {\n        return _objectSpread({}, state);\n      }\n  }\n};\n\nconst ViewerCalculator = ({\n  viewerWidth,\n  viewerHeight,\n  viewers,\n  spines\n}) => {\n  const dispatch = useDispatch();\n  const {\n    0: reducerState,\n    1: dispatchReducer\n  } = useReducer(privateReducer, initialState);\n  const {\n    fontSize,\n    widthRatio,\n    lineHeight\n  } = useSelector(state => state.viewerSetting);\n  const setCountCallback = useCallback((count, index) => {\n    const spine = spines[index];\n    dispatchReducer({\n      type: PRIVATE_ADD_COUNT_ACTION,\n      payload: {\n        index,\n        count,\n        spineId: spine.id\n      }\n    });\n  }, [spines]);\n  useEffect(() => {\n    const {\n      countItems\n    } = reducerState;\n\n    if (countItems.length >= spines.length) {\n      dispatch(viewerActions.setViewerCountList(countItems));\n    }\n  }, [dispatch, reducerState, spines]);\n  return __jsx(React.Fragment, null, viewers.map((viewer, index) => __jsx(ViewerCount, {\n    key: viewer,\n    viewerWidth: viewerWidth,\n    viewerHeight: viewerHeight,\n    viewer: viewer,\n    viewerStyle: {\n      fontSize,\n      widthRatio,\n      lineHeight\n    },\n    setCountCallback: count => setCountCallback(count, index),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75\n    },\n    __self: this\n  })));\n};\n\nexport default ViewerCalculator;","map":{"version":3,"sources":["/Users/hyuntaeeom/Projects/personal/mini-viewer/components/viewer/ViewerCalculator.tsx"],"names":["React","useEffect","useCallback","useReducer","useDispatch","useSelector","viewerActions","ViewerCount","PRIVATE_ADD_COUNT_ACTION","initialState","countItems","privateReducer","state","action","type","data","payload","ViewerCalculator","viewerWidth","viewerHeight","viewers","spines","dispatch","reducerState","dispatchReducer","fontSize","widthRatio","lineHeight","viewerSetting","setCountCallback","count","index","spine","spineId","id","length","setViewerCountList","map","viewer"],"mappings":";;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,WAA3B,EAAwCC,UAAxC,QAA0D,OAA1D;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AAEA,OAAO,KAAKC,aAAZ,MAA+B,uBAA/B;AAEA,OAAOC,WAAP,MAAwB,eAAxB;AAYA,MAAMC,wBAAwB,GAAG,UAAjC;AACA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,UAAU,EAAE;AADO,CAArB;;AAIA,MAAMC,cAAc,GAAG,CAACC,KAAK,GAAGH,YAAT,EAAuBI,MAAvB,KAAkC;AACvD,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKN,wBAAL;AAA+B;AAC7B,cAAMO,IAAI,GAAGF,MAAM,CAACG,OAApB;AACA,iCACKJ,KADL;AAEEF,UAAAA,UAAU,EAAE,CAAC,GAAGE,KAAK,CAACF,UAAV,EAAsBK,IAAtB;AAFd;AAID;;AACD;AAAS;AACP,iCACKH,KADL;AAGD;AAZH;AAcD,CAfD;;AAiBA,MAAMK,gBAAgD,GAAG,CAAC;AACxDC,EAAAA,WADwD;AAC3CC,EAAAA,YAD2C;AAExDC,EAAAA,OAFwD;AAE/CC,EAAAA;AAF+C,CAAD,KAGnD;AACJ,QAAMC,QAAQ,GAAGlB,WAAW,EAA5B;AACA,QAAM;AAAA,OAACmB,YAAD;AAAA,OAAeC;AAAf,MAAkCrB,UAAU,CAACQ,cAAD,EAAiBF,YAAjB,CAAlD;AAEA,QAAM;AACJgB,IAAAA,QADI;AACMC,IAAAA,UADN;AACkBC,IAAAA;AADlB,MAEFtB,WAAW,CAAEO,KAAD,IAAyBA,KAAK,CAACgB,aAAhC,CAFf;AAIA,QAAMC,gBAAgB,GAAG3B,WAAW,CAAC,CAAC4B,KAAD,EAAgBC,KAAhB,KAAkC;AACrE,UAAMC,KAAK,GAAGX,MAAM,CAACU,KAAD,CAApB;AAEAP,IAAAA,eAAe,CAAC;AACdV,MAAAA,IAAI,EAAEN,wBADQ;AAEdQ,MAAAA,OAAO,EAAE;AACPe,QAAAA,KADO;AAEPD,QAAAA,KAFO;AAGPG,QAAAA,OAAO,EAAED,KAAK,CAACE;AAHR;AAFK,KAAD,CAAf;AAQD,GAXmC,EAWjC,CAACb,MAAD,CAXiC,CAApC;AAaApB,EAAAA,SAAS,CAAC,MAAM;AACd,UAAM;AAAES,MAAAA;AAAF,QAAiBa,YAAvB;;AACA,QAAIb,UAAU,CAACyB,MAAX,IAAqBd,MAAM,CAACc,MAAhC,EAAwC;AACtCb,MAAAA,QAAQ,CAAChB,aAAa,CAAC8B,kBAAd,CAAiC1B,UAAjC,CAAD,CAAR;AACD;AACF,GALQ,EAKN,CAACY,QAAD,EAAWC,YAAX,EAAyBF,MAAzB,CALM,CAAT;AAOA,SACE,4BAEID,OAAO,CAACiB,GAAR,CAAY,CAACC,MAAD,EAASP,KAAT,KACV,MAAC,WAAD;AACE,IAAA,GAAG,EAAEO,MADP;AAEE,IAAA,WAAW,EAAEpB,WAFf;AAGE,IAAA,YAAY,EAAEC,YAHhB;AAIE,IAAA,MAAM,EAAEmB,MAJV;AAKE,IAAA,WAAW,EAAE;AACXb,MAAAA,QADW;AAEXC,MAAAA,UAFW;AAGXC,MAAAA;AAHW,KALf;AAUE,IAAA,gBAAgB,EAAGG,KAAD,IAAWD,gBAAgB,CAACC,KAAD,EAAQC,KAAR,CAV/C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CAFJ,CADF;AAqBD,CApDD;;AAsDA,eAAed,gBAAf","sourcesContent":["import React, { useEffect, useCallback, useReducer } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport * as viewerActions from '../../reducers/viewer';\n\nimport ViewerCount from './ViewerCount';\n\nimport { ReducerState } from '../../interfaces';\nimport { EpubSpineItem } from '../../interfaces/books';\n\ninterface Props {\n  viewerWidth: number;\n  viewerHeight: number;\n  viewers: string[];\n  spines: EpubSpineItem[];\n}\n\nconst PRIVATE_ADD_COUNT_ACTION = 'AddCount';\nconst initialState = {\n  countItems: [],\n};\n\nconst privateReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case PRIVATE_ADD_COUNT_ACTION: {\n      const data = action.payload;\n      return {\n        ...state,\n        countItems: [...state.countItems, data],\n      };\n    }\n    default: {\n      return {\n        ...state,\n      };\n    }\n  }\n};\n\nconst ViewerCalculator: React.FunctionComponent<Props> = ({\n  viewerWidth, viewerHeight,\n  viewers, spines,\n}) => {\n  const dispatch = useDispatch();\n  const [reducerState, dispatchReducer] = useReducer(privateReducer, initialState);\n\n  const {\n    fontSize, widthRatio, lineHeight,\n  } = useSelector((state: ReducerState) => state.viewerSetting);\n\n  const setCountCallback = useCallback((count: number, index: number) => {\n    const spine = spines[index];\n\n    dispatchReducer({\n      type: PRIVATE_ADD_COUNT_ACTION,\n      payload: {\n        index,\n        count,\n        spineId: spine.id,\n      },\n    });\n  }, [spines]);\n\n  useEffect(() => {\n    const { countItems } = reducerState;\n    if (countItems.length >= spines.length) {\n      dispatch(viewerActions.setViewerCountList(countItems));\n    }\n  }, [dispatch, reducerState, spines]);\n\n  return (\n    <>\n      {\n        viewers.map((viewer, index) => (\n          <ViewerCount\n            key={viewer}\n            viewerWidth={viewerWidth}\n            viewerHeight={viewerHeight}\n            viewer={viewer}\n            viewerStyle={{\n              fontSize,\n              widthRatio,\n              lineHeight,\n            }}\n            setCountCallback={(count) => setCountCallback(count, index)}\n          />\n        ))\n      }\n    </>\n\n  );\n};\n\nexport default ViewerCalculator;\n"]},"metadata":{},"sourceType":"module"}