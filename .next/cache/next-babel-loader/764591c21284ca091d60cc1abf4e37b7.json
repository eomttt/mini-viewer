{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nexport var initialState = {\n  viewerCountList: [],\n  selectedViewerSpineId: ''\n}; // Action types\n\nexport var SET_VIEWER_COUNT = 'viewer/SET_VIEWER_COUNT';\nexport var SET_VIEWER_SPINE_ID = 'viewer/SET_VIEWER_SPINE_ID'; // Action creators\n\nexport var setViewerCount = function setViewerCount(_ref) {\n  var index = _ref.index,\n      count = _ref.count;\n  return {\n    type: SET_VIEWER_COUNT,\n    payload: {\n      index: index,\n      count: count\n    }\n  };\n};\nexport var setViewerSpineId = function setViewerSpineId(spineId) {\n  return {\n    type: SET_VIEWER_SPINE_ID,\n    payload: {\n      spineId: spineId\n    }\n  };\n};\nexport default (function () {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n  var type = action.type,\n      payload = action.payload;\n\n  switch (type) {\n    case SET_VIEWER_COUNT:\n      {\n        var index = payload.index,\n            count = payload.count;\n        return _objectSpread({}, state, {\n          viewerCountList: [].concat(_toConsumableArray(state.viewerCountList), [{\n            index: index,\n            count: count\n          }])\n        });\n      }\n\n    default:\n      {\n        return state;\n      }\n  }\n});","map":{"version":3,"sources":["/Users/hyuntaeeom/Projects/personal/mini-viewer/reducers/viewer.ts"],"names":["initialState","viewerCountList","selectedViewerSpineId","SET_VIEWER_COUNT","SET_VIEWER_SPINE_ID","setViewerCount","index","count","type","payload","setViewerSpineId","spineId","state","action"],"mappings":";;;;;;;AAGA,OAAO,IAAMA,YAAyB,GAAG;AACvCC,EAAAA,eAAe,EAAE,EADsB;AAEvCC,EAAAA,qBAAqB,EAAE;AAFgB,CAAlC,C,CAKP;;AACA,OAAO,IAAMC,gBAAgB,GAAG,yBAAzB;AACP,OAAO,IAAMC,mBAAmB,GAAG,4BAA5B,C,CAEP;;AACA,OAAO,IAAMC,cAAc,GAAG,SAAjBA,cAAiB;AAAA,MAAGC,KAAH,QAAGA,KAAH;AAAA,MAAUC,KAAV,QAAUA,KAAV;AAAA,SAAuD;AACnFC,IAAAA,IAAI,EAAEL,gBAD6E;AAEnFM,IAAAA,OAAO,EAAE;AACPH,MAAAA,KAAK,EAALA,KADO;AAEPC,MAAAA,KAAK,EAALA;AAFO;AAF0E,GAAvD;AAAA,CAAvB;AAQP,OAAO,IAAMG,gBAAgB,GAAG,SAAnBA,gBAAmB,CAACC,OAAD;AAAA,SAAsB;AACpDH,IAAAA,IAAI,EAAEJ,mBAD8C;AAEpDK,IAAAA,OAAO,EAAE;AACPE,MAAAA,OAAO,EAAPA;AADO;AAF2C,GAAtB;AAAA,CAAzB;AAOP,gBAAe,YAA8D;AAAA,MAA7DC,KAA6D,uEAArDZ,YAAqD;AAAA,MAAvCa,MAAuC;AAAA,MACnEL,IADmE,GACjDK,MADiD,CACnEL,IADmE;AAAA,MAC7DC,OAD6D,GACjDI,MADiD,CAC7DJ,OAD6D;;AAE3E,UAAQD,IAAR;AACE,SAAKL,gBAAL;AAAuB;AAAA,YACbG,KADa,GACIG,OADJ,CACbH,KADa;AAAA,YACNC,KADM,GACIE,OADJ,CACNF,KADM;AAErB,iCACKK,KADL;AAEEX,UAAAA,eAAe,+BAAMW,KAAK,CAACX,eAAZ,IAA6B;AAAEK,YAAAA,KAAK,EAALA,KAAF;AAASC,YAAAA,KAAK,EAALA;AAAT,WAA7B;AAFjB;AAID;;AACD;AAAS;AACP,eAAOK,KAAP;AACD;AAVH;AAYD,CAdD","sourcesContent":["import { ReducerAction } from '../interfaces';\nimport { ViewerState } from '../interfaces/viewer';\n\nexport const initialState: ViewerState = {\n  viewerCountList: [],\n  selectedViewerSpineId: '',\n};\n\n// Action types\nexport const SET_VIEWER_COUNT = 'viewer/SET_VIEWER_COUNT';\nexport const SET_VIEWER_SPINE_ID = 'viewer/SET_VIEWER_SPINE_ID';\n\n// Action creators\nexport const setViewerCount = ({ index, count }: {index: number; count: number}) => ({\n  type: SET_VIEWER_COUNT,\n  payload: {\n    index,\n    count,\n  },\n});\n\nexport const setViewerSpineId = (spineId: string) => ({\n  type: SET_VIEWER_SPINE_ID,\n  payload: {\n    spineId,\n  },\n});\n\nexport default (state = initialState, action: ReducerAction): ViewerState => {\n  const { type, payload } = action;\n  switch (type) {\n    case SET_VIEWER_COUNT: {\n      const { index, count } = payload;\n      return {\n        ...state,\n        viewerCountList: [...state.viewerCountList, { index, count }],\n      };\n    }\n    default: {\n      return state;\n    }\n  }\n};\n"]},"metadata":{},"sourceType":"module"}