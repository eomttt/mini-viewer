{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { defaultColor } from '../styles';\nimport { FONT_SIZE_RANGE, WIDTH_RATIO_RANGE, LINE_HEIGHT_RANGE } from '../constants/viewer';\nexport const initialState = {\n  fontSize: FONT_SIZE_RANGE.MIN,\n  widthRatio: WIDTH_RATIO_RANGE.MAX,\n  lineHeight: LINE_HEIGHT_RANGE.MIN,\n  backgroundColor: defaultColor\n}; // Action types\n\nexport const SET_FONT_SIZE = 'viewerSetting/SET_FONT_SIZE';\nexport const SET_WIDTH_RATIO = 'viewerSetting/SET_WIDTH_RATIO';\nexport const SET_LINE_HEIGHT = 'viewerSetting/SET_LINE_HEIGHT';\nexport const SET_BACKGROUND_COLOR = 'viewerSetting/SET_VIEWER_SETTING_BACKGROUND_COLOR'; // Action creators\n\nexport const setViewerSettingFontSize = fontSize => ({\n  type: SET_FONT_SIZE,\n  payload: {\n    fontSize\n  }\n});\nexport const setViewerSettingWidthRatio = widthRatio => ({\n  type: SET_WIDTH_RATIO,\n  payload: {\n    widthRatio\n  }\n});\nexport const setViewerSettingLineHeight = lineHeight => ({\n  type: SET_LINE_HEIGHT,\n  payload: {\n    lineHeight\n  }\n});\nexport const setViewerSettingBackgroundColor = color => ({\n  type: SET_BACKGROUND_COLOR,\n  payload: {\n    backgroundColor: color\n  }\n});\nexport default ((state = initialState, action) => {\n  const {\n    type,\n    payload\n  } = action;\n\n  switch (type) {\n    case SET_FONT_SIZE:\n      {\n        const {\n          fontSize\n        } = payload;\n        return _objectSpread({}, state, {\n          fontSize\n        });\n      }\n\n    case SET_WIDTH_RATIO:\n      {\n        const {\n          widthRatio\n        } = payload;\n        return _objectSpread({}, state, {\n          widthRatio\n        });\n      }\n\n    case SET_LINE_HEIGHT:\n      {\n        const {\n          lineHeight\n        } = payload;\n        return _objectSpread({}, state, {\n          lineHeight\n        });\n      }\n\n    case SET_BACKGROUND_COLOR:\n      {\n        const {\n          backgroundColor\n        } = payload;\n        return _objectSpread({}, state, {\n          backgroundColor\n        });\n      }\n\n    default:\n      {\n        return _objectSpread({}, state);\n      }\n  }\n});","map":null,"metadata":{},"sourceType":"module"}