{"ast":null,"code":"var _jsxFileName = \"/Users/hyuntaeeom/Projects/personal/mini-viewer/components/viewer/ViewerCount.tsx\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useRef, useEffect, useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport styled from 'styled-components';\nimport { ViewerArticle, ViewerSection, ViewerContents } from '../../styles/viewer';\nimport { VIEWER_PAGE_GAP } from '../../constants/viewer';\nconst HiddenArticle = styled(ViewerArticle).withConfig({\n  displayName: \"ViewerCount__HiddenArticle\",\n  componentId: \"sc-1llu6pn-0\"\n})([\"overflow:scroll;\"]);\nconst HiddenSection = styled(ViewerSection).withConfig({\n  displayName: \"ViewerCount__HiddenSection\",\n  componentId: \"sc-1llu6pn-1\"\n})([\"visibility:hidden;\"]);\n\nconst ViewerCount = ({\n  viewerWidth,\n  viewerHeight,\n  viewerSpineIndex,\n  viewerSpine,\n  spine,\n  viewerStyle\n}) => {\n  const {\n    widthRatio\n  } = viewerStyle;\n  const dispatch = useDispatch();\n  const {\n    0: newViewerWidth,\n    1: setNewViewerWidth\n  } = useState(viewerWidth);\n  const hiddenViewContainerRef = useRef(null);\n  const hiddenViewSectionRef = useRef(null);\n  useEffect(() => {\n    if (widthRatio) {\n      setNewViewerWidth(Math.floor(Number(viewerWidth) * (Number(widthRatio) / 100)));\n    }\n  }, [viewerWidth, widthRatio]);\n  useEffect(() => {\n    console.log(\"OOOO\", newViewerWidth);\n\n    if (newViewerWidth) {\n      const {\n        current: hiddenViewContainerCurrent\n      } = hiddenViewContainerRef;\n      const count = hiddenViewContainerCurrent.scrollWidth / (newViewerWidth + VIEWER_PAGE_GAP);\n      console.log(\"AAAAA\", hiddenViewContainerCurrent.scrollWidth);\n      console.log(\"BBBB\", newViewerWidth + VIEWER_PAGE_GAP); // dispatch(viewerActions.setViewerColumnCount({\n      //   count,\n      //   index: viewerSpineIndex,\n      //   spineId: spine.id,\n      // }));\n    }\n  }, [dispatch, newViewerWidth, spine.id, viewerSpineIndex]);\n  return __jsx(HiddenArticle, {\n    styleProps: _objectSpread({}, viewerStyle, {\n      width: newViewerWidth,\n      height: viewerHeight\n    }),\n    ref: hiddenViewContainerRef,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72\n    },\n    __self: this\n  }, __jsx(HiddenSection, {\n    styleProps: {\n      width: newViewerWidth\n    },\n    ref: hiddenViewSectionRef,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80\n    },\n    __self: this\n  }, __jsx(ViewerContents, {\n    dangerouslySetInnerHTML: {\n      __html: viewerSpine\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86\n    },\n    __self: this\n  })));\n};\n\nexport default ViewerCount;","map":{"version":3,"sources":["/Users/hyuntaeeom/Projects/personal/mini-viewer/components/viewer/ViewerCount.tsx"],"names":["React","useRef","useEffect","useState","useDispatch","styled","ViewerArticle","ViewerSection","ViewerContents","VIEWER_PAGE_GAP","HiddenArticle","HiddenSection","ViewerCount","viewerWidth","viewerHeight","viewerSpineIndex","viewerSpine","spine","viewerStyle","widthRatio","dispatch","newViewerWidth","setNewViewerWidth","hiddenViewContainerRef","hiddenViewSectionRef","Math","floor","Number","console","log","current","hiddenViewContainerCurrent","count","scrollWidth","id","width","height","__html"],"mappings":";;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,MAAhB,EAAwBC,SAAxB,EAAmCC,QAAnC,QAAmD,OAAnD;AACA,SAASC,WAAT,QAA4B,aAA5B;AAEA,OAAOC,MAAP,MAAmB,mBAAnB;AAEA,SACEC,aADF,EAEEC,aAFF,EAGEC,cAHF,QAIO,qBAJP;AAQA,SAASC,eAAT,QAAgC,wBAAhC;AAKA,MAAMC,aAAa,GAAGL,MAAM,CAACC,aAAD,CAAT;AAAA;AAAA;AAAA,wBAAnB;AAIA,MAAMK,aAAa,GAAGN,MAAM,CAACE,aAAD,CAAT;AAAA;AAAA;AAAA,0BAAnB;;AAaA,MAAMK,WAA2C,GAAG,CAAC;AACnDC,EAAAA,WADmD;AACtCC,EAAAA,YADsC;AAEnDC,EAAAA,gBAFmD;AAEjCC,EAAAA,WAFiC;AAEpBC,EAAAA,KAFoB;AAGnDC,EAAAA;AAHmD,CAAD,KAI9C;AACJ,QAAM;AAAEC,IAAAA;AAAF,MAAiBD,WAAvB;AAEA,QAAME,QAAQ,GAAGhB,WAAW,EAA5B;AAEA,QAAM;AAAA,OAACiB,cAAD;AAAA,OAAiBC;AAAjB,MAAsCnB,QAAQ,CAACU,WAAD,CAApD;AAEA,QAAMU,sBAAsB,GAAGtB,MAAM,CAAC,IAAD,CAArC;AACA,QAAMuB,oBAAoB,GAAGvB,MAAM,CAAC,IAAD,CAAnC;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIiB,UAAJ,EAAgB;AACdG,MAAAA,iBAAiB,CAACG,IAAI,CAACC,KAAL,CAAWC,MAAM,CAACd,WAAD,CAAN,IAAuBc,MAAM,CAACR,UAAD,CAAN,GAAqB,GAA5C,CAAX,CAAD,CAAjB;AACD;AACF,GAJQ,EAIN,CAACN,WAAD,EAAcM,UAAd,CAJM,CAAT;AAMAjB,EAAAA,SAAS,CAAC,MAAM;AACd0B,IAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ,EAAoBR,cAApB;;AACA,QAAIA,cAAJ,EAAoB;AAClB,YAAM;AAAES,QAAAA,OAAO,EAAEC;AAAX,UAA0CR,sBAAhD;AACA,YAAMS,KAAK,GAAGD,0BAA0B,CAACE,WAA3B,IAA0CZ,cAAc,GAAGZ,eAA3D,CAAd;AACAmB,MAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBE,0BAA0B,CAACE,WAAhD;AACAL,MAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ,EAAoBR,cAAc,GAAGZ,eAArC,EAJkB,CAKlB;AACA;AACA;AACA;AACA;AACD;AACF,GAbQ,EAaN,CAACW,QAAD,EAAWC,cAAX,EAA2BJ,KAAK,CAACiB,EAAjC,EAAqCnB,gBAArC,CAbM,CAAT;AAeA,SACE,MAAC,aAAD;AACE,IAAA,UAAU,oBACLG,WADK;AAERiB,MAAAA,KAAK,EAAEd,cAFC;AAGRe,MAAAA,MAAM,EAAEtB;AAHA,MADZ;AAME,IAAA,GAAG,EAAES,sBANP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAQE,MAAC,aAAD;AACE,IAAA,UAAU,EAAE;AACVY,MAAAA,KAAK,EAAEd;AADG,KADd;AAIE,IAAA,GAAG,EAAEG,oBAJP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAME,MAAC,cAAD;AAAgB,IAAA,uBAAuB,EAAE;AAAEa,MAAAA,MAAM,EAAErB;AAAV,KAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IANF,CARF,CADF;AAmBD,CAtDD;;AAwDA,eAAeJ,WAAf","sourcesContent":["import React, { useRef, useEffect, useState } from 'react';\nimport { useDispatch } from 'react-redux';\n\nimport styled from 'styled-components';\n\nimport {\n  ViewerArticle,\n  ViewerSection,\n  ViewerContents,\n} from '../../styles/viewer';\n\nimport * as viewerActions from '../../reducers/viewer';\n\nimport { VIEWER_PAGE_GAP } from '../../constants/viewer';\n\nimport { EpubSpineItem } from '../../interfaces/books';\nimport { ViewerStyle } from '../../interfaces/viewer';\n\nconst HiddenArticle = styled(ViewerArticle)`\n  overflow: scroll;\n`;\n\nconst HiddenSection = styled(ViewerSection)`\n  visibility: hidden;\n`;\n\ninterface Props {\n  viewerWidth: number;\n  viewerHeight: number;\n  viewerSpineIndex: number;\n  viewerSpine: string;\n  spine: EpubSpineItem;\n  viewerStyle: ViewerStyle;\n}\n\nconst ViewerCount: React.FunctionComponent<Props> = ({\n  viewerWidth, viewerHeight,\n  viewerSpineIndex, viewerSpine, spine,\n  viewerStyle,\n}) => {\n  const { widthRatio } = viewerStyle;\n\n  const dispatch = useDispatch();\n\n  const [newViewerWidth, setNewViewerWidth] = useState(viewerWidth);\n\n  const hiddenViewContainerRef = useRef(null);\n  const hiddenViewSectionRef = useRef(null);\n\n  useEffect(() => {\n    if (widthRatio) {\n      setNewViewerWidth(Math.floor(Number(viewerWidth) * (Number(widthRatio) / 100)));\n    }\n  }, [viewerWidth, widthRatio]);\n\n  useEffect(() => {\n    console.log(\"OOOO\", newViewerWidth);\n    if (newViewerWidth) {\n      const { current: hiddenViewContainerCurrent } = hiddenViewContainerRef;\n      const count = hiddenViewContainerCurrent.scrollWidth / (newViewerWidth + VIEWER_PAGE_GAP);\n      console.log(\"AAAAA\", hiddenViewContainerCurrent.scrollWidth);\n      console.log(\"BBBB\", newViewerWidth + VIEWER_PAGE_GAP);\n      // dispatch(viewerActions.setViewerColumnCount({\n      //   count,\n      //   index: viewerSpineIndex,\n      //   spineId: spine.id,\n      // }));\n    }\n  }, [dispatch, newViewerWidth, spine.id, viewerSpineIndex]);\n\n  return (\n    <HiddenArticle\n      styleProps={{\n        ...viewerStyle,\n        width: newViewerWidth,\n        height: viewerHeight,\n      }}\n      ref={hiddenViewContainerRef}\n    >\n      <HiddenSection\n        styleProps={{\n          width: newViewerWidth,\n        }}\n        ref={hiddenViewSectionRef}\n      >\n        <ViewerContents dangerouslySetInnerHTML={{ __html: viewerSpine }} />\n      </HiddenSection>\n    </HiddenArticle>\n  );\n};\n\nexport default ViewerCount;\n"]},"metadata":{},"sourceType":"module"}