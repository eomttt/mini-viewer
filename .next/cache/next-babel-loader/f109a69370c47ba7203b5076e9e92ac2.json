{"ast":null,"code":"var _jsxFileName = \"/Users/hyuntaeeom/Projects/personal/mini-viewer/pages/viewer.tsx\";\nvar __jsx = React.createElement;\nimport React, { useEffect, useState } from 'react';\nimport Head from 'next/head';\nimport ViewerPageComponent from '../components/viewer/ViewerPage';\n\nconst Viewer = bookInfo => {\n  const {\n    0: flag,\n    1: setFlag\n  } = useState(false);\n  const {\n    0: styleTags,\n    1: setStyleTags\n  } = useState([]);\n  const {\n    viewerSpines,\n    book,\n    basePath\n  } = bookInfo;\n  useEffect(() => {\n    setTimeout(() => {\n      setFlag(true);\n    }, 3000);\n  }, []);\n  useEffect(() => {\n    const {\n      styles\n    } = book;\n    setStyleTags(styles.map(style => __jsx(\"link\", {\n      rel: \"stylesheet\",\n      href: `${basePath}/${style.href}`,\n      key: style.href,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34\n      },\n      __self: this\n    })));\n  }, [basePath, book]);\n  return __jsx(React.Fragment, null, __jsx(Head, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39\n    },\n    __self: this\n  }, styleTags.map(styleTag => styleTag)), flag && __jsx(ViewerPageComponent, {\n    spines: book.spines,\n    viewerSpines: viewerSpines,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44\n    },\n    __self: this\n  }));\n}; // eslint-disable-next-line @typescript-eslint/unbound-method\n\n\nViewer.getInitialProps = async context => {\n  const {\n    req\n  } = context;\n\n  if (req) {\n    const {\n      EpubParser\n    } = require('@ridi/epub-parser');\n\n    try {\n      const parser = new EpubParser('public/jikji.epub');\n      const book = await parser.parse({\n        validatePackage: true,\n        parseStyle: false,\n        unzipPath: 'public/epub/jikji'\n      });\n      const viewerSpines = await parser.readItems(book.spines, {\n        force: true,\n        extractBody: true,\n        serializedAnchor: true,\n        ignoreScript: true,\n        basePath: 'epub/jikji'\n      });\n      return {\n        book,\n        viewerSpines,\n        basePath: 'epub/jikji'\n      };\n    } catch (error) {\n      console.log('Error', error);\n    }\n  }\n\n  return {};\n};\n\nexport default Viewer;","map":{"version":3,"sources":["/Users/hyuntaeeom/Projects/personal/mini-viewer/pages/viewer.tsx"],"names":["React","useEffect","useState","Head","ViewerPageComponent","Viewer","bookInfo","flag","setFlag","styleTags","setStyleTags","viewerSpines","book","basePath","setTimeout","styles","map","style","href","styleTag","spines","getInitialProps","context","req","EpubParser","require","parser","parse","validatePackage","parseStyle","unzipPath","readItems","force","extractBody","serializedAnchor","ignoreScript","error","console","log"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AAEA,OAAOC,IAAP,MAAiB,WAAjB;AAEA,OAAOC,mBAAP,MAAgC,iCAAhC;;AAUA,MAAMC,MAAuB,GAAIC,QAAD,IAAc;AAC5C,QAAM;AAAA,OAACC,IAAD;AAAA,OAAOC;AAAP,MAAkBN,QAAQ,CAAC,KAAD,CAAhC;AACA,QAAM;AAAA,OAACO,SAAD;AAAA,OAAYC;AAAZ,MAA4BR,QAAQ,CAAC,EAAD,CAA1C;AAEA,QAAM;AACJS,IAAAA,YADI;AACUC,IAAAA,IADV;AACgBC,IAAAA;AADhB,MAEFP,QAFJ;AAIAL,EAAAA,SAAS,CAAC,MAAM;AACda,IAAAA,UAAU,CAAC,MAAM;AACfN,MAAAA,OAAO,CAAC,IAAD,CAAP;AACD,KAFS,EAEP,IAFO,CAAV;AAGD,GAJQ,EAIN,EAJM,CAAT;AAMAP,EAAAA,SAAS,CAAC,MAAM;AACd,UAAM;AACJc,MAAAA;AADI,QAEFH,IAFJ;AAIAF,IAAAA,YAAY,CAACK,MAAM,CAACC,GAAP,CAAYC,KAAD,IAAW;AAAM,MAAA,GAAG,EAAC,YAAV;AAAuB,MAAA,IAAI,EAAG,GAAEJ,QAAS,IAAGI,KAAK,CAACC,IAAK,EAAvD;AAA0D,MAAA,GAAG,EAAED,KAAK,CAACC,IAArE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAtB,CAAD,CAAZ;AACD,GANQ,EAMN,CAACL,QAAD,EAAWD,IAAX,CANM,CAAT;AAQA,SACE,4BACE,MAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGH,SAAS,CAACO,GAAV,CAAeG,QAAD,IAAcA,QAA5B,CADH,CADF,EAKIZ,IAAI,IACJ,MAAC,mBAAD;AACA,IAAA,MAAM,EAAEK,IAAI,CAACQ,MADb;AAEA,IAAA,YAAY,EAAET,YAFd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IANJ,CADF;AAeD,CArCD,C,CAuCA;;;AACAN,MAAM,CAACgB,eAAP,GAAyB,MAAOC,OAAP,IAAuD;AAC9E,QAAM;AAAEC,IAAAA;AAAF,MAAUD,OAAhB;;AACA,MAAIC,GAAJ,EAAS;AACP,UAAM;AAAEC,MAAAA;AAAF,QAAiBC,OAAO,CAAC,mBAAD,CAA9B;;AACA,QAAI;AACF,YAAMC,MAAM,GAAG,IAAIF,UAAJ,CAAe,mBAAf,CAAf;AACA,YAAMZ,IAAc,GAAG,MAAMc,MAAM,CAACC,KAAP,CAAa;AACxCC,QAAAA,eAAe,EAAE,IADuB;AAExCC,QAAAA,UAAU,EAAE,KAF4B;AAGxCC,QAAAA,SAAS,EAAE;AAH6B,OAAb,CAA7B;AAKA,YAAMnB,YAAY,GAAG,MAAMe,MAAM,CAACK,SAAP,CAAiBnB,IAAI,CAACQ,MAAtB,EAA8B;AACvDY,QAAAA,KAAK,EAAE,IADgD;AAEvDC,QAAAA,WAAW,EAAE,IAF0C;AAGvDC,QAAAA,gBAAgB,EAAE,IAHqC;AAIvDC,QAAAA,YAAY,EAAE,IAJyC;AAKvDtB,QAAAA,QAAQ,EAAE;AAL6C,OAA9B,CAA3B;AAQA,aAAO;AACLD,QAAAA,IADK;AAELD,QAAAA,YAFK;AAGLE,QAAAA,QAAQ,EAAE;AAHL,OAAP;AAKD,KApBD,CAoBE,OAAOuB,KAAP,EAAc;AACdC,MAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBF,KAArB;AACD;AACF;;AAGD,SAAO,EAAP;AACD,CA/BD;;AAiCA,eAAe/B,MAAf","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { NextPageContext, NextPage } from 'next';\nimport Head from 'next/head';\n\nimport ViewerPageComponent from '../components/viewer/ViewerPage';\n\nimport { EpubBook } from '../interfaces/books';\n\ninterface Props {\n  book: EpubBook;\n  viewerSpines: string[];\n  basePath: string;\n}\n\nconst Viewer: NextPage<Props> = (bookInfo) => {\n  const [flag, setFlag] = useState(false);\n  const [styleTags, setStyleTags] = useState([]);\n\n  const {\n    viewerSpines, book, basePath,\n  } = bookInfo;\n\n  useEffect(() => {\n    setTimeout(() => {\n      setFlag(true); \n    }, 3000);\n  }, [])\n\n  useEffect(() => {\n    const {\n      styles,\n    } = book;\n\n    setStyleTags(styles.map((style) => <link rel=\"stylesheet\" href={`${basePath}/${style.href}`} key={style.href} />));\n  }, [basePath, book]);\n\n  return (\n    <>\n      <Head>\n        {styleTags.map((styleTag) => styleTag)}\n      </Head>\n      {\n        flag &&\n        <ViewerPageComponent\n        spines={book.spines}\n        viewerSpines={viewerSpines}\n      />\n      }\n\n    </>\n  );\n};\n\n// eslint-disable-next-line @typescript-eslint/unbound-method\nViewer.getInitialProps = async (context: NextPageContext<any>): Promise<any> => {\n  const { req } = context;\n  if (req) {\n    const { EpubParser } = require('@ridi/epub-parser');\n    try {\n      const parser = new EpubParser('public/jikji.epub');\n      const book: EpubBook = await parser.parse({\n        validatePackage: true,\n        parseStyle: false,\n        unzipPath: 'public/epub/jikji',\n      });\n      const viewerSpines = await parser.readItems(book.spines, {\n        force: true,\n        extractBody: true,\n        serializedAnchor: true,\n        ignoreScript: true,\n        basePath: 'epub/jikji',\n      });\n\n      return {\n        book,\n        viewerSpines,\n        basePath: 'epub/jikji',\n      };\n    } catch (error) {\n      console.log('Error', error);\n    }\n  }\n\n\n  return {};\n};\n\nexport default Viewer;\n"]},"metadata":{},"sourceType":"module"}