{"ast":null,"code":"var _jsxFileName = \"/Users/hyuntaeeom/Projects/personal/mini-viewer/components/viewer/ViewerPage.tsx\";\nvar __jsx = React.createElement;\nimport React, { useCallback, useState, useEffect, useMemo } from 'react';\nimport { useSelector } from 'react-redux';\nimport Viewer from './Viewer';\nimport { ViewerContainer } from '../../styles/viewer';\nimport { VIEWER_WIDTH_RATIO, VIEWER_HEIGHT_RATIO } from '../../constants/viewer';\n\nconst ViewerPage = ({\n  spines,\n  viewerSpines\n}) => {\n  const {\n    0: viewerWidth,\n    1: setViewerWidth\n  } = useState(0);\n  const {\n    0: viewerHeight,\n    1: setViewerHeight\n  } = useState(0);\n  const {\n    0: nowSpineIndex,\n    1: setNowSpineIndex\n  } = useState(0);\n  const {\n    viewerCountList\n  } = useSelector(state => state.viewer);\n  const isAnalizedSpine = useMemo(() => viewerCountList.length === viewerSpines.length, [viewerCountList, viewerSpines]);\n  useEffect(() => {\n    setViewerWidth(Math.floor(window.innerWidth * (VIEWER_WIDTH_RATIO / 100)));\n    setViewerHeight(Math.floor(window.innerHeight * (VIEWER_HEIGHT_RATIO / 100)));\n  }, []);\n  const setNextSpine = useCallback(() => {\n    console.log('Set next spine', nowSpineIndex);\n    setNowSpineIndex(nowSpineIndex + 1);\n  }, [nowSpineIndex]);\n  const setPrevSpine = useCallback(() => {\n    console.log('Set prev spine', nowSpineIndex);\n    setNowSpineIndex(nowSpineIndex - 1);\n  }, [nowSpineIndex]);\n  return __jsx(ViewerContainer, {\n    styleProps: {\n      height: viewerHeight\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47\n    },\n    __self: this\n  }, __jsx(Viewer, {\n    viewerWidth: viewerWidth,\n    viewerHeight: viewerHeight,\n    wholeColumnCount: 74,\n    spine: spines[3],\n    viewerSpine: viewerSpines[3],\n    setNextSpine: setNextSpine,\n    setPrevSpine: setPrevSpine,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79\n    },\n    __self: this\n  }), __jsx(\"section\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88\n    },\n    __self: this\n  }));\n};\n\nexport default ViewerPage;","map":{"version":3,"sources":["/Users/hyuntaeeom/Projects/personal/mini-viewer/components/viewer/ViewerPage.tsx"],"names":["React","useCallback","useState","useEffect","useMemo","useSelector","Viewer","ViewerContainer","VIEWER_WIDTH_RATIO","VIEWER_HEIGHT_RATIO","ViewerPage","spines","viewerSpines","viewerWidth","setViewerWidth","viewerHeight","setViewerHeight","nowSpineIndex","setNowSpineIndex","viewerCountList","state","viewer","isAnalizedSpine","length","Math","floor","window","innerWidth","innerHeight","setNextSpine","console","log","setPrevSpine","height"],"mappings":";;AAAA,OAAOA,KAAP,IACEC,WADF,EACeC,QADf,EACyBC,SADzB,EACoCC,OADpC,QAEO,OAFP;AAGA,SAASC,WAAT,QAA4B,aAA5B;AAEA,OAAOC,MAAP,MAAmB,UAAnB;AAGA,SAASC,eAAT,QAAgC,qBAAhC;AAKA,SAASC,kBAAT,EAA6BC,mBAA7B,QAAwD,wBAAxD;;AAQA,MAAMC,UAA0C,GAAG,CAAC;AAAEC,EAAAA,MAAF;AAAUC,EAAAA;AAAV,CAAD,KAA8B;AAC/E,QAAM;AAAA,OAACC,WAAD;AAAA,OAAcC;AAAd,MAAgCZ,QAAQ,CAAC,CAAD,CAA9C;AACA,QAAM;AAAA,OAACa,YAAD;AAAA,OAAeC;AAAf,MAAkCd,QAAQ,CAAC,CAAD,CAAhD;AACA,QAAM;AAAA,OAACe,aAAD;AAAA,OAAgBC;AAAhB,MAAoChB,QAAQ,CAAC,CAAD,CAAlD;AAEA,QAAM;AAAEiB,IAAAA;AAAF,MAAsBd,WAAW,CAAEe,KAAD,IAAyBA,KAAK,CAACC,MAAhC,CAAvC;AAEA,QAAMC,eAAe,GAAGlB,OAAO,CAAC,MAAMe,eAAe,CAACI,MAAhB,KAA2BX,YAAY,CAACW,MAA/C,EAAuD,CAACJ,eAAD,EAAkBP,YAAlB,CAAvD,CAA/B;AAEAT,EAAAA,SAAS,CAAC,MAAM;AACdW,IAAAA,cAAc,CAACU,IAAI,CAACC,KAAL,CAAWC,MAAM,CAACC,UAAP,IAAqBnB,kBAAkB,GAAG,GAA1C,CAAX,CAAD,CAAd;AACAQ,IAAAA,eAAe,CAACQ,IAAI,CAACC,KAAL,CAAWC,MAAM,CAACE,WAAP,IAAsBnB,mBAAmB,GAAG,GAA5C,CAAX,CAAD,CAAf;AACD,GAHQ,EAGN,EAHM,CAAT;AAKA,QAAMoB,YAAY,GAAG5B,WAAW,CAAC,MAAM;AACrC6B,IAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ,EAA8Bd,aAA9B;AACAC,IAAAA,gBAAgB,CAACD,aAAa,GAAG,CAAjB,CAAhB;AACD,GAH+B,EAG7B,CAACA,aAAD,CAH6B,CAAhC;AAKA,QAAMe,YAAY,GAAG/B,WAAW,CAAC,MAAM;AACrC6B,IAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ,EAA8Bd,aAA9B;AACAC,IAAAA,gBAAgB,CAACD,aAAa,GAAG,CAAjB,CAAhB;AACD,GAH+B,EAG7B,CAACA,aAAD,CAH6B,CAAhC;AAKA,SACE,MAAC,eAAD;AACE,IAAA,UAAU,EAAE;AACVgB,MAAAA,MAAM,EAAElB;AADE,KADd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAgCE,MAAC,MAAD;AACE,IAAA,WAAW,EAAEF,WADf;AAEE,IAAA,YAAY,EAAEE,YAFhB;AAGE,IAAA,gBAAgB,EAAE,EAHpB;AAIE,IAAA,KAAK,EAAEJ,MAAM,CAAC,CAAD,CAJf;AAKE,IAAA,WAAW,EAAEC,YAAY,CAAC,CAAD,CAL3B;AAME,IAAA,YAAY,EAAEiB,YANhB;AAOE,IAAA,YAAY,EAAEG,YAPhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAhCF,EAyCE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAzCF,CADF;AAqDD,CA7ED;;AA+EA,eAAetB,UAAf","sourcesContent":["import React, {\n  useCallback, useState, useEffect, useMemo,\n} from 'react';\nimport { useSelector } from 'react-redux';\n\nimport Viewer from './Viewer';\nimport ViewerCount from './ViewerCount';\n\nimport { ViewerContainer } from '../../styles/viewer';\n\nimport { ReducerState } from '../../interfaces';\nimport { EpubSpineItem } from '../../interfaces/books';\n\nimport { VIEWER_WIDTH_RATIO, VIEWER_HEIGHT_RATIO } from '../../constants/viewer';\n\n\ninterface Props {\n  spines: EpubSpineItem[];\n  viewerSpines: string[];\n}\n\nconst ViewerPage: React.FunctionComponent<Props> = ({ spines, viewerSpines }) => {\n  const [viewerWidth, setViewerWidth] = useState(0);\n  const [viewerHeight, setViewerHeight] = useState(0);\n  const [nowSpineIndex, setNowSpineIndex] = useState(0);\n\n  const { viewerCountList } = useSelector((state: ReducerState) => state.viewer);\n\n  const isAnalizedSpine = useMemo(() => viewerCountList.length === viewerSpines.length, [viewerCountList, viewerSpines]);\n\n  useEffect(() => {\n    setViewerWidth(Math.floor(window.innerWidth * (VIEWER_WIDTH_RATIO / 100)));\n    setViewerHeight(Math.floor(window.innerHeight * (VIEWER_HEIGHT_RATIO / 100)));\n  }, []);\n\n  const setNextSpine = useCallback(() => {\n    console.log('Set next spine', nowSpineIndex);\n    setNowSpineIndex(nowSpineIndex + 1);\n  }, [nowSpineIndex]);\n\n  const setPrevSpine = useCallback(() => {\n    console.log('Set prev spine', nowSpineIndex);\n    setNowSpineIndex(nowSpineIndex - 1);\n  }, [nowSpineIndex]);\n\n  return (\n    <ViewerContainer\n      styleProps={{\n        height: viewerHeight,\n      }}\n    >\n      {/* {\n        isAnalizedSpine\n        && (\n        <Viewer\n          viewerWidth={viewerWidth}\n          viewerHeight={viewerHeight}\n          wholeColumnCount={viewerCountList[nowSpineIndex].count}\n          spine={spines[nowSpineIndex]}\n          viewerSpine={viewerSpines[nowSpineIndex]}\n          setNextSpine={setNextSpine}\n          setPrevSpine={setPrevSpine}\n        />\n        )\n      }\n      <section>\n        {\n          viewerSpines.map((viewerSpine, index) => (\n            <ViewerCount\n              key={viewerSpine}\n              viewerWidth={viewerWidth}\n              viewerHeight={viewerHeight}\n              viewerSpine={viewerSpine}\n              viewerSpineIndex={index}\n            />\n          ))\n        }\n      </section> */}\n      <Viewer\n        viewerWidth={viewerWidth}\n        viewerHeight={viewerHeight}\n        wholeColumnCount={74}\n        spine={spines[3]}\n        viewerSpine={viewerSpines[3]}\n        setNextSpine={setNextSpine}\n        setPrevSpine={setPrevSpine}\n      />\n      <section>\n        {/* <ViewerCount\n          key={viewerSpines[0]}\n          viewerWidth={viewerWidth}\n          viewerHeight={viewerHeight}\n          viewerSpine={viewerSpines[3]}\n          viewerSpineIndex={4}\n        /> */}\n      </section>\n    </ViewerContainer>\n  );\n};\n\nexport default ViewerPage;\n"]},"metadata":{},"sourceType":"module"}