{"ast":null,"code":"var _jsxFileName = \"/Users/hyuntaeeom/Projects/personal/mini-viewer/components/viewer/ViewerPage.tsx\";\nvar __jsx = React.createElement;\n\n/* eslint-disable react/no-danger */\nimport React, { useState, useRef, useCallback, useMemo, useEffect } from 'react';\nimport { ViewArticle, ViewSection, Contents, LeftButton, RightButton } from '../../styles/viewer';\nimport { VIEWER_PAGE_GAP } from '../../constants/viewer';\n\nconst ViewerPage = ({\n  viewerWidth,\n  viewerHeight,\n  isShowPrevViewer,\n  wholeColumnCount,\n  viewerSpine,\n  toggleNewViewer,\n  setNextSpine,\n  setPrevSpine\n}) => {\n  const {\n    0: nowViewerCount,\n    1: setNowViewerCount\n  } = useState(0);\n  const hasNextViewer = useMemo(() => nowViewerCount < wholeColumnCount, [nowViewerCount, wholeColumnCount]);\n  const hasPrevViewer = useMemo(() => nowViewerCount > 0, [nowViewerCount]);\n  const viewArticleRef = useRef(null);\n  useEffect(() => {\n    const {\n      current: viewArticleRefCurrent\n    } = viewArticleRef;\n\n    if (isShowPrevViewer) {\n      // Show prev view\n      viewArticleRefCurrent.scrollLeft = wholeColumnCount * (viewerWidth + VIEWER_PAGE_GAP);\n      setNowViewerCount(wholeColumnCount);\n    } else {\n      // Show new view\n      viewArticleRefCurrent.scrollLeft = 0;\n      setNowViewerCount(0);\n    }\n  }, [isShowPrevViewer, viewerWidth, wholeColumnCount, viewerSpine, toggleNewViewer]);\n  const clickRight = useCallback(() => {\n    const {\n      current: viewArticleRefCurrent\n    } = viewArticleRef;\n\n    if (hasNextViewer) {\n      setNowViewerCount(nowViewerCount + 1);\n      viewArticleRefCurrent.scrollLeft += viewerWidth + VIEWER_PAGE_GAP;\n    } else {\n      setNextSpine();\n    }\n  }, [hasNextViewer, nowViewerCount, viewerWidth, setNextSpine]);\n  const clickLeft = useCallback(() => {\n    const {\n      current: viewArticleRefCurrent\n    } = viewArticleRef;\n\n    if (hasPrevViewer) {\n      setNowViewerCount(nowViewerCount - 1);\n      viewArticleRefCurrent.scrollLeft -= viewerWidth + VIEWER_PAGE_GAP;\n    } else {\n      setPrevSpine();\n    }\n  }, [hasPrevViewer, nowViewerCount, viewerWidth, setPrevSpine]);\n  return __jsx(React.Fragment, null, __jsx(ViewArticle, {\n    ref: viewArticleRef,\n    onClick: clickRight,\n    styleProps: {\n      width: viewerWidth,\n      height: viewerHeight\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76\n    },\n    __self: this\n  }, __jsx(ViewSection, {\n    styleProps: {\n      width: viewerWidth,\n      height: viewerHeight\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84\n    },\n    __self: this\n  }, __jsx(Contents, {\n    dangerouslySetInnerHTML: {\n      __html: viewerSpine\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90\n    },\n    __self: this\n  }))), __jsx(LeftButton, {\n    onClick: clickLeft,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93\n    },\n    __self: this\n  }, \"Left\"), __jsx(RightButton, {\n    onClick: clickRight,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94\n    },\n    __self: this\n  }, \"Right\"));\n};\n\nexport default ViewerPage;","map":{"version":3,"sources":["/Users/hyuntaeeom/Projects/personal/mini-viewer/components/viewer/ViewerPage.tsx"],"names":["React","useState","useRef","useCallback","useMemo","useEffect","ViewArticle","ViewSection","Contents","LeftButton","RightButton","VIEWER_PAGE_GAP","ViewerPage","viewerWidth","viewerHeight","isShowPrevViewer","wholeColumnCount","viewerSpine","toggleNewViewer","setNextSpine","setPrevSpine","nowViewerCount","setNowViewerCount","hasNextViewer","hasPrevViewer","viewArticleRef","current","viewArticleRefCurrent","scrollLeft","clickRight","clickLeft","width","height","__html"],"mappings":"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","sourcesContent":["\n/* eslint-disable react/no-danger */\nimport React, {\n  useState, useRef, useCallback, useMemo, useEffect,\n} from 'react';\n\nimport { EpubSpineItem } from '../../interfaces/books';\n\nimport {\n  ViewArticle, ViewSection, Contents,\n  LeftButton, RightButton,\n} from '../../styles/viewer';\n\nimport { VIEWER_PAGE_GAP } from '../../constants/viewer';\n\ninterface Props {\n  viewerWidth: number;\n  viewerHeight: number;\n  isShowPrevViewer: boolean;\n  wholeColumnCount: number;\n  viewerSpine: string;\n  toggleNewViewer: boolean;\n  setNextSpine: () => void;\n  setPrevSpine: () => void;\n}\n\nconst ViewerPage: React.FunctionComponent<Props> = ({\n  viewerWidth, viewerHeight,\n  isShowPrevViewer, wholeColumnCount,\n  viewerSpine, toggleNewViewer,\n  setNextSpine, setPrevSpine,\n}) => {\n  const [nowViewerCount, setNowViewerCount] = useState(0);\n\n  const hasNextViewer = useMemo(() => nowViewerCount < wholeColumnCount, [nowViewerCount, wholeColumnCount]);\n  const hasPrevViewer = useMemo(() => nowViewerCount > 0, [nowViewerCount]);\n\n  const viewArticleRef = useRef(null);\n\n  useEffect(() => {\n    const { current: viewArticleRefCurrent } = viewArticleRef;\n    if (isShowPrevViewer) {\n      // Show prev view\n      viewArticleRefCurrent.scrollLeft = wholeColumnCount * (viewerWidth + VIEWER_PAGE_GAP);\n      setNowViewerCount(wholeColumnCount);\n    } else {\n      // Show new view\n      viewArticleRefCurrent.scrollLeft = 0;\n      setNowViewerCount(0);\n    }\n  }, [isShowPrevViewer, viewerWidth, wholeColumnCount, viewerSpine, toggleNewViewer]);\n\n  const clickRight = useCallback(() => {\n    const { current: viewArticleRefCurrent } = viewArticleRef;\n    if (hasNextViewer) {\n      setNowViewerCount(nowViewerCount + 1);\n      viewArticleRefCurrent.scrollLeft += (viewerWidth + VIEWER_PAGE_GAP);\n    } else {\n      setNextSpine();\n    }\n  }, [hasNextViewer, nowViewerCount, viewerWidth, setNextSpine]);\n\n  const clickLeft = useCallback(() => {\n    const { current: viewArticleRefCurrent } = viewArticleRef;\n\n    if (hasPrevViewer) {\n      setNowViewerCount(nowViewerCount - 1);\n      viewArticleRefCurrent.scrollLeft -= (viewerWidth + VIEWER_PAGE_GAP);\n    } else {\n      setPrevSpine();\n    }\n  }, [hasPrevViewer, nowViewerCount, viewerWidth, setPrevSpine]);\n\n  return (\n    <>\n      <ViewArticle\n        ref={viewArticleRef}\n        onClick={clickRight}\n        styleProps={{\n          width: viewerWidth,\n          height: viewerHeight,\n        }}\n      >\n        <ViewSection\n          styleProps={{\n            width: viewerWidth,\n            height: viewerHeight,\n          }}\n        >\n          <Contents dangerouslySetInnerHTML={{ __html: viewerSpine }} />\n        </ViewSection>\n      </ViewArticle>\n      <LeftButton onClick={clickLeft}>Left</LeftButton>\n      <RightButton onClick={clickRight}>Right</RightButton>\n    </>\n  );\n};\n\nexport default ViewerPage;\n"]},"metadata":{},"sourceType":"module"}