{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useEffect, useCallback, useReducer } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport * as viewerActions from '../../reducers/viewer';\nimport ViewerCount from './ViewerCount';\nconst PRIVATE_ADD_COUNT_ACTION = 'AddCount';\nconst initialState = {\n  countItems: []\n};\n\nconst privateReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case PRIVATE_ADD_COUNT_ACTION:\n      {\n        const data = action.payload;\n        return _objectSpread({}, state, {\n          countItems: [...state.countItems, data]\n        });\n      }\n\n    default:\n      {\n        return _objectSpread({}, state);\n      }\n  }\n};\n\nconst ViewerCalculator = ({\n  viewerWidth,\n  viewerHeight,\n  viewers,\n  spines\n}) => {\n  const dispatch = useDispatch();\n  const {\n    0: reducerState,\n    1: dispatchReducer\n  } = useReducer(privateReducer, initialState);\n  const {\n    fontSize,\n    widthRatio,\n    lineHeight\n  } = useSelector(state => state.viewerSetting);\n  const setCountCallback = useCallback((count, index) => {\n    const spine = spines[index];\n    dispatchReducer({\n      type: PRIVATE_ADD_COUNT_ACTION,\n      payload: {\n        index,\n        count,\n        spineId: spine.id\n      }\n    });\n  }, [spines]);\n  useEffect(() => {\n    const {\n      countItems\n    } = reducerState;\n\n    if (countItems.length >= spines.length) {\n      dispatch(viewerActions.setViewerCountList(countItems));\n    }\n  }, [dispatch, reducerState, spines]);\n  return __jsx(React.Fragment, null, viewers.map((viewer, index) => __jsx(ViewerCount, {\n    key: viewer,\n    viewerWidth: viewerWidth,\n    viewerHeight: viewerHeight,\n    viewer: viewer,\n    viewerStyle: {\n      fontSize,\n      widthRatio,\n      lineHeight\n    },\n    setCountCallback: count => setCountCallback(count, index)\n  })));\n};\n\nexport default ViewerCalculator;","map":null,"metadata":{},"sourceType":"module"}