{"ast":null,"code":"var _jsxFileName = \"/Users/hyuntaeeom/Projects/personal/mini-viewer/pages/viewer.tsx\";\nvar __jsx = React.createElement;\nimport React, { useState, useMemo, useEffect, useCallback } from 'react';\nimport { useSelector } from 'react-redux';\nimport Layout from '../components/Layout';\nimport ViewerHeader from '../components/viewer/ViewerHeader';\nimport { VIEWER_WIDTH_RATIO, VIEWER_HEIGHT_RATIO } from '../constants/viewer';\n\nconst Viewer = ({\n  book,\n  viewerSpines,\n  styleLinks\n}) => {\n  const {\n    spines,\n    titles,\n    ncx\n  } = book;\n  console.log('Book', book);\n  const {\n    0: viewerWidth,\n    1: setViewerWidth\n  } = useState(0);\n  const {\n    0: viewerHeight,\n    1: setViewerHeight\n  } = useState(0);\n  const {\n    0: nowSpineIndex,\n    1: setNowSpineIndex\n  } = useState(0);\n  const {\n    0: isClickedPrev,\n    1: setIsClickedPrev\n  } = useState(false);\n  const {\n    viewerCountList\n  } = useSelector(state => state.viewer);\n  const isAnalizedSpine = useMemo(() => viewerCountList.length === viewerSpines.length, [viewerCountList, viewerSpines]);\n  useEffect(() => {\n    setViewerWidth(Math.floor(window.innerWidth * (VIEWER_WIDTH_RATIO / 100)));\n    setViewerHeight(Math.floor(window.innerHeight * (VIEWER_HEIGHT_RATIO / 100)));\n  }, []);\n  const setNextSpine = useCallback(() => {\n    if (nowSpineIndex + 1 >= viewerSpines.length) {\n      alert('마지막 페이지 입니다.');\n    } else {\n      setNowSpineIndex(nowSpineIndex + 1);\n      setIsClickedPrev(false);\n    }\n  }, [nowSpineIndex, viewerSpines]);\n  const setPrevSpine = useCallback(() => {\n    if (nowSpineIndex - 1 < 0) {\n      alert('첫번째 페이지 입니다');\n    } else {\n      setNowSpineIndex(nowSpineIndex - 1);\n      setIsClickedPrev(true);\n    }\n  }, [nowSpineIndex]);\n  return __jsx(Layout, {\n    styleLinks: styleLinks,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63\n    },\n    __self: this\n  }, __jsx(ViewerHeader, {\n    viewerHeight: viewerHeight,\n    titles: titles,\n    ncxItem: ncx,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66\n    },\n    __self: this\n  }));\n}; // eslint-disable-next-line @typescript-eslint/unbound-method\n\n\nViewer.getInitialProps = async context => {\n  const {\n    req\n  } = context;\n\n  if (req) {\n    const {\n      EpubParser\n    } = require('@ridi/epub-parser');\n\n    try {\n      const parser = new EpubParser('public/jikji.epub');\n      const book = await parser.parse({\n        validatePackage: true,\n        parseStyle: false,\n        unzipPath: 'public/epub/jikji'\n      });\n      const viewerSpines = await parser.readItems(book.spines, {\n        force: true,\n        extractBody: true,\n        serializedAnchor: true,\n        ignoreScript: true,\n        basePath: 'epub/jikji'\n      });\n      return {\n        book,\n        viewerSpines,\n        styleLinks: book.styles.map(style => `epub/jikji/${style.href}`)\n      };\n    } catch (error) {\n      console.log('Error', error);\n    }\n  }\n\n  return {};\n};\n\nexport default Viewer;","map":{"version":3,"sources":["/Users/hyuntaeeom/Projects/personal/mini-viewer/pages/viewer.tsx"],"names":["React","useState","useMemo","useEffect","useCallback","useSelector","Layout","ViewerHeader","VIEWER_WIDTH_RATIO","VIEWER_HEIGHT_RATIO","Viewer","book","viewerSpines","styleLinks","spines","titles","ncx","console","log","viewerWidth","setViewerWidth","viewerHeight","setViewerHeight","nowSpineIndex","setNowSpineIndex","isClickedPrev","setIsClickedPrev","viewerCountList","state","viewer","isAnalizedSpine","length","Math","floor","window","innerWidth","innerHeight","setNextSpine","alert","setPrevSpine","getInitialProps","context","req","EpubParser","require","parser","parse","validatePackage","parseStyle","unzipPath","readItems","force","extractBody","serializedAnchor","ignoreScript","basePath","styles","map","style","href","error"],"mappings":"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","sourcesContent":["import React, {\n  useState, useMemo, useEffect, useCallback,\n} from 'react';\nimport { useSelector } from 'react-redux';\nimport { NextPageContext, NextPage } from 'next';\n\nimport Layout from '../components/Layout';\nimport ViewerCount from '../components/viewer/ViewerCount';\nimport ViewerHeader from '../components/viewer/ViewerHeader';\nimport ViewerPage from '../components/viewer/ViewerPage';\n\nimport { VIEWER_WIDTH_RATIO, VIEWER_HEIGHT_RATIO } from '../constants/viewer';\n\nimport { ReducerState } from '../interfaces';\nimport { EpubBook } from '../interfaces/books';\n\nimport { ViewerContainer } from '../styles/viewer';\n\ninterface Props {\n  book: EpubBook;\n  viewerSpines: string[];\n  styleLinks: string[];\n}\n\nconst Viewer: NextPage<Props> = ({ book, viewerSpines, styleLinks }) => {\n  const { spines, titles, ncx } = book;\n\n  console.log('Book', book);\n\n  const [viewerWidth, setViewerWidth] = useState(0);\n  const [viewerHeight, setViewerHeight] = useState(0);\n  const [nowSpineIndex, setNowSpineIndex] = useState(0);\n  const [isClickedPrev, setIsClickedPrev] = useState(false);\n\n  const { viewerCountList } = useSelector((state: ReducerState) => state.viewer);\n\n  const isAnalizedSpine = useMemo(() => viewerCountList.length === viewerSpines.length, [viewerCountList, viewerSpines]);\n\n  useEffect(() => {\n    setViewerWidth(Math.floor(window.innerWidth * (VIEWER_WIDTH_RATIO / 100)));\n    setViewerHeight(Math.floor(window.innerHeight * (VIEWER_HEIGHT_RATIO / 100)));\n  }, []);\n\n  const setNextSpine = useCallback(() => {\n    if (nowSpineIndex + 1 >= viewerSpines.length) {\n      alert('마지막 페이지 입니다.');\n    } else {\n      setNowSpineIndex(nowSpineIndex + 1);\n      setIsClickedPrev(false);\n    }\n  }, [nowSpineIndex, viewerSpines]);\n\n  const setPrevSpine = useCallback(() => {\n    if (nowSpineIndex - 1 < 0) {\n      alert('첫번째 페이지 입니다');\n    } else {\n      setNowSpineIndex(nowSpineIndex - 1);\n      setIsClickedPrev(true);\n    }\n  }, [nowSpineIndex]);\n\n  return (\n    <Layout\n      styleLinks={styleLinks}\n    >\n      <ViewerHeader\n        viewerHeight={viewerHeight}\n        titles={titles}\n        ncxItem={ncx}\n      />\n      {/* <ViewerContainer\n        styleProps={{\n          height: viewerHeight,\n        }}\n      >\n        {\n        isAnalizedSpine\n        && (\n          <ViewerPage\n            viewerWidth={viewerWidth}\n            viewerHeight={viewerHeight}\n            isShowPrevViewer={isClickedPrev}\n            wholeColumnCount={viewerCountList[nowSpineIndex].count}\n            spine={spines[nowSpineIndex]}\n            viewerSpine={viewerSpines[nowSpineIndex]}\n            setNextSpine={setNextSpine}\n            setPrevSpine={setPrevSpine}\n          />\n        )\n      }\n        <section>\n          {\n          viewerSpines.map((viewerSpine, index) => (\n            <ViewerCount\n              key={viewerSpine}\n              viewerWidth={viewerWidth}\n              viewerHeight={viewerHeight}\n              viewerSpine={viewerSpine}\n              viewerSpineIndex={index}\n            />\n          ))\n        }\n        </section>\n      </ViewerContainer> */}\n    </Layout>\n  );\n};\n\n// eslint-disable-next-line @typescript-eslint/unbound-method\nViewer.getInitialProps = async (context: NextPageContext<any>): Promise<any> => {\n  const { req } = context;\n  if (req) {\n    const { EpubParser } = require('@ridi/epub-parser');\n    try {\n      const parser = new EpubParser('public/jikji.epub');\n      const book: EpubBook = await parser.parse({\n        validatePackage: true,\n        parseStyle: false,\n        unzipPath: 'public/epub/jikji',\n      });\n      const viewerSpines = await parser.readItems(book.spines, {\n        force: true,\n        extractBody: true,\n        serializedAnchor: true,\n        ignoreScript: true,\n        basePath: 'epub/jikji',\n      });\n\n      return {\n        book,\n        viewerSpines,\n        styleLinks: book.styles.map((style) => `epub/jikji/${style.href}`),\n      };\n    } catch (error) {\n      console.log('Error', error);\n    }\n  }\n\n\n  return {};\n};\n\nexport default Viewer;\n"]},"metadata":{},"sourceType":"module"}