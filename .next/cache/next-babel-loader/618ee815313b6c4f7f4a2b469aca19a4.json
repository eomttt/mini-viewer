{"ast":null,"code":"var _jsxFileName = \"/Users/hyuntaeeom/Projects/personal/mini-viewer/pages/index.tsx\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport styled from 'styled-components';\nconst Container = styled.div.withConfig({\n  displayName: \"pages__Container\",\n  componentId: \"sc-18mi7mi-0\"\n})([\"\"]);\n\nconst Home = bookInfo => {\n  console.log('RRR', bookInfo);\n  const {\n    items,\n    book\n  } = bookInfo;\n\n  const renderItems = () => items.map((item, idx) => {\n    const {\n      mediaType\n    } = book.items[idx];\n\n    if (mediaType === 'image/jpeg') {\n      return __jsx(\"img\", {\n        src: `data:image/jpeg;base64,${item.toString('base64')}`,\n        alt: \"test\",\n        key: idx,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 15\n        },\n        __self: this\n      });\n    }\n\n    if (mediaType === 'text/css') {\n      return __jsx(\"style\", {\n        key: idx,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 18\n        },\n        __self: this\n      }, item);\n    }\n\n    if (mediaType === 'application/xhtml+xml') {\n      // eslint-disable-next-line react/no-danger\n      return __jsx(\"div\", {\n        dangerouslySetInnerHTML: {\n          __html: item\n        },\n        key: idx,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 22\n        },\n        __self: this\n      });\n    }\n\n    return __jsx(\"div\", {\n      key: idx,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 24\n      },\n      __self: this\n    }, \"TEST\");\n  });\n\n  return __jsx(Container, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28\n    },\n    __self: this\n  }, renderItems());\n};\n\nHome.getInitialProps = async context => {\n  const {\n    req\n  } = context;\n\n  if (req) {\n    const {\n      EpubParser\n    } = require('@ridi/epub-parser');\n\n    try {\n      const parser = new EpubParser('public/pg61625-images.epub');\n      const book = await parser.parse({\n        parseStyle: false\n      });\n      const spines = await parser.readItems(book.spines);\n      const items = await parser.readItems(book.items, {\n        force: true,\n        extractBody: true,\n        serializedAnchor: true,\n        ignoreScript: true,\n        basePath: 'http://www.gutenberg.org/files/61625/61625-h/images'\n      });\n      return {\n        book,\n        spines,\n        items\n      };\n    } catch (error) {\n      console.log('Error', error);\n    }\n  }\n\n  return {};\n};\n\nexport default Home;","map":{"version":3,"sources":["/Users/hyuntaeeom/Projects/personal/mini-viewer/pages/index.tsx"],"names":["React","styled","Container","div","Home","bookInfo","console","log","items","book","renderItems","map","item","idx","mediaType","toString","__html","getInitialProps","context","req","EpubParser","require","parser","parse","parseStyle","spines","readItems","force","extractBody","serializedAnchor","ignoreScript","basePath","error"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,OAAOC,MAAP,MAAmB,mBAAnB;AAEA,MAAMC,SAAS,GAAGD,MAAM,CAACE,GAAV;AAAA;AAAA;AAAA,QAAf;;AAGA,MAAMC,IAAI,GAAIC,QAAD,IAAc;AACzBC,EAAAA,OAAO,CAACC,GAAR,CAAY,KAAZ,EAAmBF,QAAnB;AACA,QAAM;AAAEG,IAAAA,KAAF;AAASC,IAAAA;AAAT,MAAkBJ,QAAxB;;AAEA,QAAMK,WAAW,GAAG,MAAmBF,KAAK,CAACG,GAAN,CAAU,CAACC,IAAD,EAAOC,GAAP,KAAe;AAC9D,UAAM;AAAEC,MAAAA;AAAF,QAAgBL,IAAI,CAACD,KAAL,CAAWK,GAAX,CAAtB;;AACA,QAAIC,SAAS,KAAK,YAAlB,EAAgC;AAC9B,aAAO;AAAK,QAAA,GAAG,EAAG,0BAAyBF,IAAI,CAACG,QAAL,CAAc,QAAd,CAAwB,EAA5D;AAA+D,QAAA,GAAG,EAAC,MAAnE;AAA0E,QAAA,GAAG,EAAEF,GAA/E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAP;AACD;;AACD,QAAIC,SAAS,KAAK,UAAlB,EAA8B;AAC5B,aAAO;AAAO,QAAA,GAAG,EAAED,GAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAkBD,IAAlB,CAAP;AACD;;AACD,QAAIE,SAAS,KAAK,uBAAlB,EAA2C;AACzC;AACA,aAAO;AAAK,QAAA,uBAAuB,EAAE;AAAEE,UAAAA,MAAM,EAAEJ;AAAV,SAA9B;AAAgD,QAAA,GAAG,EAAEC,GAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAP;AACD;;AACD,WAAO;AAAK,MAAA,GAAG,EAAEA,GAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAAP;AACD,GAbsC,CAAvC;;AAeA,SACE,MAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGH,WAAW,EADd,CADF;AAKD,CAxBD;;AA0BAN,IAAI,CAACa,eAAL,GAAuB,MAAOC,OAAP,IAAkD;AACvE,QAAM;AAAEC,IAAAA;AAAF,MAAUD,OAAhB;;AACA,MAAIC,GAAJ,EAAS;AACP,UAAM;AAAEC,MAAAA;AAAF,QAAiBC,OAAO,CAAC,mBAAD,CAA9B;;AACA,QAAI;AACF,YAAMC,MAAM,GAAG,IAAIF,UAAJ,CAAe,4BAAf,CAAf;AACA,YAAMX,IAAI,GAAG,MAAMa,MAAM,CAACC,KAAP,CAAa;AAC9BC,QAAAA,UAAU,EAAE;AADkB,OAAb,CAAnB;AAGA,YAAMC,MAAM,GAAG,MAAMH,MAAM,CAACI,SAAP,CAAiBjB,IAAI,CAACgB,MAAtB,CAArB;AACA,YAAMjB,KAAK,GAAG,MAAMc,MAAM,CAACI,SAAP,CAAiBjB,IAAI,CAACD,KAAtB,EAA6B;AAC/CmB,QAAAA,KAAK,EAAE,IADwC;AAE/CC,QAAAA,WAAW,EAAE,IAFkC;AAG/CC,QAAAA,gBAAgB,EAAE,IAH6B;AAI/CC,QAAAA,YAAY,EAAE,IAJiC;AAK/CC,QAAAA,QAAQ,EAAE;AALqC,OAA7B,CAApB;AAQA,aAAO;AACLtB,QAAAA,IADK;AAELgB,QAAAA,MAFK;AAGLjB,QAAAA;AAHK,OAAP;AAKD,KAnBD,CAmBE,OAAOwB,KAAP,EAAc;AACd1B,MAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqByB,KAArB;AACD;AACF;;AAGD,SAAO,EAAP;AACD,CA9BD;;AAgCA,eAAe5B,IAAf","sourcesContent":["import React from 'react';\nimport { NextPageContext } from 'next';\nimport styled from 'styled-components';\n\nconst Container = styled.div`\n`;\n\nconst Home = (bookInfo) => {\n  console.log('RRR', bookInfo);\n  const { items, book } = bookInfo;\n\n  const renderItems = (): JSX.Element => items.map((item, idx) => {\n    const { mediaType } = book.items[idx];\n    if (mediaType === 'image/jpeg') {\n      return <img src={`data:image/jpeg;base64,${item.toString('base64')}`} alt=\"test\" key={idx} />;\n    }\n    if (mediaType === 'text/css') {\n      return <style key={idx}>{item}</style>;\n    }\n    if (mediaType === 'application/xhtml+xml') {\n      // eslint-disable-next-line react/no-danger\n      return <div dangerouslySetInnerHTML={{ __html: item }} key={idx} />;\n    }\n    return <div key={idx}>TEST</div>;\n  });\n\n  return (\n    <Container>\n      {renderItems()}\n    </Container>\n  );\n};\n\nHome.getInitialProps = async (context: NextPageContext): Promise<any> => {\n  const { req } = context;\n  if (req) {\n    const { EpubParser } = require('@ridi/epub-parser');\n    try {\n      const parser = new EpubParser('public/pg61625-images.epub');\n      const book = await parser.parse({\n        parseStyle: false,\n      });\n      const spines = await parser.readItems(book.spines);\n      const items = await parser.readItems(book.items, {\n        force: true,\n        extractBody: true,\n        serializedAnchor: true,\n        ignoreScript: true,\n        basePath: 'http://www.gutenberg.org/files/61625/61625-h/images',\n      });\n\n      return {\n        book,\n        spines,\n        items,\n      };\n    } catch (error) {\n      console.log('Error', error);\n    }\n  }\n\n\n  return {};\n};\n\nexport default Home;\n"]},"metadata":{},"sourceType":"module"}