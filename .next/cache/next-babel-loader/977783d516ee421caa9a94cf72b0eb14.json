{"ast":null,"code":"var _jsxFileName = \"/Users/hyuntaeeom/Projects/personal/mini-viewer/pages/viewer.tsx\";\nvar __jsx = React.createElement;\nimport React, { useState, useMemo, useEffect, useCallback } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport styled from 'styled-components';\nimport Layout from '../components/Layout';\nimport ViewerBottom from '../components/viewer/ViewerBottom';\nimport ViewerCalculator from '../components/viewer/ViewerCalculator';\nimport ViewerHeader from '../components/viewer/ViewerHeader';\nimport ViewerPage from '../components/viewer/ViewerPage';\nimport * as viewerActions from '../reducers/viewer';\nimport { getBook, getViewers } from '../lib/util';\nimport { VIEWER_WIDTH_RATIO, VIEWER_HEIGHT_RATIO } from '../constants/viewer';\nconst Container = styled.div.withConfig({\n  displayName: \"viewer__Container\",\n  componentId: \"sc-1iklkx5-0\"\n})([\"padding:\", \"% \", \"%;height:\", \"px;background-color:\", \";text-align:center;overflow:hidden;\"], (100 - VIEWER_HEIGHT_RATIO) / 2, (100 - VIEWER_WIDTH_RATIO) / 2, props => props.styleProps.height, props => props.styleProps.backgroundColor);\n\nconst Viewer = ({\n  book,\n  viewers,\n  styleLinks\n}) => {\n  const {\n    spines,\n    titles,\n    ncx,\n    contributors\n  } = book; // console.log('Book', book);\n\n  const dispatch = useDispatch();\n  const {\n    0: viewerWidth,\n    1: setViewerWidth\n  } = useState(0);\n  const {\n    0: viewerHeight,\n    1: setViewerHeight\n  } = useState(0);\n  const {\n    0: nowSpineIndex,\n    1: setNowSpineIndex\n  } = useState(0);\n  const {\n    0: wholePageCount,\n    1: setWholePageCount\n  } = useState(0);\n  const {\n    viewerCountList,\n    viewerPageCount\n  } = useSelector(state => state.viewer);\n  const {\n    fontSize,\n    widthRatio,\n    lineHeight,\n    backgroundColor\n  } = useSelector(state => state.viewerSetting);\n  const isAnalyzedSpine = useMemo(() => viewerCountList.length >= viewers.length, [viewerCountList, viewers]);\n  const isFirstPage = useMemo(() => viewerPageCount === 0, [viewerPageCount]);\n  const isLastPage = useMemo(() => viewerPageCount === wholePageCount, [viewerPageCount, wholePageCount]);\n  const selectedSpineIndex = useMemo(() => {\n    let spineIndex = 0;\n    let accurateCount = 0;\n    viewerCountList.some(viewerCount => {\n      if (accurateCount + viewerCount.count > viewerPageCount) {\n        spineIndex = viewerCount.index;\n        return true;\n      }\n\n      accurateCount += viewerCount.count;\n      return false;\n    });\n    return spineIndex;\n  }, [viewerPageCount, viewerCountList]);\n  const pageColumnOffset = useMemo(() => {\n    let columnOffset = viewerPageCount;\n    viewerCountList.some((viewerCount, index) => {\n      if (index < nowSpineIndex) {\n        columnOffset -= viewerCount.count;\n        return false;\n      }\n\n      return true;\n    });\n    return columnOffset;\n  }, [viewerCountList, viewerPageCount, nowSpineIndex]);\n  useEffect(() => {\n    setViewerWidth(Math.floor(window.innerWidth * (VIEWER_WIDTH_RATIO / 100)));\n    setViewerHeight(Math.floor(window.innerHeight * (VIEWER_HEIGHT_RATIO / 100)));\n  }, []);\n  useEffect(() => {\n    console.log('Now spine index', selectedSpineIndex);\n    setNowSpineIndex(selectedSpineIndex);\n  }, [selectedSpineIndex]);\n  useEffect(() => {\n    if (isAnalyzedSpine) {\n      console.log('Set whole page count');\n      const pageCount = viewerCountList.reduce((acc, cur) => acc + cur.count, 0);\n      setWholePageCount(pageCount - 1);\n    }\n  }, [isAnalyzedSpine, viewerCountList]);\n  useEffect(() => {\n    console.log('New style');\n    dispatch(viewerActions.initViewerState());\n  }, [dispatch, fontSize, lineHeight, widthRatio]);\n  const calculateViewerWidth = useCallback((nowWidth, newRatio) => Math.floor(Number(nowWidth) * (Number(newRatio) / 100)), []);\n  return __jsx(Layout, {\n    styleLinks: styleLinks,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116\n    },\n    __self: this\n  }, __jsx(ViewerHeader, {\n    titles: titles,\n    authors: contributors,\n    ncxItem: ncx,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119\n    },\n    __self: this\n  }), __jsx(Container, {\n    styleProps: {\n      height: viewerHeight,\n      backgroundColor\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124\n    },\n    __self: this\n  }, isAnalyzedSpine && __jsx(ViewerPage, {\n    viewerWidth: calculateViewerWidth(viewerWidth, widthRatio),\n    viewerHeight: viewerHeight,\n    pageColumnOffset: pageColumnOffset,\n    viewerSpine: viewers[nowSpineIndex],\n    isFirstPage: isFirstPage,\n    isLastPage: isLastPage,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132\n    },\n    __self: this\n  }), !isAnalyzedSpine && __jsx(ViewerCalculator, {\n    viewerWidth: calculateViewerWidth(viewerWidth, widthRatio),\n    viewerHeight: viewerHeight,\n    spines: spines,\n    viewers: viewers,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143\n    },\n    __self: this\n  })), __jsx(ViewerBottom, {\n    sliderMaxValue: wholePageCount,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151\n    },\n    __self: this\n  }));\n}; // eslint-disable-next-line @typescript-eslint/unbound-method\n\n\nViewer.getInitialProps = async context => {\n  const {\n    req,\n    store,\n    query\n  } = context;\n\n  if (req) {\n    // Server side render\n    const {\n      EpubParser\n    } = require('@ridi/epub-parser');\n\n    try {\n      const parser = new EpubParser('public/jikji.epub');\n      const book = await getBook(parser, {\n        unzipPath: 'public/epub/jikji'\n      });\n\n      if (book) {\n        const viewers = await getViewers(parser, {\n          bookSpines: book.spines,\n          publicPath: 'epub/jikji'\n        });\n        return {\n          book,\n          viewers,\n          styleLinks: book.styles.map(style => `epub/jikji/${style.href}`)\n        };\n      }\n    } catch (error) {\n      console.log('Error', error);\n    }\n  } else {\n    // Client side render\n    const {\n      bookPath\n    } = query;\n    const {\n      books\n    } = store.getState();\n    const {\n      list\n    } = books;\n    let selectedBookInfo = list[0];\n    list.some(bookInfo => {\n      if (bookInfo.publicPath === decodeURI(String(bookPath))) {\n        selectedBookInfo = bookInfo;\n        return true;\n      }\n\n      return false;\n    });\n    const {\n      book,\n      viewers,\n      publicPath\n    } = selectedBookInfo;\n    return {\n      book,\n      viewers,\n      styleLinks: book.styles.map(style => `${publicPath}/${style.href}`)\n    };\n  }\n\n  return {};\n};\n\nexport default Viewer;","map":{"version":3,"sources":["/Users/hyuntaeeom/Projects/personal/mini-viewer/pages/viewer.tsx"],"names":["React","useState","useMemo","useEffect","useCallback","useSelector","useDispatch","styled","Layout","ViewerBottom","ViewerCalculator","ViewerHeader","ViewerPage","viewerActions","getBook","getViewers","VIEWER_WIDTH_RATIO","VIEWER_HEIGHT_RATIO","Container","div","props","styleProps","height","backgroundColor","Viewer","book","viewers","styleLinks","spines","titles","ncx","contributors","dispatch","viewerWidth","setViewerWidth","viewerHeight","setViewerHeight","nowSpineIndex","setNowSpineIndex","wholePageCount","setWholePageCount","viewerCountList","viewerPageCount","state","viewer","fontSize","widthRatio","lineHeight","viewerSetting","isAnalyzedSpine","length","isFirstPage","isLastPage","selectedSpineIndex","spineIndex","accurateCount","some","viewerCount","count","index","pageColumnOffset","columnOffset","Math","floor","window","innerWidth","innerHeight","console","log","pageCount","reduce","acc","cur","initViewerState","calculateViewerWidth","nowWidth","newRatio","Number","getInitialProps","context","req","store","query","EpubParser","require","parser","unzipPath","bookSpines","publicPath","styles","map","style","href","error","bookPath","books","getState","list","selectedBookInfo","bookInfo","decodeURI","String"],"mappings":"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","sourcesContent":["import React, {\n  useState, useMemo, useEffect, useCallback,\n} from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { NextPageContext, NextPage } from 'next';\n\nimport styled from 'styled-components';\n\nimport Layout from '../components/Layout';\nimport ViewerBottom from '../components/viewer/ViewerBottom';\nimport ViewerCalculator from '../components/viewer/ViewerCalculator';\nimport ViewerHeader from '../components/viewer/ViewerHeader';\nimport ViewerPage from '../components/viewer/ViewerPage';\n\nimport * as viewerActions from '../reducers/viewer';\n\nimport { getBook, getViewers } from '../lib/util';\n\nimport { VIEWER_WIDTH_RATIO, VIEWER_HEIGHT_RATIO } from '../constants/viewer';\n\nimport { ReducerState } from '../interfaces';\nimport { EpubBook } from '../interfaces/books';\n\nconst Container = styled.div`\n  padding: ${(100 - VIEWER_HEIGHT_RATIO) / 2}% ${(100 - VIEWER_WIDTH_RATIO) / 2}%;\n  height: ${(props) => props.styleProps.height}px;\n  background-color: ${(props) => props.styleProps.backgroundColor};\n  text-align: center;\n  overflow: hidden;\n`;\n\ninterface Props {\n  book: EpubBook;\n  viewers: string[];\n  styleLinks: string[];\n}\n\nconst Viewer: NextPage<Props> = ({ book, viewers, styleLinks }) => {\n  const {\n    spines, titles, ncx, contributors,\n  } = book;\n\n  // console.log('Book', book);\n\n  const dispatch = useDispatch();\n\n  const [viewerWidth, setViewerWidth] = useState(0);\n  const [viewerHeight, setViewerHeight] = useState(0);\n  const [nowSpineIndex, setNowSpineIndex] = useState(0);\n  const [wholePageCount, setWholePageCount] = useState(0);\n\n  const {\n    viewerCountList, viewerPageCount,\n  } = useSelector((state: ReducerState) => state.viewer);\n  const {\n    fontSize, widthRatio, lineHeight, backgroundColor,\n  } = useSelector((state: ReducerState) => state.viewerSetting);\n\n  const isAnalyzedSpine = useMemo(() => viewerCountList.length >= viewers.length, [viewerCountList, viewers]);\n  const isFirstPage = useMemo(() => viewerPageCount === 0, [viewerPageCount]);\n  const isLastPage = useMemo(() => viewerPageCount === wholePageCount, [viewerPageCount, wholePageCount]);\n  const selectedSpineIndex = useMemo(() => {\n    let spineIndex = 0;\n    let accurateCount = 0;\n    viewerCountList.some((viewerCount) => {\n      if (accurateCount + viewerCount.count > viewerPageCount) {\n        spineIndex = viewerCount.index;\n        return true;\n      }\n      accurateCount += viewerCount.count;\n      return false;\n    });\n    return spineIndex;\n  }, [viewerPageCount, viewerCountList]);\n  const pageColumnOffset = useMemo(() => {\n    let columnOffset = viewerPageCount;\n    viewerCountList.some((viewerCount, index) => {\n      if (index < nowSpineIndex) {\n        columnOffset -= (viewerCount.count);\n        return false;\n      }\n      return true;\n    });\n    return columnOffset;\n  }, [viewerCountList, viewerPageCount, nowSpineIndex]);\n\n  useEffect(() => {\n    setViewerWidth(Math.floor(window.innerWidth * (VIEWER_WIDTH_RATIO / 100)));\n    setViewerHeight(Math.floor(window.innerHeight * (VIEWER_HEIGHT_RATIO / 100)));\n  }, []);\n\n  useEffect(() => {\n    console.log('Now spine index', selectedSpineIndex);\n    setNowSpineIndex(selectedSpineIndex);\n  }, [selectedSpineIndex]);\n\n  useEffect(() => {\n    if (isAnalyzedSpine) {\n      console.log('Set whole page count');\n      const pageCount = viewerCountList.reduce((acc, cur) => acc + cur.count, 0);\n      setWholePageCount(pageCount - 1);\n    }\n  }, [isAnalyzedSpine, viewerCountList]);\n\n  useEffect(() => {\n    console.log('New style');\n    dispatch(viewerActions.initViewerState());\n  }, [dispatch, fontSize, lineHeight, widthRatio]);\n\n  const calculateViewerWidth = useCallback(\n    (nowWidth, newRatio) => Math.floor(Number(nowWidth) * (Number(newRatio) / 100)),\n    [],\n  );\n\n  return (\n    <Layout\n      styleLinks={styleLinks}\n    >\n      <ViewerHeader\n        titles={titles}\n        authors={contributors}\n        ncxItem={ncx}\n      />\n      <Container\n        styleProps={{\n          height: viewerHeight,\n          backgroundColor,\n        }}\n      >\n        {isAnalyzedSpine\n        && (\n        <ViewerPage\n          viewerWidth={calculateViewerWidth(viewerWidth, widthRatio)}\n          viewerHeight={viewerHeight}\n          pageColumnOffset={pageColumnOffset}\n          viewerSpine={viewers[nowSpineIndex]}\n          isFirstPage={isFirstPage}\n          isLastPage={isLastPage}\n        />\n        )}\n        {!isAnalyzedSpine\n        && (\n        <ViewerCalculator\n          viewerWidth={calculateViewerWidth(viewerWidth, widthRatio)}\n          viewerHeight={viewerHeight}\n          spines={spines}\n          viewers={viewers}\n        />\n        )}\n      </Container>\n      <ViewerBottom\n        sliderMaxValue={wholePageCount}\n      />\n    </Layout>\n  );\n};\n\n// eslint-disable-next-line @typescript-eslint/unbound-method\nViewer.getInitialProps = async (context: NextPageContext<any>): Promise<any> => {\n  const { req, store, query } = context;\n\n  if (req) {\n    // Server side render\n    const { EpubParser } = require('@ridi/epub-parser');\n    try {\n      const parser = new EpubParser('public/jikji.epub');\n      const book: EpubBook = await getBook(parser, {\n        unzipPath: 'public/epub/jikji',\n      });\n\n      if (book) {\n        const viewers = await getViewers(parser, {\n          bookSpines: book.spines,\n          publicPath: 'epub/jikji',\n        });\n\n        return {\n          book,\n          viewers,\n          styleLinks: book.styles.map((style) => `epub/jikji/${style.href}`),\n        };\n      }\n    } catch (error) {\n      console.log('Error', error);\n    }\n  } else {\n    // Client side render\n    const { bookPath } = query;\n    const { books }: ReducerState = store.getState();\n    const { list } = books;\n\n    let selectedBookInfo = list[0];\n\n    list.some((bookInfo) => {\n      if (bookInfo.publicPath === decodeURI(String(bookPath))) {\n        selectedBookInfo = bookInfo;\n        return true;\n      }\n      return false;\n    });\n\n    const { book, viewers, publicPath } = selectedBookInfo;\n\n    return {\n      book,\n      viewers,\n      styleLinks: book.styles.map((style) => `${publicPath}/${style.href}`),\n    };\n  }\n\n  return {};\n};\n\nexport default Viewer;\n"]},"metadata":{},"sourceType":"module"}