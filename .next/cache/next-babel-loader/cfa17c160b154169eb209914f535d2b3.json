{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useCallback, useState } from 'react';\nimport styled from 'styled-components';\nimport debounce from 'lodash.debounce';\nimport { subColor } from '../../styles';\nimport { ViewerSettingItem, ViewerSettingLabel, ViewerSettingValue } from '../../styles/viewer';\nvar Controller = styled.div.withConfig({\n  displayName: \"ViewerSettingCountItem__Controller\",\n  componentId: \"sc-1rnr8mc-0\"\n})([\"display:flex;width:30%;margin:auto 0 auto auto;border:1px solid \", \";border-radius:1em;padding-left:.3em;padding-right:.3em;\"], subColor);\nvar MinusButton = styled.div.withConfig({\n  displayName: \"ViewerSettingCountItem__MinusButton\",\n  componentId: \"sc-1rnr8mc-1\"\n})([\"width:50%;cursor:pointer;border-right:1px solid \", \"\"], subColor);\nvar PlusButton = styled.div.withConfig({\n  displayName: \"ViewerSettingCountItem__PlusButton\",\n  componentId: \"sc-1rnr8mc-2\"\n})([\"width:50%;cursor:pointer;\"]);\n\nvar ViewerSettingCountItem = function ViewerSettingCountItem(_ref) {\n  var label = _ref.label,\n      value = _ref.value,\n      valueUnit = _ref.valueUnit,\n      minValue = _ref.minValue,\n      maxValue = _ref.maxValue,\n      action = _ref.action;\n\n  var _useState = useState(value),\n      showValue = _useState[0],\n      setShowValue = _useState[1];\n\n  var isIntegerNumber = useCallback(function (number) {\n    return number % 1 === 0;\n  }, []);\n  var debounceAction = useCallback(debounce(action, 400), [action]);\n  var countUpValue = useCallback(function () {\n    var expectedValue = Number(showValue) + valueUnit;\n\n    if (expectedValue <= maxValue) {\n      var newValue = isIntegerNumber(expectedValue) ? expectedValue : expectedValue.toFixed(1);\n      setShowValue(newValue);\n      debounceAction(newValue);\n    } else {\n      alert('변경 할 수 있는 최대값 입니다.');\n    }\n  }, [debounceAction, showValue, maxValue, valueUnit, isIntegerNumber]);\n  var countDownValue = useCallback(function () {\n    var expectedValue = Number(showValue) - valueUnit;\n\n    if (expectedValue >= minValue) {\n      var newValue = isIntegerNumber(expectedValue) ? expectedValue : expectedValue.toFixed(1);\n      setShowValue(newValue);\n      debounceAction(newValue);\n      ;\n    } else {\n      alert('변경 할 수 있는 최소값 입니다.');\n    }\n  }, [debounceAction, showValue, minValue, valueUnit, isIntegerNumber]);\n  return __jsx(ViewerSettingItem, null, __jsx(ViewerSettingLabel, null, label), __jsx(ViewerSettingValue, null, showValue), __jsx(Controller, null, __jsx(MinusButton, {\n    onClick: countDownValue\n  }, \"-\"), __jsx(PlusButton, {\n    onClick: countUpValue\n  }, \"+\")));\n};\n\nexport default ViewerSettingCountItem;","map":null,"metadata":{},"sourceType":"module"}