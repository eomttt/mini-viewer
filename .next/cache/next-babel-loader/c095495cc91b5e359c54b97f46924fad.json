{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nvar _jsxFileName = \"/Users/hyuntaeeom/Projects/personal/mini-viewer/pages/viewer.tsx\";\nvar __jsx = React.createElement;\nimport React, { useState, useMemo, useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport debounce from 'lodash.debounce';\nimport styled from 'styled-components';\nimport Layout from '../components/Layout';\nimport ViewerBottom from '../components/viewer/ViewerBottom';\nimport ViewerCount from '../components/viewer/ViewerCount';\nimport ViewerHeader from '../components/viewer/ViewerHeader';\nimport ViewerPage from '../components/viewer/ViewerPage';\nimport * as viewerActions from '../reducers/viewer';\nimport { VIEWER_WIDTH_RATIO, VIEWER_HEIGHT_RATIO } from '../constants/viewer';\nvar Container = styled.div.withConfig({\n  displayName: \"viewer__Container\",\n  componentId: \"sc-1iklkx5-0\"\n})([\"padding:\", \"% \", \"%;height:\", \"px;background-color:\", \";overflow:hidden;\"], (100 - VIEWER_HEIGHT_RATIO) / 2, (100 - VIEWER_WIDTH_RATIO) / 2, function (props) {\n  return props.styleProps.height;\n}, function (props) {\n  return props.styleProps.backgroundColor;\n});\n\nvar Viewer = function Viewer(_ref) {\n  var book = _ref.book,\n      viewerSpines = _ref.viewerSpines,\n      styleLinks = _ref.styleLinks;\n  var spines = book.spines,\n      titles = book.titles,\n      ncx = book.ncx;\n  var dispatch = useDispatch();\n\n  var _useState = useState(0),\n      viewerWidth = _useState[0],\n      setViewerWidth = _useState[1];\n\n  var _useState2 = useState(0),\n      viewerHeight = _useState2[0],\n      setViewerHeight = _useState2[1];\n\n  var _useState3 = useState(0),\n      nowSpineIndex = _useState3[0],\n      setNowSpineIndex = _useState3[1];\n\n  var _useState4 = useState(0),\n      wholePageCount = _useState4[0],\n      setWholePageCount = _useState4[1];\n\n  var _useSelector = useSelector(function (state) {\n    return state.viewer;\n  }),\n      viewerCountList = _useSelector.viewerCountList,\n      viewerPageCount = _useSelector.viewerPageCount;\n\n  var _useSelector2 = useSelector(function (state) {\n    return state.viewerSetting;\n  }),\n      fontSize = _useSelector2.fontSize,\n      padding = _useSelector2.padding,\n      lineHeight = _useSelector2.lineHeight,\n      backgroundColor = _useSelector2.backgroundColor;\n\n  var isAnalyzedSpine = useMemo(function () {\n    return viewerCountList.length >= viewerSpines.length;\n  }, [viewerCountList, viewerSpines]);\n  var isFirstPage = useMemo(function () {\n    return viewerPageCount === 0;\n  }, [viewerPageCount]);\n  var isLastPage = useMemo(function () {\n    return viewerPageCount === wholePageCount;\n  }, [viewerPageCount, wholePageCount]);\n  var selectedSpineIndex = useMemo(function () {\n    var spineIndex = 0;\n    var accurateCount = 0;\n    viewerCountList.some(function (viewerCount) {\n      if (accurateCount + viewerCount.count > viewerPageCount) {\n        spineIndex = viewerCount.index;\n        return true;\n      }\n\n      accurateCount += viewerCount.count;\n      return false;\n    });\n    return spineIndex;\n  }, [viewerPageCount, viewerCountList]);\n  var pageColumnOffset = useMemo(function () {\n    var columnOffset = viewerPageCount;\n    viewerCountList.some(function (viewerCount, index) {\n      if (index < nowSpineIndex) {\n        columnOffset -= viewerCount.count;\n        return false;\n      }\n\n      return true;\n    });\n    return columnOffset;\n  }, [viewerCountList, viewerPageCount, nowSpineIndex]);\n  useEffect(function () {\n    setViewerWidth(Math.floor(window.innerWidth * (VIEWER_WIDTH_RATIO / 100)));\n    setViewerHeight(Math.floor(window.innerHeight * (VIEWER_HEIGHT_RATIO / 100)));\n  }, []);\n  useEffect(function () {\n    console.log('Now spine index', selectedSpineIndex);\n    setNowSpineIndex(selectedSpineIndex);\n  }, [selectedSpineIndex]);\n  useEffect(function () {\n    if (isAnalyzedSpine) {\n      var pageCount = viewerCountList.reduce(function (acc, cur) {\n        return acc + cur.count;\n      }, 0);\n      setWholePageCount(pageCount - 1);\n    }\n  }, [isAnalyzedSpine, viewerCountList]);\n  useEffect(debounce(function () {\n    console.log('Redrawing page');\n    dispatch(viewerActions.initViewerState()); // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, 1000), [fontSize, padding, lineHeight]);\n  return __jsx(Layout, {\n    styleLinks: styleLinks,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104\n    },\n    __self: this\n  }, __jsx(ViewerHeader, {\n    titles: titles,\n    ncxItem: ncx,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107\n    },\n    __self: this\n  }), __jsx(Container, {\n    styleProps: {\n      height: viewerHeight,\n      backgroundColor: backgroundColor\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111\n    },\n    __self: this\n  }, isAnalyzedSpine && __jsx(ViewerPage, {\n    viewerWidth: viewerWidth,\n    viewerHeight: viewerHeight,\n    pageColumnOffset: pageColumnOffset,\n    viewerSpine: viewerSpines[nowSpineIndex],\n    isFirstPage: isFirstPage,\n    isLastPage: isLastPage,\n    viewerStyle: {\n      fontSize: fontSize,\n      padding: padding,\n      lineHeight: lineHeight\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119\n    },\n    __self: this\n  }), !isAnalyzedSpine && viewerSpines.map(function (viewerSpine, index) {\n    return __jsx(ViewerCount, {\n      key: viewerSpine,\n      viewerWidth: viewerWidth,\n      viewerHeight: viewerHeight,\n      spine: spines[index],\n      viewerSpine: viewerSpine,\n      viewerSpineIndex: index,\n      viewerStyle: {\n        fontSize: fontSize,\n        padding: padding,\n        lineHeight: lineHeight\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135\n      },\n      __self: this\n    });\n  })), __jsx(ViewerBottom, {\n    sliderMaxValue: wholePageCount,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150\n    },\n    __self: this\n  }));\n}; // eslint-disable-next-line @typescript-eslint/unbound-method\n\n\nViewer.getInitialProps = function _callee(context) {\n  var req, _require, EpubParser, parser, book, viewerSpines;\n\n  return _regeneratorRuntime.async(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          req = context.req;\n\n          if (!req) {\n            _context.next = 17;\n            break;\n          }\n\n          _require = require('@ridi/epub-parser'), EpubParser = _require.EpubParser;\n          _context.prev = 3;\n          parser = new EpubParser('public/jikji.epub');\n          _context.next = 7;\n          return _regeneratorRuntime.awrap(parser.parse({\n            validatePackage: true,\n            parseStyle: false,\n            unzipPath: 'public/epub/jikji'\n          }));\n\n        case 7:\n          book = _context.sent;\n          _context.next = 10;\n          return _regeneratorRuntime.awrap(parser.readItems(book.spines, {\n            force: true,\n            extractBody: true,\n            serializedAnchor: true,\n            ignoreScript: true,\n            basePath: 'epub/jikji'\n          }));\n\n        case 10:\n          viewerSpines = _context.sent;\n          return _context.abrupt(\"return\", {\n            book: book,\n            viewerSpines: viewerSpines,\n            styleLinks: book.styles.map(function (style) {\n              return \"epub/jikji/\".concat(style.href);\n            })\n          });\n\n        case 14:\n          _context.prev = 14;\n          _context.t0 = _context[\"catch\"](3);\n          console.log('Error', _context.t0);\n\n        case 17:\n          return _context.abrupt(\"return\", {});\n\n        case 18:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, [[3, 14]], Promise);\n};\n\nexport default Viewer;","map":{"version":3,"sources":["/Users/hyuntaeeom/Projects/personal/mini-viewer/pages/viewer.tsx"],"names":["React","useState","useMemo","useEffect","useSelector","useDispatch","debounce","styled","Layout","ViewerBottom","ViewerCount","ViewerHeader","ViewerPage","viewerActions","VIEWER_WIDTH_RATIO","VIEWER_HEIGHT_RATIO","Container","div","props","styleProps","height","backgroundColor","Viewer","book","viewerSpines","styleLinks","spines","titles","ncx","dispatch","viewerWidth","setViewerWidth","viewerHeight","setViewerHeight","nowSpineIndex","setNowSpineIndex","wholePageCount","setWholePageCount","state","viewer","viewerCountList","viewerPageCount","viewerSetting","fontSize","padding","lineHeight","isAnalyzedSpine","length","isFirstPage","isLastPage","selectedSpineIndex","spineIndex","accurateCount","some","viewerCount","count","index","pageColumnOffset","columnOffset","Math","floor","window","innerWidth","innerHeight","console","log","pageCount","reduce","acc","cur","initViewerState","map","viewerSpine","getInitialProps","context","req","require","EpubParser","parser","parse","validatePackage","parseStyle","unzipPath","readItems","force","extractBody","serializedAnchor","ignoreScript","basePath","styles","style","href"],"mappings":"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","sourcesContent":["import React, {\n  useState, useMemo, useEffect,\n} from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { NextPageContext, NextPage } from 'next';\n\nimport debounce from 'lodash.debounce';\n\nimport styled from 'styled-components';\n\nimport Layout from '../components/Layout';\nimport ViewerBottom from '../components/viewer/ViewerBottom';\nimport ViewerCount from '../components/viewer/ViewerCount';\nimport ViewerHeader from '../components/viewer/ViewerHeader';\nimport ViewerPage from '../components/viewer/ViewerPage';\n\nimport * as viewerActions from '../reducers/viewer';\n\nimport { VIEWER_WIDTH_RATIO, VIEWER_HEIGHT_RATIO } from '../constants/viewer';\n\nimport { ReducerState } from '../interfaces';\nimport { EpubBook } from '../interfaces/books';\n\nconst Container = styled.div`\n  padding: ${(100 - VIEWER_HEIGHT_RATIO) / 2}% ${(100 - VIEWER_WIDTH_RATIO) / 2}%;\n  height: ${(props) => props.styleProps.height}px;\n  background-color: ${(props) => props.styleProps.backgroundColor};\n  overflow: hidden;\n`;\n\ninterface Props {\n  book: EpubBook;\n  viewerSpines: string[];\n  styleLinks: string[];\n}\n\nconst Viewer: NextPage<Props> = ({ book, viewerSpines, styleLinks }) => {\n  const { spines, titles, ncx } = book;\n\n  const dispatch = useDispatch();\n\n  const [viewerWidth, setViewerWidth] = useState(0);\n  const [viewerHeight, setViewerHeight] = useState(0);\n  const [nowSpineIndex, setNowSpineIndex] = useState(0);\n  const [wholePageCount, setWholePageCount] = useState(0);\n\n  const { viewerCountList, viewerPageCount } = useSelector((state: ReducerState) => state.viewer);\n  const {\n    fontSize, padding, lineHeight, backgroundColor,\n  } = useSelector((state: ReducerState) => state.viewerSetting);\n\n  const isAnalyzedSpine = useMemo(() => viewerCountList.length >= viewerSpines.length, [viewerCountList, viewerSpines]);\n  const isFirstPage = useMemo(() => viewerPageCount === 0, [viewerPageCount]);\n  const isLastPage = useMemo(() => viewerPageCount === wholePageCount, [viewerPageCount, wholePageCount]);\n  const selectedSpineIndex = useMemo(() => {\n    let spineIndex = 0;\n    let accurateCount = 0;\n    viewerCountList.some((viewerCount) => {\n      if (accurateCount + viewerCount.count > viewerPageCount) {\n        spineIndex = viewerCount.index;\n        return true;\n      }\n      accurateCount += viewerCount.count;\n      return false;\n    });\n    return spineIndex;\n  }, [viewerPageCount, viewerCountList]);\n  const pageColumnOffset = useMemo(() => {\n    let columnOffset = viewerPageCount;\n    viewerCountList.some((viewerCount, index) => {\n      if (index < nowSpineIndex) {\n        columnOffset -= (viewerCount.count);\n        return false;\n      }\n      return true;\n    });\n    return columnOffset;\n  }, [viewerCountList, viewerPageCount, nowSpineIndex]);\n\n  useEffect(() => {\n    setViewerWidth(Math.floor(window.innerWidth * (VIEWER_WIDTH_RATIO / 100)));\n    setViewerHeight(Math.floor(window.innerHeight * (VIEWER_HEIGHT_RATIO / 100)));\n  }, []);\n\n  useEffect(() => {\n    console.log('Now spine index', selectedSpineIndex);\n    setNowSpineIndex(selectedSpineIndex);\n  }, [selectedSpineIndex]);\n\n  useEffect(() => {\n    if (isAnalyzedSpine) {\n      const pageCount = viewerCountList.reduce((acc, cur) => acc + cur.count, 0);\n      setWholePageCount(pageCount - 1);\n    }\n  }, [isAnalyzedSpine, viewerCountList]);\n\n  useEffect(debounce(() => {\n    console.log('Redrawing page');\n    dispatch(viewerActions.initViewerState());\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, 1000), [fontSize, padding, lineHeight]);\n\n  return (\n    <Layout\n      styleLinks={styleLinks}\n    >\n      <ViewerHeader\n        titles={titles}\n        ncxItem={ncx}\n      />\n      <Container\n        styleProps={{\n          height: viewerHeight,\n          backgroundColor,\n        }}\n      >\n        {isAnalyzedSpine\n        && (\n        <ViewerPage\n          viewerWidth={viewerWidth}\n          viewerHeight={viewerHeight}\n          pageColumnOffset={pageColumnOffset}\n          viewerSpine={viewerSpines[nowSpineIndex]}\n          isFirstPage={isFirstPage}\n          isLastPage={isLastPage}\n          viewerStyle={{\n            fontSize,\n            padding,\n            lineHeight,\n          }}\n        />\n        )}\n        {!isAnalyzedSpine\n        && viewerSpines.map((viewerSpine, index) => (\n          <ViewerCount\n            key={viewerSpine}\n            viewerWidth={viewerWidth}\n            viewerHeight={viewerHeight}\n            spine={spines[index]}\n            viewerSpine={viewerSpine}\n            viewerSpineIndex={index}\n            viewerStyle={{\n              fontSize,\n              padding,\n              lineHeight,\n            }}\n          />\n        ))}\n      </Container>\n      <ViewerBottom\n        sliderMaxValue={wholePageCount}\n      />\n    </Layout>\n  );\n};\n\n// eslint-disable-next-line @typescript-eslint/unbound-method\nViewer.getInitialProps = async (context: NextPageContext<any>): Promise<any> => {\n  const { req } = context;\n  if (req) {\n    const { EpubParser } = require('@ridi/epub-parser');\n    try {\n      const parser = new EpubParser('public/jikji.epub');\n      const book: EpubBook = await parser.parse({\n        validatePackage: true,\n        parseStyle: false,\n        unzipPath: 'public/epub/jikji',\n      });\n      const viewerSpines = await parser.readItems(book.spines, {\n        force: true,\n        extractBody: true,\n        serializedAnchor: true,\n        ignoreScript: true,\n        basePath: 'epub/jikji',\n      });\n\n      return {\n        book,\n        viewerSpines,\n        styleLinks: book.styles.map((style) => `epub/jikji/${style.href}`),\n      };\n    } catch (error) {\n      console.log('Error', error);\n    }\n  }\n\n\n  return {};\n};\n\nexport default Viewer;\n"]},"metadata":{},"sourceType":"module"}