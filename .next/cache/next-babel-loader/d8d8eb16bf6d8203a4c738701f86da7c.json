{"ast":null,"code":"var _jsxFileName = \"/Users/hyuntaeeom/Projects/personal/mini-viewer/components/viewer/ViewerPage.tsx\";\nvar __jsx = React.createElement;\nimport React, { useCallback, useState, useEffect, useMemo } from 'react';\nimport { useSelector } from 'react-redux';\nimport Viewer from './Viewer';\nimport ViewerCount from './ViewerCount';\nimport { VIEWER_WIDTH_RATIO, VIEWER_HEIGHT_RATIO } from '../../constants/viewer';\n\nconst ViewerPage = ({\n  spines,\n  viewerSpines\n}) => {\n  const {\n    0: viewerWidth,\n    1: setViewerWidth\n  } = useState(0);\n  const {\n    0: viewerHeight,\n    1: setViewerHeight\n  } = useState(0);\n  const {\n    0: spineColumnCountList,\n    1: setSpineColumnCountList\n  } = useState([]);\n  const {\n    0: nowSpineIndex,\n    1: setNowSpineIndex\n  } = useState(0);\n  const {\n    viewerCountList\n  } = useSelector(state => state.viewer);\n  const isAnalizedSpine = useMemo(() => viewerCountList.length > 0, [viewerCountList]);\n  useEffect(() => {\n    setViewerWidth(Math.floor(window.innerWidth * (VIEWER_WIDTH_RATIO / 100)));\n    setViewerHeight(Math.floor(window.innerHeight * (VIEWER_HEIGHT_RATIO / 100)));\n  }, []);\n  const setNextSpine = useCallback(() => {\n    console.log('Set next spine', nowSpineIndex);\n    setNowSpineIndex(nowSpineIndex + 1);\n  }, [nowSpineIndex]);\n  const setPrevSpine = useCallback(() => {\n    console.log('Set prev spine', nowSpineIndex);\n    setNowSpineIndex(nowSpineIndex - 1);\n  }, [nowSpineIndex]);\n  return __jsx(React.Fragment, null, isAnalizedSpine && __jsx(Viewer, {\n    viewerWidth: viewerWidth,\n    viewerHeight: viewerHeight,\n    wholeColumnCount: viewerCountList[nowSpineIndex].count,\n    nowSpineIndex: nowSpineIndex,\n    spine: spines[nowSpineIndex],\n    viewerSpine: viewerSpines[nowSpineIndex],\n    setNextSpine: setNextSpine,\n    setPrevSpine: setPrevSpine,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49\n    },\n    __self: this\n  }), viewerSpines.map((viewerSpine, index) => __jsx(ViewerCount, {\n    key: viewerSpine,\n    viewerSpine: viewerSpine,\n    viewerSpineIndex: index,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64\n    },\n    __self: this\n  })));\n};\n\nexport default ViewerPage;","map":{"version":3,"sources":["/Users/hyuntaeeom/Projects/personal/mini-viewer/components/viewer/ViewerPage.tsx"],"names":["React","useCallback","useState","useEffect","useMemo","useSelector","Viewer","ViewerCount","VIEWER_WIDTH_RATIO","VIEWER_HEIGHT_RATIO","ViewerPage","spines","viewerSpines","viewerWidth","setViewerWidth","viewerHeight","setViewerHeight","spineColumnCountList","setSpineColumnCountList","nowSpineIndex","setNowSpineIndex","viewerCountList","state","viewer","isAnalizedSpine","length","Math","floor","window","innerWidth","innerHeight","setNextSpine","console","log","setPrevSpine","count","map","viewerSpine","index"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,WAAhB,EAA6BC,QAA7B,EAAuCC,SAAvC,EAAkDC,OAAlD,QAAiE,OAAjE;AACA,SAASC,WAAT,QAA4B,aAA5B;AAEA,OAAOC,MAAP,MAAmB,UAAnB;AACA,OAAOC,WAAP,MAAwB,eAAxB;AAKA,SAASC,kBAAT,EAA6BC,mBAA7B,QAAwD,wBAAxD;;AAQA,MAAMC,UAA0C,GAAG,CAAC;AAAEC,EAAAA,MAAF;AAAUC,EAAAA;AAAV,CAAD,KAA8B;AAC/E,QAAM;AAAA,OAACC,WAAD;AAAA,OAAcC;AAAd,MAAgCZ,QAAQ,CAAC,CAAD,CAA9C;AACA,QAAM;AAAA,OAACa,YAAD;AAAA,OAAeC;AAAf,MAAkCd,QAAQ,CAAC,CAAD,CAAhD;AAEA,QAAM;AAAA,OAACe,oBAAD;AAAA,OAAuBC;AAAvB,MAAkDhB,QAAQ,CAAC,EAAD,CAAhE;AACA,QAAM;AAAA,OAACiB,aAAD;AAAA,OAAgBC;AAAhB,MAAoClB,QAAQ,CAAC,CAAD,CAAlD;AAEA,QAAM;AAAEmB,IAAAA;AAAF,MAAsBhB,WAAW,CAAEiB,KAAD,IAAyBA,KAAK,CAACC,MAAhC,CAAvC;AAEA,QAAMC,eAAe,GAAGpB,OAAO,CAAC,MAAMiB,eAAe,CAACI,MAAhB,GAAyB,CAAhC,EAAmC,CAACJ,eAAD,CAAnC,CAA/B;AAEAlB,EAAAA,SAAS,CAAC,MAAM;AACdW,IAAAA,cAAc,CAACY,IAAI,CAACC,KAAL,CAAWC,MAAM,CAACC,UAAP,IAAqBrB,kBAAkB,GAAG,GAA1C,CAAX,CAAD,CAAd;AACAQ,IAAAA,eAAe,CAACU,IAAI,CAACC,KAAL,CAAWC,MAAM,CAACE,WAAP,IAAsBrB,mBAAmB,GAAG,GAA5C,CAAX,CAAD,CAAf;AACD,GAHQ,EAGN,EAHM,CAAT;AAKA,QAAMsB,YAAY,GAAG9B,WAAW,CAAC,MAAM;AACrC+B,IAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ,EAA8Bd,aAA9B;AACAC,IAAAA,gBAAgB,CAACD,aAAa,GAAG,CAAjB,CAAhB;AACD,GAH+B,EAG7B,CAACA,aAAD,CAH6B,CAAhC;AAKA,QAAMe,YAAY,GAAGjC,WAAW,CAAC,MAAM;AACrC+B,IAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ,EAA8Bd,aAA9B;AACAC,IAAAA,gBAAgB,CAACD,aAAa,GAAG,CAAjB,CAAhB;AACD,GAH+B,EAG7B,CAACA,aAAD,CAH6B,CAAhC;AAKA,SACE,4BAEEK,eAAe,IAEf,MAAC,MAAD;AACE,IAAA,WAAW,EAAEX,WADf;AAEE,IAAA,YAAY,EAAEE,YAFhB;AAGE,IAAA,gBAAgB,EAAEM,eAAe,CAACF,aAAD,CAAf,CAA+BgB,KAHnD;AAIE,IAAA,aAAa,EAAEhB,aAJjB;AAKE,IAAA,KAAK,EAAER,MAAM,CAACQ,aAAD,CALf;AAME,IAAA,WAAW,EAAEP,YAAY,CAACO,aAAD,CAN3B;AAOE,IAAA,YAAY,EAAEY,YAPhB;AAQE,IAAA,YAAY,EAAEG,YARhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAJF,EAkBItB,YAAY,CAACwB,GAAb,CAAiB,CAACC,WAAD,EAAcC,KAAd,KACf,MAAC,WAAD;AACE,IAAA,GAAG,EAAED,WADP;AAEE,IAAA,WAAW,EAAEA,WAFf;AAGE,IAAA,gBAAgB,EAAEC,KAHpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CAlBJ,CADF;AA6BD,CAvDD;;AAyDA,eAAe5B,UAAf","sourcesContent":["import React, { useCallback, useState, useEffect, useMemo } from 'react';\nimport { useSelector } from 'react-redux';\n\nimport Viewer from './Viewer';\nimport ViewerCount from './ViewerCount';\n\nimport { ReducerState } from '../../interfaces';\nimport { EpubSpineItem } from '../../interfaces/books';\n\nimport { VIEWER_WIDTH_RATIO, VIEWER_HEIGHT_RATIO } from '../../constants/viewer';\n\n\ninterface Props {\n  spines: EpubSpineItem[];\n  viewerSpines: string[];\n}\n\nconst ViewerPage: React.FunctionComponent<Props> = ({ spines, viewerSpines }) => {\n  const [viewerWidth, setViewerWidth] = useState(0);\n  const [viewerHeight, setViewerHeight] = useState(0);\n\n  const [spineColumnCountList, setSpineColumnCountList] = useState([]);\n  const [nowSpineIndex, setNowSpineIndex] = useState(0);\n\n  const { viewerCountList } = useSelector((state: ReducerState) => state.viewer);\n\n  const isAnalizedSpine = useMemo(() => viewerCountList.length > 0, [viewerCountList]);\n\n  useEffect(() => {\n    setViewerWidth(Math.floor(window.innerWidth * (VIEWER_WIDTH_RATIO / 100)));\n    setViewerHeight(Math.floor(window.innerHeight * (VIEWER_HEIGHT_RATIO / 100)));\n  }, []);\n\n  const setNextSpine = useCallback(() => {\n    console.log('Set next spine', nowSpineIndex);\n    setNowSpineIndex(nowSpineIndex + 1);\n  }, [nowSpineIndex]);\n\n  const setPrevSpine = useCallback(() => {\n    console.log('Set prev spine', nowSpineIndex);\n    setNowSpineIndex(nowSpineIndex - 1);\n  }, [nowSpineIndex]);\n\n  return (\n    <>\n      {\n      isAnalizedSpine\n      && (\n      <Viewer\n        viewerWidth={viewerWidth}\n        viewerHeight={viewerHeight}\n        wholeColumnCount={viewerCountList[nowSpineIndex].count}\n        nowSpineIndex={nowSpineIndex}\n        spine={spines[nowSpineIndex]}\n        viewerSpine={viewerSpines[nowSpineIndex]}\n        setNextSpine={setNextSpine}\n        setPrevSpine={setPrevSpine}\n      />\n      )\n    }\n\n      {\n        viewerSpines.map((viewerSpine, index) => (\n          <ViewerCount\n            key={viewerSpine}\n            viewerSpine={viewerSpine}\n            viewerSpineIndex={index}\n          />\n        ))\n      }\n    </>\n  );\n};\n\nexport default ViewerPage;\n"]},"metadata":{},"sourceType":"module"}