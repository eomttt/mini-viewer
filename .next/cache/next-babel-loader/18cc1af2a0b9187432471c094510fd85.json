{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nvar _jsxFileName = \"/Users/hyuntaeeom/Projects/personal/mini-viewer/pages/index.tsx\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport styled from 'styled-components';\nvar Container = styled.div.withConfig({\n  displayName: \"pages__Container\",\n  componentId: \"sc-18mi7mi-0\"\n})([\"color:blue\"]);\n\nvar Home = function Home(_ref) {\n  var books = _ref.books;\n  console.log('AAAA', books);\n  return __jsx(Container, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19\n    },\n    __self: this\n  }, \"HOME\");\n}; // eslint-disable-next-line @typescript-eslint/unbound-method\n\n\nHome.getInitialProps = function _callee(context) {\n  var req, fs, _require, EpubParser, books, files, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, file, fileName, parser, book;\n\n  return _regeneratorRuntime.async(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          req = context.req;\n\n          if (!req) {\n            _context.next = 39;\n            break;\n          }\n\n          fs = require('fs');\n          _require = require('@ridi/epub-parser'), EpubParser = _require.EpubParser;\n          books = [];\n          files = fs.readdirSync('public/'); // eslint-disable-next-line no-restricted-syntax\n\n          _iteratorNormalCompletion = true;\n          _didIteratorError = false;\n          _iteratorError = undefined;\n          _context.prev = 9;\n          _iterator = files[Symbol.iterator]();\n\n        case 11:\n          if (_iteratorNormalCompletion = (_step = _iterator.next()).done) {\n            _context.next = 24;\n            break;\n          }\n\n          file = _step.value;\n          console.log('AAA', file);\n\n          if (!file.includes('.epub')) {\n            _context.next = 21;\n            break;\n          }\n\n          fileName = file.split('.epub')[0];\n          parser = new EpubParser(file); // eslint-disable-next-line no-await-in-loop\n\n          _context.next = 19;\n          return _regeneratorRuntime.awrap(parser.parse({\n            validatePackage: true,\n            parseStyle: false,\n            unzipPath: \"public/epub/\".concat(fileName)\n          }));\n\n        case 19:\n          book = _context.sent;\n          books.push(book);\n\n        case 21:\n          _iteratorNormalCompletion = true;\n          _context.next = 11;\n          break;\n\n        case 24:\n          _context.next = 30;\n          break;\n\n        case 26:\n          _context.prev = 26;\n          _context.t0 = _context[\"catch\"](9);\n          _didIteratorError = true;\n          _iteratorError = _context.t0;\n\n        case 30:\n          _context.prev = 30;\n          _context.prev = 31;\n\n          if (!_iteratorNormalCompletion && _iterator[\"return\"] != null) {\n            _iterator[\"return\"]();\n          }\n\n        case 33:\n          _context.prev = 33;\n\n          if (!_didIteratorError) {\n            _context.next = 36;\n            break;\n          }\n\n          throw _iteratorError;\n\n        case 36:\n          return _context.finish(33);\n\n        case 37:\n          return _context.finish(30);\n\n        case 38:\n          return _context.abrupt(\"return\", {\n            books: books\n          });\n\n        case 39:\n          return _context.abrupt(\"return\", {});\n\n        case 40:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, [[9, 26, 30, 38], [31,, 33, 37]], Promise);\n};\n\nexport default Home;","map":{"version":3,"sources":["/Users/hyuntaeeom/Projects/personal/mini-viewer/pages/index.tsx"],"names":["React","styled","Container","div","Home","books","console","log","getInitialProps","context","req","fs","require","EpubParser","files","readdirSync","file","includes","fileName","split","parser","parse","validatePackage","parseStyle","unzipPath","book","push"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAGA,OAAOC,MAAP,MAAmB,mBAAnB;AAGA,IAAMC,SAAS,GAAGD,MAAM,CAACE,GAAV;AAAA;AAAA;AAAA,kBAAf;;AAQA,IAAMC,IAAqB,GAAG,SAAxBA,IAAwB,OAAe;AAAA,MAAZC,KAAY,QAAZA,KAAY;AAC3CC,EAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ,EAAoBF,KAApB;AAEA,SACE,MAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAKD,CARD,C,CASA;;;AACAD,IAAI,CAACI,eAAL,GAAuB,iBAAOC,OAAP;AAAA;;AAAA;AAAA;AAAA;AAAA;AACbC,UAAAA,GADa,GACLD,OADK,CACbC,GADa;;AAAA,eAEjBA,GAFiB;AAAA;AAAA;AAAA;;AAGbC,UAAAA,EAHa,GAGRC,OAAO,CAAC,IAAD,CAHC;AAAA,qBAIIA,OAAO,CAAC,mBAAD,CAJX,EAIXC,UAJW,YAIXA,UAJW;AAKbR,UAAAA,KALa,GAKO,EALP;AAObS,UAAAA,KAPa,GAOLH,EAAE,CAACI,WAAH,CAAe,SAAf,CAPK,EAQnB;;AARmB;AAAA;AAAA;AAAA;AAAA,sBASAD,KATA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AASRE,UAAAA,IATQ;AAUjBV,UAAAA,OAAO,CAACC,GAAR,CAAY,KAAZ,EAAmBS,IAAnB;;AAViB,eAWbA,IAAI,CAACC,QAAL,CAAc,OAAd,CAXa;AAAA;AAAA;AAAA;;AAYTC,UAAAA,QAZS,GAYEF,IAAI,CAACG,KAAL,CAAW,OAAX,EAAoB,CAApB,CAZF;AAaTC,UAAAA,MAbS,GAaA,IAAIP,UAAJ,CAAeG,IAAf,CAbA,EAcf;;AAde;AAAA,2CAecI,MAAM,CAACC,KAAP,CAAa;AACxCC,YAAAA,eAAe,EAAE,IADuB;AAExCC,YAAAA,UAAU,EAAE,KAF4B;AAGxCC,YAAAA,SAAS,wBAAiBN,QAAjB;AAH+B,WAAb,CAfd;;AAAA;AAeTO,UAAAA,IAfS;AAqBfpB,UAAAA,KAAK,CAACqB,IAAN,CAAWD,IAAX;;AArBe;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA,2CAwBZ;AACLpB,YAAAA,KAAK,EAALA;AADK,WAxBY;;AAAA;AAAA,2CA4Bd,EA5Bc;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAvB;;AA+BA,eAAeD,IAAf","sourcesContent":["import React from 'react';\nimport { NextPageContext, NextPage } from 'next';\n\nimport styled from 'styled-components';\nimport { EpubBook } from '../interfaces/books';\n\nconst Container = styled.div`\n  color: blue\n`;\n\ninterface Props {\n  books: EpubBook[];\n}\n\nconst Home: NextPage<Props> = ({ books }) => {\n  console.log('AAAA', books);\n\n  return (\n    <Container>\n      HOME\n    </Container>\n  );\n};\n// eslint-disable-next-line @typescript-eslint/unbound-method\nHome.getInitialProps = async (context: NextPageContext<any>): Promise<any> => {\n  const { req } = context;\n  if (req) {\n    const fs = require('fs');\n    const { EpubParser } = require('@ridi/epub-parser');\n    const books: EpubBook[] = [];\n\n    const files = fs.readdirSync('public/');\n    // eslint-disable-next-line no-restricted-syntax\n    for (const file of files) {\n      console.log('AAA', file);\n      if (file.includes('.epub')) {\n        const fileName = file.split('.epub')[0];\n        const parser = new EpubParser(file);\n        // eslint-disable-next-line no-await-in-loop\n        const book: EpubBook = await parser.parse({\n          validatePackage: true,\n          parseStyle: false,\n          unzipPath: `public/epub/${fileName}`,\n        });\n\n        books.push(book);\n      }\n    }\n    return {\n      books,\n    };\n  }\n  return {};\n};\n\nexport default Home;\n"]},"metadata":{},"sourceType":"module"}