{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nvar _jsxFileName = \"/Users/hyuntaeeom/Projects/personal/mini-viewer/pages/viewer.tsx\";\nvar __jsx = React.createElement;\nimport React, { useState, useMemo, useEffect, useCallback } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport Layout from '../components/Layout';\nimport ViewerBottom from '../components/viewer/ViewerBottom';\nimport ViewerCount from '../components/viewer/ViewerCount';\nimport ViewerHeader from '../components/viewer/ViewerHeader';\nimport ViewerPage from '../components/viewer/ViewerPage';\nimport * as actions from '../reducers/viewer';\nimport { VIEWER_WIDTH_RATIO, VIEWER_HEIGHT_RATIO } from '../constants/viewer';\nimport { Container } from '../styles/viewer';\n\nvar Viewer = function Viewer(_ref) {\n  var book = _ref.book,\n      viewerSpines = _ref.viewerSpines,\n      styleLinks = _ref.styleLinks;\n  var spines = book.spines,\n      titles = book.titles,\n      ncx = book.ncx;\n  var dispatch = useDispatch();\n\n  var _useState = useState(0),\n      viewerWidth = _useState[0],\n      setViewerWidth = _useState[1];\n\n  var _useState2 = useState(0),\n      viewerHeight = _useState2[0],\n      setViewerHeight = _useState2[1];\n\n  var _useState3 = useState(0),\n      nowSpineIndex = _useState3[0],\n      setNowSpineIndex = _useState3[1];\n\n  var _useState4 = useState(false),\n      isClickedPrev = _useState4[0],\n      setIsClickedPrev = _useState4[1];\n\n  var _useState5 = useState(false),\n      toggleNewViewer = _useState5[0],\n      setToggleNewViewer = _useState5[1];\n\n  var _useState6 = useState(0),\n      wholePageCount = _useState6[0],\n      setWholePageCount = _useState6[1];\n\n  var _useSelector = useSelector(function (state) {\n    return state.viewer;\n  }),\n      viewerCountList = _useSelector.viewerCountList,\n      viewerSpineId = _useSelector.viewerSpineId,\n      viewerPageCount = _useSelector.viewerPageCount;\n\n  var isAnalizedSpine = useMemo(function () {\n    return viewerCountList.length >= viewerSpines.length;\n  }, [viewerCountList, viewerSpines]);\n  var selectedSpineIndex = useMemo(function () {\n    var spineIndex = -1;\n    var accurateCount = 0;\n    viewerCountList.some(function (viewerCount) {\n      if (accurateCount + viewerCount.count + 1 > viewerPageCount) {\n        spineIndex = viewerCount.index;\n        return true;\n      }\n\n      accurateCount += viewerCount.count + 1;\n      return false;\n    });\n    return spineIndex;\n  }, [viewerPageCount, viewerCountList]);\n  useEffect(function () {\n    var spineIndex = -1;\n    var spinePageCount = 0;\n    spines.some(function (spine, index) {\n      if (spine.id === viewerSpineId) {\n        spineIndex = index;\n        return true;\n      }\n\n      return false;\n    });\n\n    if (spineIndex > 0) {\n      viewerCountList.some(function (viewerCount, index) {\n        if (index < spineIndex) {\n          spinePageCount += viewerCount.count + 1;\n          return false;\n        }\n\n        return true;\n      });\n    }\n\n    dispatch(actions.setViewerPageCount(spinePageCount));\n    console.log(\"AAA\", spinePageCount);\n  }, [dispatch, spines, viewerCountList, viewerSpineId]);\n  useEffect(function () {\n    setNowSpineIndex(selectedSpineIndex);\n  }, [selectedSpineIndex]);\n  useEffect(function () {\n    setViewerWidth(Math.floor(window.innerWidth * (VIEWER_WIDTH_RATIO / 100)));\n    setViewerHeight(Math.floor(window.innerHeight * (VIEWER_HEIGHT_RATIO / 100)));\n  }, []);\n  useEffect(function () {\n    if (isAnalizedSpine) {\n      var pageCount = viewerCountList.reduce(function (acc, cur) {\n        return acc + cur.count + 1;\n      }, 0);\n      setWholePageCount(pageCount);\n    }\n  }, [isAnalizedSpine, viewerCountList]);\n  var setNextSpine = useCallback(function () {\n    if (viewerPageCount >= wholePageCount) {\n      alert('마지막 페이지 입니다.');\n    } else {\n      dispatch(actions.setCountUpViewerPageCount());\n    }\n  }, [dispatch, viewerPageCount, wholePageCount]);\n  var setPrevSpine = useCallback(function () {\n    if (viewerPageCount <= 0) {\n      alert('첫번째 페이지 입니다');\n    } else {\n      dispatch(actions.setCountDownViewerPageCount());\n    }\n  }, [dispatch, viewerPageCount]);\n  return __jsx(Layout, {\n    styleLinks: styleLinks,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116\n    },\n    __self: this\n  }, __jsx(ViewerHeader, {\n    titles: titles,\n    ncxItem: ncx,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119\n    },\n    __self: this\n  }), __jsx(Container, {\n    styleProps: {\n      height: viewerHeight\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123\n    },\n    __self: this\n  }, isAnalizedSpine && __jsx(ViewerPage, {\n    viewerWidth: viewerWidth,\n    viewerHeight: viewerHeight,\n    isShowPrevViewer: isClickedPrev,\n    wholeColumnCount: viewerCountList[nowSpineIndex].count,\n    viewerSpine: viewerSpines[nowSpineIndex],\n    toggleNewViewer: toggleNewViewer,\n    setNextSpine: setNextSpine,\n    setPrevSpine: setPrevSpine,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131\n    },\n    __self: this\n  }), __jsx(\"section\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143\n    },\n    __self: this\n  }, viewerSpines.map(function (viewerSpine, index) {\n    return __jsx(ViewerCount, {\n      key: viewerSpine,\n      viewerWidth: viewerWidth,\n      viewerHeight: viewerHeight,\n      viewerSpine: viewerSpine,\n      viewerSpineIndex: index,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146\n      },\n      __self: this\n    });\n  }))), __jsx(ViewerBottom, {\n    sliderMaxValue: wholePageCount,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157\n    },\n    __self: this\n  }));\n}; // eslint-disable-next-line @typescript-eslint/unbound-method\n\n\nViewer.getInitialProps = function _callee(context) {\n  var req, _require, EpubParser, parser, book, viewerSpines;\n\n  return _regeneratorRuntime.async(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          req = context.req;\n\n          if (!req) {\n            _context.next = 17;\n            break;\n          }\n\n          _require = require('@ridi/epub-parser'), EpubParser = _require.EpubParser;\n          _context.prev = 3;\n          parser = new EpubParser('public/jikji.epub');\n          _context.next = 7;\n          return _regeneratorRuntime.awrap(parser.parse({\n            validatePackage: true,\n            parseStyle: false,\n            unzipPath: 'public/epub/jikji'\n          }));\n\n        case 7:\n          book = _context.sent;\n          _context.next = 10;\n          return _regeneratorRuntime.awrap(parser.readItems(book.spines, {\n            force: true,\n            extractBody: true,\n            serializedAnchor: true,\n            ignoreScript: true,\n            basePath: 'epub/jikji'\n          }));\n\n        case 10:\n          viewerSpines = _context.sent;\n          return _context.abrupt(\"return\", {\n            book: book,\n            viewerSpines: viewerSpines,\n            styleLinks: book.styles.map(function (style) {\n              return \"epub/jikji/\".concat(style.href);\n            })\n          });\n\n        case 14:\n          _context.prev = 14;\n          _context.t0 = _context[\"catch\"](3);\n          console.log('Error', _context.t0);\n\n        case 17:\n          return _context.abrupt(\"return\", {});\n\n        case 18:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, [[3, 14]], Promise);\n};\n\nexport default Viewer;","map":{"version":3,"sources":["/Users/hyuntaeeom/Projects/personal/mini-viewer/pages/viewer.tsx"],"names":["React","useState","useMemo","useEffect","useCallback","useSelector","useDispatch","Layout","ViewerBottom","ViewerCount","ViewerHeader","ViewerPage","actions","VIEWER_WIDTH_RATIO","VIEWER_HEIGHT_RATIO","Container","Viewer","book","viewerSpines","styleLinks","spines","titles","ncx","dispatch","viewerWidth","setViewerWidth","viewerHeight","setViewerHeight","nowSpineIndex","setNowSpineIndex","isClickedPrev","setIsClickedPrev","toggleNewViewer","setToggleNewViewer","wholePageCount","setWholePageCount","state","viewer","viewerCountList","viewerSpineId","viewerPageCount","isAnalizedSpine","length","selectedSpineIndex","spineIndex","accurateCount","some","viewerCount","count","index","spinePageCount","spine","id","setViewerPageCount","console","log","Math","floor","window","innerWidth","innerHeight","pageCount","reduce","acc","cur","setNextSpine","alert","setCountUpViewerPageCount","setPrevSpine","setCountDownViewerPageCount","height","map","viewerSpine","getInitialProps","context","req","require","EpubParser","parser","parse","validatePackage","parseStyle","unzipPath","readItems","force","extractBody","serializedAnchor","ignoreScript","basePath","styles","style","href"],"mappings":"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","sourcesContent":["import React, {\n  useState, useMemo, useEffect, useCallback,\n} from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { NextPageContext, NextPage } from 'next';\n\nimport Layout from '../components/Layout';\nimport ViewerBottom from '../components/viewer/ViewerBottom';\nimport ViewerCount from '../components/viewer/ViewerCount';\nimport ViewerHeader from '../components/viewer/ViewerHeader';\nimport ViewerPage from '../components/viewer/ViewerPage';\n\nimport * as actions from '../reducers/viewer';\n\nimport { VIEWER_WIDTH_RATIO, VIEWER_HEIGHT_RATIO } from '../constants/viewer';\n\nimport { ReducerState } from '../interfaces';\nimport { EpubBook } from '../interfaces/books';\n\nimport { Container } from '../styles/viewer';\n\ninterface Props {\n  book: EpubBook;\n  viewerSpines: string[];\n  styleLinks: string[];\n}\n\nconst Viewer: NextPage<Props> = ({ book, viewerSpines, styleLinks }) => {\n  const { spines, titles, ncx } = book;\n  const dispatch = useDispatch();\n\n  const [viewerWidth, setViewerWidth] = useState(0);\n  const [viewerHeight, setViewerHeight] = useState(0);\n  const [nowSpineIndex, setNowSpineIndex] = useState(0);\n  const [isClickedPrev, setIsClickedPrev] = useState(false);\n  const [toggleNewViewer, setToggleNewViewer] = useState(false);\n  const [wholePageCount, setWholePageCount] = useState(0);\n\n  const { viewerCountList, viewerSpineId, viewerPageCount } = useSelector((state: ReducerState) => state.viewer);\n\n  const isAnalizedSpine = useMemo(() => viewerCountList.length >= viewerSpines.length, [viewerCountList, viewerSpines]);\n\n  const selectedSpineIndex = useMemo(() => {\n    let spineIndex = -1;\n    let accurateCount = 0;\n\n    viewerCountList.some((viewerCount) => {\n      if (accurateCount + viewerCount.count + 1 > viewerPageCount) {\n        spineIndex = viewerCount.index;\n        return true;\n      }\n      accurateCount += viewerCount.count + 1;\n      return false;\n    });\n    return spineIndex;\n  }, [viewerPageCount, viewerCountList]);\n\n  useEffect(() => {\n    let spineIndex = -1;\n    let spinePageCount = 0;\n    spines.some((spine, index) => {\n      if (spine.id === viewerSpineId) {\n        spineIndex = index;\n        return true;\n      }\n      return false;\n    });\n\n    if (spineIndex > 0) {\n      viewerCountList.some((viewerCount, index) => {\n        if (index < spineIndex) {\n          spinePageCount += viewerCount.count + 1;\n          return false;\n        }\n        return true;\n      });\n    }\n\n    dispatch(actions.setViewerPageCount(spinePageCount));\n    console.log(\"AAA\", spinePageCount);\n  }, [dispatch, spines, viewerCountList, viewerSpineId]);\n\n  useEffect(() => {\n    setNowSpineIndex(selectedSpineIndex);\n  }, [selectedSpineIndex]);\n\n  useEffect(() => {\n    setViewerWidth(Math.floor(window.innerWidth * (VIEWER_WIDTH_RATIO / 100)));\n    setViewerHeight(Math.floor(window.innerHeight * (VIEWER_HEIGHT_RATIO / 100)));\n  }, []);\n\n  useEffect(() => {\n    if (isAnalizedSpine) {\n      const pageCount = viewerCountList.reduce((acc, cur) => acc + cur.count + 1, 0);\n      setWholePageCount(pageCount);\n    }\n  }, [isAnalizedSpine, viewerCountList]);\n\n  const setNextSpine = useCallback(() => {\n    if (viewerPageCount >= wholePageCount) {\n      alert('마지막 페이지 입니다.');\n    } else {\n      dispatch(actions.setCountUpViewerPageCount());\n    }\n  }, [dispatch, viewerPageCount, wholePageCount]);\n\n  const setPrevSpine = useCallback(() => {\n    if (viewerPageCount <= 0) {\n      alert('첫번째 페이지 입니다');\n    } else {\n      dispatch(actions.setCountDownViewerPageCount());\n    }\n  }, [dispatch, viewerPageCount]);\n\n  return (\n    <Layout\n      styleLinks={styleLinks}\n    >\n      <ViewerHeader\n        titles={titles}\n        ncxItem={ncx}\n      />\n      <Container\n        styleProps={{\n          height: viewerHeight,\n        }}\n      >\n        {\n        isAnalizedSpine\n        && (\n        <ViewerPage\n          viewerWidth={viewerWidth}\n          viewerHeight={viewerHeight}\n          isShowPrevViewer={isClickedPrev}\n          wholeColumnCount={viewerCountList[nowSpineIndex].count}\n          viewerSpine={viewerSpines[nowSpineIndex]}\n          toggleNewViewer={toggleNewViewer}\n          setNextSpine={setNextSpine}\n          setPrevSpine={setPrevSpine}\n        />\n        )\n      }\n        <section>\n          {\n          viewerSpines.map((viewerSpine, index) => (\n            <ViewerCount\n              key={viewerSpine}\n              viewerWidth={viewerWidth}\n              viewerHeight={viewerHeight}\n              viewerSpine={viewerSpine}\n              viewerSpineIndex={index}\n            />\n          ))\n        }\n        </section>\n      </Container>\n      <ViewerBottom\n        sliderMaxValue={wholePageCount}\n      />\n    </Layout>\n  );\n};\n\n// eslint-disable-next-line @typescript-eslint/unbound-method\nViewer.getInitialProps = async (context: NextPageContext<any>): Promise<any> => {\n  const { req } = context;\n  if (req) {\n    const { EpubParser } = require('@ridi/epub-parser');\n    try {\n      const parser = new EpubParser('public/jikji.epub');\n      const book: EpubBook = await parser.parse({\n        validatePackage: true,\n        parseStyle: false,\n        unzipPath: 'public/epub/jikji',\n      });\n      const viewerSpines = await parser.readItems(book.spines, {\n        force: true,\n        extractBody: true,\n        serializedAnchor: true,\n        ignoreScript: true,\n        basePath: 'epub/jikji',\n      });\n\n      return {\n        book,\n        viewerSpines,\n        styleLinks: book.styles.map((style) => `epub/jikji/${style.href}`),\n      };\n    } catch (error) {\n      console.log('Error', error);\n    }\n  }\n\n\n  return {};\n};\n\nexport default Viewer;\n"]},"metadata":{},"sourceType":"module"}