{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nexport const initialState = {\n  viewerSpineId: '',\n  viewerCountList: [],\n  viewerPageCount: 0\n}; // Action types\n\nexport const SET_VIEWER_SPINE_ID = 'viewer/SET_VIEWER_SPINE_ID';\nexport const SET_VIEWER_COLUMN_COUNT = 'viewer/SET_VIEWER_COLUMN_COUNT';\nexport const SET_VIEWER_PAGE_COUNT = 'viewr/SET_VIEWR_PAGE_COUNT'; // Action creators\n\nexport const setViewerSpineId = spineId => ({\n  type: SET_VIEWER_SPINE_ID,\n  payload: {\n    spineId\n  }\n});\nexport const setViewrColumnCount = ({\n  index,\n  count\n}) => ({\n  type: SET_VIEWER_COLUMN_COUNT,\n  payload: {\n    index,\n    count\n  }\n});\nexport const setViewerPageCount = pageCount => ({\n  type: SET_VIEWER_PAGE_COUNT,\n  payload: {\n    pageCount\n  }\n});\nexport default ((state = initialState, action) => {\n  const {\n    type,\n    payload\n  } = action;\n\n  switch (type) {\n    case SET_VIEWER_SPINE_ID:\n      {\n        const {\n          spineId\n        } = payload;\n        return _objectSpread({}, state, {\n          viewerSpineId: spineId\n        });\n      }\n\n    case SET_VIEWER_COLUMN_COUNT:\n      {\n        const {\n          index,\n          count\n        } = payload;\n        return _objectSpread({}, state, {\n          viewerCountList: [...state.viewerCountList, {\n            index,\n            count\n          }]\n        });\n      }\n\n    case SET_VIEWER_PAGE_COUNT:\n      {\n        const {\n          pageCount\n        } = payload;\n        return _objectSpread({}, state, {\n          viewerPageCount: pageCount\n        });\n      }\n\n    default:\n      {\n        return state;\n      }\n  }\n});","map":{"version":3,"sources":["/Users/hyuntaeeom/Projects/personal/mini-viewer/reducers/viewer.ts"],"names":["initialState","viewerSpineId","viewerCountList","viewerPageCount","SET_VIEWER_SPINE_ID","SET_VIEWER_COLUMN_COUNT","SET_VIEWER_PAGE_COUNT","setViewerSpineId","spineId","type","payload","setViewrColumnCount","index","count","setViewerPageCount","pageCount","state","action"],"mappings":";;;;;;AAGA,OAAO,MAAMA,YAAyB,GAAG;AACvCC,EAAAA,aAAa,EAAE,EADwB;AAEvCC,EAAAA,eAAe,EAAE,EAFsB;AAGvCC,EAAAA,eAAe,EAAE;AAHsB,CAAlC,C,CAMP;;AACA,OAAO,MAAMC,mBAAmB,GAAG,4BAA5B;AACP,OAAO,MAAMC,uBAAuB,GAAG,gCAAhC;AACP,OAAO,MAAMC,qBAAqB,GAAG,4BAA9B,C,CAEP;;AACA,OAAO,MAAMC,gBAAgB,GAAIC,OAAD,KAAsB;AACpDC,EAAAA,IAAI,EAAEL,mBAD8C;AAEpDM,EAAAA,OAAO,EAAE;AACPF,IAAAA;AADO;AAF2C,CAAtB,CAAzB;AAOP,OAAO,MAAMG,mBAAmB,GAAG,CAAC;AAAEC,EAAAA,KAAF;AAASC,EAAAA;AAAT,CAAD,MAAuD;AACxFJ,EAAAA,IAAI,EAAEJ,uBADkF;AAExFK,EAAAA,OAAO,EAAE;AACPE,IAAAA,KADO;AAEPC,IAAAA;AAFO;AAF+E,CAAvD,CAA5B;AAQP,OAAO,MAAMC,kBAAkB,GAAIC,SAAD,KAAwB;AACxDN,EAAAA,IAAI,EAAEH,qBADkD;AAExDI,EAAAA,OAAO,EAAE;AACPK,IAAAA;AADO;AAF+C,CAAxB,CAA3B;AAOP,gBAAe,CAACC,KAAK,GAAGhB,YAAT,EAAuBiB,MAAvB,KAA8D;AAC3E,QAAM;AAAER,IAAAA,IAAF;AAAQC,IAAAA;AAAR,MAAoBO,MAA1B;;AACA,UAAQR,IAAR;AACE,SAAKL,mBAAL;AAA0B;AACxB,cAAM;AAAEI,UAAAA;AAAF,YAAcE,OAApB;AACA,iCACKM,KADL;AAEEf,UAAAA,aAAa,EAAEO;AAFjB;AAID;;AACD,SAAKH,uBAAL;AAA8B;AAC5B,cAAM;AAAEO,UAAAA,KAAF;AAASC,UAAAA;AAAT,YAAmBH,OAAzB;AACA,iCACKM,KADL;AAEEd,UAAAA,eAAe,EAAE,CAAC,GAAGc,KAAK,CAACd,eAAV,EAA2B;AAAEU,YAAAA,KAAF;AAASC,YAAAA;AAAT,WAA3B;AAFnB;AAID;;AACD,SAAKP,qBAAL;AAA4B;AAC1B,cAAM;AAAES,UAAAA;AAAF,YAAgBL,OAAtB;AACA,iCACKM,KADL;AAEEb,UAAAA,eAAe,EAAEY;AAFnB;AAID;;AACD;AAAS;AACP,eAAOC,KAAP;AACD;AAxBH;AA0BD,CA5BD","sourcesContent":["import { ReducerAction } from '../interfaces';\nimport { ViewerState } from '../interfaces/viewer';\n\nexport const initialState: ViewerState = {\n  viewerSpineId: '',\n  viewerCountList: [],\n  viewerPageCount: 0,\n};\n\n// Action types\nexport const SET_VIEWER_SPINE_ID = 'viewer/SET_VIEWER_SPINE_ID';\nexport const SET_VIEWER_COLUMN_COUNT = 'viewer/SET_VIEWER_COLUMN_COUNT';\nexport const SET_VIEWER_PAGE_COUNT = 'viewr/SET_VIEWR_PAGE_COUNT';\n\n// Action creators\nexport const setViewerSpineId = (spineId: string) => ({\n  type: SET_VIEWER_SPINE_ID,\n  payload: {\n    spineId,\n  },\n});\n\nexport const setViewrColumnCount = ({ index, count }: {index: number; count: number}) => ({\n  type: SET_VIEWER_COLUMN_COUNT,\n  payload: {\n    index,\n    count,\n  },\n});\n\nexport const setViewerPageCount = (pageCount: number) => ({\n  type: SET_VIEWER_PAGE_COUNT,\n  payload: {\n    pageCount,\n  },\n});\n\nexport default (state = initialState, action: ReducerAction): ViewerState => {\n  const { type, payload } = action;\n  switch (type) {\n    case SET_VIEWER_SPINE_ID: {\n      const { spineId } = payload;\n      return {\n        ...state,\n        viewerSpineId: spineId,\n      };\n    }\n    case SET_VIEWER_COLUMN_COUNT: {\n      const { index, count } = payload;\n      return {\n        ...state,\n        viewerCountList: [...state.viewerCountList, { index, count }],\n      };\n    }\n    case SET_VIEWER_PAGE_COUNT: {\n      const { pageCount } = payload;\n      return {\n        ...state,\n        viewerPageCount: pageCount,\n      };\n    }\n    default: {\n      return state;\n    }\n  }\n};\n"]},"metadata":{},"sourceType":"module"}