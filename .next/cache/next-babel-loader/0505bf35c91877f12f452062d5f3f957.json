{"ast":null,"code":"var _jsxFileName = \"/Users/hyuntaeeom/Projects/personal/mini-viewer/pages/viewer.tsx\";\nvar __jsx = React.createElement;\nimport React, { useState, useMemo, useEffect, useCallback } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport Layout from '../components/Layout';\nimport ViewerBottom from '../components/viewer/ViewerBottom';\nimport ViewerCount from '../components/viewer/ViewerCount';\nimport ViewerHeader from '../components/viewer/ViewerHeader';\nimport ViewerPage from '../components/viewer/ViewerPage';\nimport * as actions from '../reducers/viewer';\nimport { VIEWER_WIDTH_RATIO, VIEWER_HEIGHT_RATIO } from '../constants/viewer';\nimport { Container } from '../styles/viewer';\n\nconst Viewer = ({\n  book,\n  viewerSpines,\n  styleLinks\n}) => {\n  const {\n    spines,\n    titles,\n    ncx\n  } = book;\n  const dispatch = useDispatch();\n  const {\n    0: viewerWidth,\n    1: setViewerWidth\n  } = useState(0);\n  const {\n    0: viewerHeight,\n    1: setViewerHeight\n  } = useState(0);\n  const {\n    0: nowSpineIndex,\n    1: setNowSpineIndex\n  } = useState(0);\n  const {\n    0: isClickedPrev,\n    1: setIsClickedPrev\n  } = useState(false);\n  const {\n    0: toggleNewViewer,\n    1: setToggleNewViewer\n  } = useState(false);\n  const {\n    0: wholePageCount,\n    1: setWholePageCount\n  } = useState(0);\n  const {\n    viewerCountList,\n    viewerSpineId,\n    viewerPageCount\n  } = useSelector(state => state.viewer);\n  const isAnalizedSpine = useMemo(() => viewerCountList.length >= viewerSpines.length, [viewerCountList, viewerSpines]);\n  const selectedSpineIndex = useMemo(() => {\n    let spineIndex = -1;\n    let accurateCount = 0;\n    viewerCountList.some(viewerCount => {\n      if (accurateCount + viewerCount.count + 1 > viewerPageCount) {\n        spineIndex = viewerCount.index;\n        return true;\n      }\n\n      accurateCount += viewerCount.count + 1;\n      return false;\n    });\n    return spineIndex;\n  }, [viewerPageCount, viewerCountList]);\n  useEffect(() => {\n    let spineIndex = -1;\n    let spinePageCount = 0;\n    spines.some((spine, index) => {\n      if (spine.id === viewerSpineId) {\n        spineIndex = index;\n        return true;\n      }\n\n      return false;\n    });\n\n    if (spineIndex > 0) {\n      viewerCountList.some((viewerCount, index) => {\n        if (index < spineIndex) {\n          spinePageCount += viewerCount.count + 1;\n          return false;\n        }\n\n        return true;\n      });\n    }\n\n    console.log(\"AAA\", spinePageCount);\n  }, [spines, viewerCountList, viewerSpineId]);\n  useEffect(() => {\n    setNowSpineIndex(selectedSpineIndex);\n  }, [selectedSpineIndex]);\n  useEffect(() => {\n    setViewerWidth(Math.floor(window.innerWidth * (VIEWER_WIDTH_RATIO / 100)));\n    setViewerHeight(Math.floor(window.innerHeight * (VIEWER_HEIGHT_RATIO / 100)));\n  }, []);\n  useEffect(() => {\n    if (isAnalizedSpine) {\n      const pageCount = viewerCountList.reduce((acc, cur) => acc + cur.count + 1, 0);\n      setWholePageCount(pageCount);\n    }\n  }, [isAnalizedSpine, viewerCountList]);\n  const setNextSpine = useCallback(() => {\n    if (viewerPageCount >= wholePageCount) {\n      alert('마지막 페이지 입니다.');\n    } else {\n      dispatch(actions.setCountUpViewerPageCount());\n    }\n  }, [dispatch, viewerPageCount, wholePageCount]);\n  const setPrevSpine = useCallback(() => {\n    if (viewerPageCount <= 0) {\n      alert('첫번째 페이지 입니다');\n    } else {\n      dispatch(actions.setCountDownViewerPageCount());\n    }\n  }, [dispatch, viewerPageCount]);\n  return __jsx(Layout, {\n    styleLinks: styleLinks,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115\n    },\n    __self: this\n  }, __jsx(ViewerHeader, {\n    titles: titles,\n    ncxItem: ncx,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118\n    },\n    __self: this\n  }), __jsx(Container, {\n    styleProps: {\n      height: viewerHeight\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122\n    },\n    __self: this\n  }, isAnalizedSpine && __jsx(ViewerPage, {\n    viewerWidth: viewerWidth,\n    viewerHeight: viewerHeight,\n    isShowPrevViewer: isClickedPrev,\n    wholeColumnCount: viewerCountList[nowSpineIndex].count,\n    viewerSpine: viewerSpines[0],\n    toggleNewViewer: toggleNewViewer,\n    setNextSpine: setNextSpine,\n    setPrevSpine: setPrevSpine,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130\n    },\n    __self: this\n  }), __jsx(\"section\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142\n    },\n    __self: this\n  }, viewerSpines.map((viewerSpine, index) => __jsx(ViewerCount, {\n    key: viewerSpine,\n    viewerWidth: viewerWidth,\n    viewerHeight: viewerHeight,\n    viewerSpine: viewerSpine,\n    viewerSpineIndex: index,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145\n    },\n    __self: this\n  })))), __jsx(ViewerBottom, {\n    sliderMaxValue: wholePageCount,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156\n    },\n    __self: this\n  }));\n}; // eslint-disable-next-line @typescript-eslint/unbound-method\n\n\nViewer.getInitialProps = async context => {\n  const {\n    req\n  } = context;\n\n  if (req) {\n    const {\n      EpubParser\n    } = require('@ridi/epub-parser');\n\n    try {\n      const parser = new EpubParser('public/jikji.epub');\n      const book = await parser.parse({\n        validatePackage: true,\n        parseStyle: false,\n        unzipPath: 'public/epub/jikji'\n      });\n      const viewerSpines = await parser.readItems(book.spines, {\n        force: true,\n        extractBody: true,\n        serializedAnchor: true,\n        ignoreScript: true,\n        basePath: 'epub/jikji'\n      });\n      return {\n        book,\n        viewerSpines,\n        styleLinks: book.styles.map(style => `epub/jikji/${style.href}`)\n      };\n    } catch (error) {\n      console.log('Error', error);\n    }\n  }\n\n  return {};\n};\n\nexport default Viewer;","map":{"version":3,"sources":["/Users/hyuntaeeom/Projects/personal/mini-viewer/pages/viewer.tsx"],"names":["React","useState","useMemo","useEffect","useCallback","useSelector","useDispatch","Layout","ViewerBottom","ViewerCount","ViewerHeader","ViewerPage","actions","VIEWER_WIDTH_RATIO","VIEWER_HEIGHT_RATIO","Container","Viewer","book","viewerSpines","styleLinks","spines","titles","ncx","dispatch","viewerWidth","setViewerWidth","viewerHeight","setViewerHeight","nowSpineIndex","setNowSpineIndex","isClickedPrev","setIsClickedPrev","toggleNewViewer","setToggleNewViewer","wholePageCount","setWholePageCount","viewerCountList","viewerSpineId","viewerPageCount","state","viewer","isAnalizedSpine","length","selectedSpineIndex","spineIndex","accurateCount","some","viewerCount","count","index","spinePageCount","spine","id","console","log","Math","floor","window","innerWidth","innerHeight","pageCount","reduce","acc","cur","setNextSpine","alert","setCountUpViewerPageCount","setPrevSpine","setCountDownViewerPageCount","height","map","viewerSpine","getInitialProps","context","req","EpubParser","require","parser","parse","validatePackage","parseStyle","unzipPath","readItems","force","extractBody","serializedAnchor","ignoreScript","basePath","styles","style","href","error"],"mappings":"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","sourcesContent":["import React, {\n  useState, useMemo, useEffect, useCallback,\n} from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { NextPageContext, NextPage } from 'next';\n\nimport Layout from '../components/Layout';\nimport ViewerBottom from '../components/viewer/ViewerBottom';\nimport ViewerCount from '../components/viewer/ViewerCount';\nimport ViewerHeader from '../components/viewer/ViewerHeader';\nimport ViewerPage from '../components/viewer/ViewerPage';\n\nimport * as actions from '../reducers/viewer';\n\nimport { VIEWER_WIDTH_RATIO, VIEWER_HEIGHT_RATIO } from '../constants/viewer';\n\nimport { ReducerState } from '../interfaces';\nimport { EpubBook } from '../interfaces/books';\n\nimport { Container } from '../styles/viewer';\n\ninterface Props {\n  book: EpubBook;\n  viewerSpines: string[];\n  styleLinks: string[];\n}\n\nconst Viewer: NextPage<Props> = ({ book, viewerSpines, styleLinks }) => {\n  const { spines, titles, ncx } = book;\n  const dispatch = useDispatch();\n\n  const [viewerWidth, setViewerWidth] = useState(0);\n  const [viewerHeight, setViewerHeight] = useState(0);\n  const [nowSpineIndex, setNowSpineIndex] = useState(0);\n  const [isClickedPrev, setIsClickedPrev] = useState(false);\n  const [toggleNewViewer, setToggleNewViewer] = useState(false);\n  const [wholePageCount, setWholePageCount] = useState(0);\n\n  const { viewerCountList, viewerSpineId, viewerPageCount } = useSelector((state: ReducerState) => state.viewer);\n\n  const isAnalizedSpine = useMemo(() => viewerCountList.length >= viewerSpines.length, [viewerCountList, viewerSpines]);\n\n  const selectedSpineIndex = useMemo(() => {\n    let spineIndex = -1;\n    let accurateCount = 0;\n\n    viewerCountList.some((viewerCount) => {\n      if (accurateCount + viewerCount.count + 1 > viewerPageCount) {\n        spineIndex = viewerCount.index;\n        return true;\n      }\n      accurateCount += viewerCount.count + 1;\n      return false;\n    });\n    return spineIndex;\n  }, [viewerPageCount, viewerCountList]);\n\n  useEffect(() => {\n    let spineIndex = -1;\n    let spinePageCount = 0;\n    spines.some((spine, index) => {\n      if (spine.id === viewerSpineId) {\n        spineIndex = index;\n        return true;\n      }\n      return false;\n    });\n\n    if (spineIndex > 0) {\n      viewerCountList.some((viewerCount, index) => {\n        if (index < spineIndex) {\n          spinePageCount += viewerCount.count + 1;\n          return false;\n        }\n        return true;\n      });\n    }\n\n    console.log(\"AAA\", spinePageCount);\n  }, [spines, viewerCountList, viewerSpineId]);\n\n  useEffect(() => {\n    setNowSpineIndex(selectedSpineIndex);\n  }, [selectedSpineIndex]);\n\n  useEffect(() => {\n    setViewerWidth(Math.floor(window.innerWidth * (VIEWER_WIDTH_RATIO / 100)));\n    setViewerHeight(Math.floor(window.innerHeight * (VIEWER_HEIGHT_RATIO / 100)));\n  }, []);\n\n  useEffect(() => {\n    if (isAnalizedSpine) {\n      const pageCount = viewerCountList.reduce((acc, cur) => acc + cur.count + 1, 0);\n      setWholePageCount(pageCount);\n    }\n  }, [isAnalizedSpine, viewerCountList]);\n\n  const setNextSpine = useCallback(() => {\n    if (viewerPageCount >= wholePageCount) {\n      alert('마지막 페이지 입니다.');\n    } else {\n      dispatch(actions.setCountUpViewerPageCount());\n    }\n  }, [dispatch, viewerPageCount, wholePageCount]);\n\n  const setPrevSpine = useCallback(() => {\n    if (viewerPageCount <= 0) {\n      alert('첫번째 페이지 입니다');\n    } else {\n      dispatch(actions.setCountDownViewerPageCount());\n    }\n  }, [dispatch, viewerPageCount]);\n\n  return (\n    <Layout\n      styleLinks={styleLinks}\n    >\n      <ViewerHeader\n        titles={titles}\n        ncxItem={ncx}\n      />\n      <Container\n        styleProps={{\n          height: viewerHeight,\n        }}\n      >\n        {\n        isAnalizedSpine\n        && (\n        <ViewerPage\n          viewerWidth={viewerWidth}\n          viewerHeight={viewerHeight}\n          isShowPrevViewer={isClickedPrev}\n          wholeColumnCount={viewerCountList[nowSpineIndex].count}\n          viewerSpine={viewerSpines[0]}\n          toggleNewViewer={toggleNewViewer}\n          setNextSpine={setNextSpine}\n          setPrevSpine={setPrevSpine}\n        />\n        )\n      }\n        <section>\n          {\n          viewerSpines.map((viewerSpine, index) => (\n            <ViewerCount\n              key={viewerSpine}\n              viewerWidth={viewerWidth}\n              viewerHeight={viewerHeight}\n              viewerSpine={viewerSpine}\n              viewerSpineIndex={index}\n            />\n          ))\n        }\n        </section>\n      </Container>\n      <ViewerBottom\n        sliderMaxValue={wholePageCount}\n      />\n    </Layout>\n  );\n};\n\n// eslint-disable-next-line @typescript-eslint/unbound-method\nViewer.getInitialProps = async (context: NextPageContext<any>): Promise<any> => {\n  const { req } = context;\n  if (req) {\n    const { EpubParser } = require('@ridi/epub-parser');\n    try {\n      const parser = new EpubParser('public/jikji.epub');\n      const book: EpubBook = await parser.parse({\n        validatePackage: true,\n        parseStyle: false,\n        unzipPath: 'public/epub/jikji',\n      });\n      const viewerSpines = await parser.readItems(book.spines, {\n        force: true,\n        extractBody: true,\n        serializedAnchor: true,\n        ignoreScript: true,\n        basePath: 'epub/jikji',\n      });\n\n      return {\n        book,\n        viewerSpines,\n        styleLinks: book.styles.map((style) => `epub/jikji/${style.href}`),\n      };\n    } catch (error) {\n      console.log('Error', error);\n    }\n  }\n\n\n  return {};\n};\n\nexport default Viewer;\n"]},"metadata":{},"sourceType":"module"}