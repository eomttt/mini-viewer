{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nexport var initialState = {\n  viewerCountList: [],\n  selectedSpineId: ''\n}; // Action types\n\nexport var SET_VIEWER_COLUMN_COUNT = 'viewer/SET_VIEWER_COLUMN_COUNT';\nexport var SET_SPINE_ID = 'viewer/SET_SPINE_ID';\nexport var SET_VIEWER_PAGE = 'viewr/SET_VIEWR_PAGE'; // Action creators\n\nexport var setViewrColumnCount = function setViewrColumnCount(_ref) {\n  var index = _ref.index,\n      count = _ref.count;\n  return {\n    type: SET_VIEWER_COLUMN_COUNT,\n    payload: {\n      index: index,\n      count: count\n    }\n  };\n};\nexport var setSpineId = function setSpineId(spineId) {\n  return {\n    type: SET_SPINE_ID,\n    payload: {\n      spineId: spineId\n    }\n  };\n};\nexport default (function () {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n  var type = action.type,\n      payload = action.payload;\n\n  switch (type) {\n    case SET_VIEWER_COLUMN_COUNT:\n      {\n        var index = payload.index,\n            count = payload.count;\n        return _objectSpread({}, state, {\n          viewerCountList: [].concat(_toConsumableArray(state.viewerCountList), [{\n            index: index,\n            count: count\n          }])\n        });\n      }\n\n    case SET_SPINE_ID:\n      {\n        var spineId = payload.spineId;\n        return _objectSpread({}, state, {\n          selectedSpineId: spineId\n        });\n      }\n\n    default:\n      {\n        return state;\n      }\n  }\n});","map":{"version":3,"sources":["/Users/hyuntaeeom/Projects/personal/mini-viewer/reducers/viewer.ts"],"names":["initialState","viewerCountList","selectedSpineId","SET_VIEWER_COLUMN_COUNT","SET_SPINE_ID","SET_VIEWER_PAGE","setViewrColumnCount","index","count","type","payload","setSpineId","spineId","state","action"],"mappings":";;;;;;;AAGA,OAAO,IAAMA,YAAyB,GAAG;AACvCC,EAAAA,eAAe,EAAE,EADsB;AAEvCC,EAAAA,eAAe,EAAE;AAFsB,CAAlC,C,CAKP;;AACA,OAAO,IAAMC,uBAAuB,GAAG,gCAAhC;AACP,OAAO,IAAMC,YAAY,GAAG,qBAArB;AACP,OAAO,IAAMC,eAAe,GAAG,sBAAxB,C,CAEP;;AACA,OAAO,IAAMC,mBAAmB,GAAG,SAAtBA,mBAAsB;AAAA,MAAGC,KAAH,QAAGA,KAAH;AAAA,MAAUC,KAAV,QAAUA,KAAV;AAAA,SAAuD;AACxFC,IAAAA,IAAI,EAAEN,uBADkF;AAExFO,IAAAA,OAAO,EAAE;AACPH,MAAAA,KAAK,EAALA,KADO;AAEPC,MAAAA,KAAK,EAALA;AAFO;AAF+E,GAAvD;AAAA,CAA5B;AAQP,OAAO,IAAMG,UAAU,GAAG,SAAbA,UAAa,CAACC,OAAD;AAAA,SAAsB;AAC9CH,IAAAA,IAAI,EAAEL,YADwC;AAE9CM,IAAAA,OAAO,EAAE;AACPE,MAAAA,OAAO,EAAPA;AADO;AAFqC,GAAtB;AAAA,CAAnB;AAOP,gBAAe,YAA8D;AAAA,MAA7DC,KAA6D,uEAArDb,YAAqD;AAAA,MAAvCc,MAAuC;AAAA,MACnEL,IADmE,GACjDK,MADiD,CACnEL,IADmE;AAAA,MAC7DC,OAD6D,GACjDI,MADiD,CAC7DJ,OAD6D;;AAE3E,UAAQD,IAAR;AACE,SAAKN,uBAAL;AAA8B;AAAA,YACpBI,KADoB,GACHG,OADG,CACpBH,KADoB;AAAA,YACbC,KADa,GACHE,OADG,CACbF,KADa;AAE5B,iCACKK,KADL;AAEEZ,UAAAA,eAAe,+BAAMY,KAAK,CAACZ,eAAZ,IAA6B;AAAEM,YAAAA,KAAK,EAALA,KAAF;AAASC,YAAAA,KAAK,EAALA;AAAT,WAA7B;AAFjB;AAID;;AACD,SAAKJ,YAAL;AAAmB;AAAA,YACTQ,OADS,GACGF,OADH,CACTE,OADS;AAEjB,iCACKC,KADL;AAEEX,UAAAA,eAAe,EAAEU;AAFnB;AAID;;AACD;AAAS;AACP,eAAOC,KAAP;AACD;AAjBH;AAmBD,CArBD","sourcesContent":["import { ReducerAction } from '../interfaces';\nimport { ViewerState } from '../interfaces/viewer';\n\nexport const initialState: ViewerState = {\n  viewerCountList: [],\n  selectedSpineId: '',\n};\n\n// Action types\nexport const SET_VIEWER_COLUMN_COUNT = 'viewer/SET_VIEWER_COLUMN_COUNT';\nexport const SET_SPINE_ID = 'viewer/SET_SPINE_ID';\nexport const SET_VIEWER_PAGE = 'viewr/SET_VIEWR_PAGE';\n\n// Action creators\nexport const setViewrColumnCount = ({ index, count }: {index: number; count: number}) => ({\n  type: SET_VIEWER_COLUMN_COUNT,\n  payload: {\n    index,\n    count,\n  },\n});\n\nexport const setSpineId = (spineId: string) => ({\n  type: SET_SPINE_ID,\n  payload: {\n    spineId,\n  },\n});\n\nexport default (state = initialState, action: ReducerAction): ViewerState => {\n  const { type, payload } = action;\n  switch (type) {\n    case SET_VIEWER_COLUMN_COUNT: {\n      const { index, count } = payload;\n      return {\n        ...state,\n        viewerCountList: [...state.viewerCountList, { index, count }],\n      };\n    }\n    case SET_SPINE_ID: {\n      const { spineId } = payload;\n      return {\n        ...state,\n        selectedSpineId: spineId,\n      };\n    }\n    default: {\n      return state;\n    }\n  }\n};\n"]},"metadata":{},"sourceType":"module"}