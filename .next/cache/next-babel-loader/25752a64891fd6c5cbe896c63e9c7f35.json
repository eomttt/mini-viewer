{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nexport const initialState = {\n  viewerCountList: [],\n  selectedSpineId: ''\n}; // Action types\n\nexport const SET_VIEWER_COUNT = 'viewer/SET_VIEWER_COUNT';\nexport const SET_SPINE_ID = 'viewer/SET_SPINE_ID'; // Action creators\n\nexport const setViewerCount = ({\n  index,\n  count\n}) => ({\n  type: SET_VIEWER_COUNT,\n  payload: {\n    index,\n    count\n  }\n});\nexport const setSpineId = spineId => ({\n  type: SET_SPINE_ID,\n  payload: {\n    spineId\n  }\n});\nexport default ((state = initialState, action) => {\n  const {\n    type,\n    payload\n  } = action;\n\n  switch (type) {\n    case SET_VIEWER_COUNT:\n      {\n        const {\n          index,\n          count\n        } = payload;\n        return _objectSpread({}, state, {\n          viewerCountList: [...state.viewerCountList, {\n            index,\n            count\n          }]\n        });\n      }\n\n    case SET_SPINE_ID:\n      {\n        const {\n          spineId\n        } = payload;\n        return _objectSpread({}, state, {\n          selectedSpineId: spineId\n        });\n      }\n\n    default:\n      {\n        return state;\n      }\n  }\n});","map":{"version":3,"sources":["/Users/hyuntaeeom/Projects/personal/mini-viewer/reducers/viewer.ts"],"names":["initialState","viewerCountList","selectedSpineId","SET_VIEWER_COUNT","SET_SPINE_ID","setViewerCount","index","count","type","payload","setSpineId","spineId","state","action"],"mappings":";;;;;;AAGA,OAAO,MAAMA,YAAyB,GAAG;AACvCC,EAAAA,eAAe,EAAE,EADsB;AAEvCC,EAAAA,eAAe,EAAE;AAFsB,CAAlC,C,CAKP;;AACA,OAAO,MAAMC,gBAAgB,GAAG,yBAAzB;AACP,OAAO,MAAMC,YAAY,GAAG,qBAArB,C,CAEP;;AACA,OAAO,MAAMC,cAAc,GAAG,CAAC;AAAEC,EAAAA,KAAF;AAASC,EAAAA;AAAT,CAAD,MAAuD;AACnFC,EAAAA,IAAI,EAAEL,gBAD6E;AAEnFM,EAAAA,OAAO,EAAE;AACPH,IAAAA,KADO;AAEPC,IAAAA;AAFO;AAF0E,CAAvD,CAAvB;AAQP,OAAO,MAAMG,UAAU,GAAIC,OAAD,KAAsB;AAC9CH,EAAAA,IAAI,EAAEJ,YADwC;AAE9CK,EAAAA,OAAO,EAAE;AACPE,IAAAA;AADO;AAFqC,CAAtB,CAAnB;AAOP,gBAAe,CAACC,KAAK,GAAGZ,YAAT,EAAuBa,MAAvB,KAA8D;AAC3E,QAAM;AAAEL,IAAAA,IAAF;AAAQC,IAAAA;AAAR,MAAoBI,MAA1B;;AACA,UAAQL,IAAR;AACE,SAAKL,gBAAL;AAAuB;AACrB,cAAM;AAAEG,UAAAA,KAAF;AAASC,UAAAA;AAAT,YAAmBE,OAAzB;AACA,iCACKG,KADL;AAEEX,UAAAA,eAAe,EAAE,CAAC,GAAGW,KAAK,CAACX,eAAV,EAA2B;AAAEK,YAAAA,KAAF;AAASC,YAAAA;AAAT,WAA3B;AAFnB;AAID;;AACD,SAAKH,YAAL;AAAmB;AACjB,cAAM;AAAEO,UAAAA;AAAF,YAAcF,OAApB;AACA,iCACKG,KADL;AAEEV,UAAAA,eAAe,EAAES;AAFnB;AAID;;AACD;AAAS;AACP,eAAOC,KAAP;AACD;AAjBH;AAmBD,CArBD","sourcesContent":["import { ReducerAction } from '../interfaces';\nimport { ViewerState } from '../interfaces/viewer';\n\nexport const initialState: ViewerState = {\n  viewerCountList: [],\n  selectedSpineId: '',\n};\n\n// Action types\nexport const SET_VIEWER_COUNT = 'viewer/SET_VIEWER_COUNT';\nexport const SET_SPINE_ID = 'viewer/SET_SPINE_ID';\n\n// Action creators\nexport const setViewerCount = ({ index, count }: {index: number; count: number}) => ({\n  type: SET_VIEWER_COUNT,\n  payload: {\n    index,\n    count,\n  },\n});\n\nexport const setSpineId = (spineId: string) => ({\n  type: SET_SPINE_ID,\n  payload: {\n    spineId,\n  },\n});\n\nexport default (state = initialState, action: ReducerAction): ViewerState => {\n  const { type, payload } = action;\n  switch (type) {\n    case SET_VIEWER_COUNT: {\n      const { index, count } = payload;\n      return {\n        ...state,\n        viewerCountList: [...state.viewerCountList, { index, count }],\n      };\n    }\n    case SET_SPINE_ID: {\n      const { spineId } = payload;\n      return {\n        ...state,\n        selectedSpineId: spineId,\n      };\n    }\n    default: {\n      return state;\n    }\n  }\n};\n"]},"metadata":{},"sourceType":"module"}