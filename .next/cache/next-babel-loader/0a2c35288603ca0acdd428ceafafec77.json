{"ast":null,"code":"var _jsxFileName = \"/Users/hyuntaeeom/Projects/personal/mini-viewer/pages/index.tsx\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport { useSelector } from 'react-redux';\nimport Layout from '../components/Layout';\nimport BookList from '../components/books/BookList';\nimport * as booksActions from '../reducers/books';\nimport { getBook, getViewers } from '../lib/util';\n\nconst Home = () => {\n  const {\n    list\n  } = useSelector(state => state.books);\n  return __jsx(Layout, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19\n    },\n    __self: this\n  }, __jsx(BookList, {\n    books: list,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20\n    },\n    __self: this\n  }));\n}; // eslint-disable-next-line @typescript-eslint/unbound-method\n\n\nHome.getInitialProps = async context => {\n  const {\n    req,\n    store\n  } = context;\n\n  if (req) {\n    const fs = require('fs');\n\n    const {\n      EpubParser\n    } = require('@ridi/epub-parser');\n\n    const booksInfo = [];\n    const files = fs.readdirSync('public/');\n\n    try {\n      // eslint-disable-next-line no-restricted-syntax\n      for (const file of files) {\n        if (file.includes('.epub')) {\n          const publicPath = `epub/${file.split('.epub')[0]}`;\n          const parser = new EpubParser(`public/${file}`);\n          const book = await getBook(parser, {\n            unzipPath: `public/${publicPath}`\n          });\n\n          if (book) {\n            const viewers = await getViewers(parser, {\n              bookSpines: book.spines,\n              publicPath\n            });\n            booksInfo.push({\n              book,\n              viewers,\n              publicPath\n            });\n          }\n        }\n      }\n\n      store.dispatch(booksActions.setBookList(booksInfo));\n      return {\n        booksInfo\n      };\n    } catch (error) {\n      console.log('Error', error);\n    }\n  }\n\n  return {};\n};\n\nexport default Home;","map":{"version":3,"sources":["/Users/hyuntaeeom/Projects/personal/mini-viewer/pages/index.tsx"],"names":["React","useSelector","Layout","BookList","booksActions","getBook","getViewers","Home","list","state","books","getInitialProps","context","req","store","fs","require","EpubParser","booksInfo","files","readdirSync","file","includes","publicPath","split","parser","book","unzipPath","viewers","bookSpines","spines","push","dispatch","setBookList","error","console","log"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,WAAT,QAA4B,aAA5B;AAGA,OAAOC,MAAP,MAAmB,sBAAnB;AACA,OAAOC,QAAP,MAAqB,8BAArB;AAEA,OAAO,KAAKC,YAAZ,MAA8B,mBAA9B;AAEA,SAASC,OAAT,EAAkBC,UAAlB,QAAoC,aAApC;;AAKA,MAAMC,IAAc,GAAG,MAAM;AAC3B,QAAM;AAAEC,IAAAA;AAAF,MAAWP,WAAW,CAAEQ,KAAD,IAAyBA,KAAK,CAACC,KAAhC,CAA5B;AAEA,SACE,MAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,QAAD;AAAU,IAAA,KAAK,EAAEF,IAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF;AAKD,CARD,C,CASA;;;AACAD,IAAI,CAACI,eAAL,GAAuB,MAAOC,OAAP,IAAuD;AAC5E,QAAM;AAAEC,IAAAA,GAAF;AAAOC,IAAAA;AAAP,MAAiBF,OAAvB;;AACA,MAAIC,GAAJ,EAAS;AACP,UAAME,EAAE,GAAGC,OAAO,CAAC,IAAD,CAAlB;;AACA,UAAM;AAAEC,MAAAA;AAAF,QAAiBD,OAAO,CAAC,mBAAD,CAA9B;;AACA,UAAME,SAAqB,GAAG,EAA9B;AAEA,UAAMC,KAAK,GAAGJ,EAAE,CAACK,WAAH,CAAe,SAAf,CAAd;;AACA,QAAI;AACF;AACA,WAAK,MAAMC,IAAX,IAAmBF,KAAnB,EAA0B;AACxB,YAAIE,IAAI,CAACC,QAAL,CAAc,OAAd,CAAJ,EAA4B;AAC1B,gBAAMC,UAAU,GAAI,QAAOF,IAAI,CAACG,KAAL,CAAW,OAAX,EAAoB,CAApB,CAAuB,EAAlD;AAEA,gBAAMC,MAAM,GAAG,IAAIR,UAAJ,CAAgB,UAASI,IAAK,EAA9B,CAAf;AACA,gBAAMK,IAAc,GAAG,MAAMrB,OAAO,CAACoB,MAAD,EAAS;AAC3CE,YAAAA,SAAS,EAAG,UAASJ,UAAW;AADW,WAAT,CAApC;;AAIA,cAAIG,IAAJ,EAAU;AACR,kBAAME,OAAO,GAAG,MAAMtB,UAAU,CAACmB,MAAD,EAAS;AACvCI,cAAAA,UAAU,EAAEH,IAAI,CAACI,MADsB;AAEvCP,cAAAA;AAFuC,aAAT,CAAhC;AAIAL,YAAAA,SAAS,CAACa,IAAV,CAAe;AACbL,cAAAA,IADa;AAEbE,cAAAA,OAFa;AAGbL,cAAAA;AAHa,aAAf;AAKD;AACF;AACF;;AACDT,MAAAA,KAAK,CAACkB,QAAN,CAAe5B,YAAY,CAAC6B,WAAb,CAAyBf,SAAzB,CAAf;AAEA,aAAO;AACLA,QAAAA;AADK,OAAP;AAGD,KA7BD,CA6BE,OAAOgB,KAAP,EAAc;AACdC,MAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBF,KAArB;AACD;AACF;;AACD,SAAO,EAAP;AACD,CA1CD;;AA4CA,eAAe3B,IAAf","sourcesContent":["import React from 'react';\nimport { useSelector } from 'react-redux';\nimport { NextPageContext, NextPage } from 'next';\n\nimport Layout from '../components/Layout';\nimport BookList from '../components/books/BookList';\n\nimport * as booksActions from '../reducers/books';\n\nimport { getBook, getViewers } from '../lib/util';\n\nimport { ReducerState } from '../interfaces';\nimport { BookInfo, EpubBook } from '../interfaces/books';\n\nconst Home: NextPage = () => {\n  const { list } = useSelector((state: ReducerState) => state.books);\n\n  return (\n    <Layout>\n      <BookList books={list} />\n    </Layout>\n  );\n};\n// eslint-disable-next-line @typescript-eslint/unbound-method\nHome.getInitialProps = async (context: NextPageContext<any>): Promise<any> => {\n  const { req, store } = context;\n  if (req) {\n    const fs = require('fs');\n    const { EpubParser } = require('@ridi/epub-parser');\n    const booksInfo: BookInfo[] = [];\n\n    const files = fs.readdirSync('public/');\n    try {\n      // eslint-disable-next-line no-restricted-syntax\n      for (const file of files) {\n        if (file.includes('.epub')) {\n          const publicPath = `epub/${file.split('.epub')[0]}`;\n\n          const parser = new EpubParser(`public/${file}`);\n          const book: EpubBook = await getBook(parser, {\n            unzipPath: `public/${publicPath}`,\n          });\n\n          if (book) {\n            const viewers = await getViewers(parser, {\n              bookSpines: book.spines,\n              publicPath,\n            });\n            booksInfo.push({\n              book,\n              viewers,\n              publicPath,\n            });\n          }\n        }\n      }\n      store.dispatch(booksActions.setBookList(booksInfo));\n\n      return {\n        booksInfo,\n      };\n    } catch (error) {\n      console.log('Error', error);\n    }\n  }\n  return {};\n};\n\nexport default Home;\n"]},"metadata":{},"sourceType":"module"}