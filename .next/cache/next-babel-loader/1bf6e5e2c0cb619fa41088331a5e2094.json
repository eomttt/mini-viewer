{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/hyuntaeeom/Projects/personal/mini-viewer/components/viewer/ViewerCalculator.tsx\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useEffect, useCallback, useReducer } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport * as viewerActions from '../../reducers/viewer';\nimport ViewerCount from './ViewerCount';\nvar PRIVATE_ADD_COUNT_ACTION = 'AddCount';\nvar initialState = {\n  countItems: []\n};\n\nvar privateReducer = function privateReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case PRIVATE_ADD_COUNT_ACTION:\n      {\n        var data = action.payload;\n        return _objectSpread({}, state, {\n          countItems: [].concat(_toConsumableArray(state.countItems), [data])\n        });\n      }\n\n    default:\n      {\n        return _objectSpread({}, state);\n      }\n  }\n};\n\nvar ViewerCalculator = function ViewerCalculator(_ref) {\n  var viewerWidth = _ref.viewerWidth,\n      viewerHeight = _ref.viewerHeight,\n      viewers = _ref.viewers,\n      spines = _ref.spines,\n      viewerStyle = _ref.viewerStyle;\n  var dispatch = useDispatch();\n\n  var _useReducer = useReducer(privateReducer, initialState),\n      reducerState = _useReducer[0],\n      dispatchReducer = _useReducer[1];\n\n  var _useSelector = useSelector(function (state) {\n    return state.viewerSetting;\n  }),\n      fontSize = _useSelector.fontSize,\n      widthRatio = _useSelector.widthRatio,\n      lineHeight = _useSelector.lineHeight;\n\n  var _setCountCallback = useCallback(function (count, index) {\n    var spine = spines[index];\n    dispatchReducer({\n      type: PRIVATE_ADD_COUNT_ACTION,\n      payload: {\n        index: index,\n        count: count,\n        spineId: spine.id\n      }\n    });\n  }, [spines]);\n\n  useEffect(function () {\n    var countItems = reducerState.countItems;\n\n    if (countItems.length >= spines.length) {\n      dispatch(viewerActions.setViewerCountList(countItems));\n    }\n  }, [dispatch, reducerState, spines]);\n  return __jsx(React.Fragment, null, viewers.map(function (viewer, index) {\n    return __jsx(ViewerCount, {\n      key: viewer,\n      viewerWidth: viewerWidth,\n      viewerHeight: viewerHeight,\n      viewer: viewer,\n      viewerStyle: {\n        fontSize: fontSize,\n        widthRatio: widthRatio,\n        lineHeight: lineHeight\n      },\n      setCountCallback: function setCountCallback(count) {\n        return _setCountCallback(count, index);\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    });\n  }));\n};\n\nexport default ViewerCalculator;","map":{"version":3,"sources":["/Users/hyuntaeeom/Projects/personal/mini-viewer/components/viewer/ViewerCalculator.tsx"],"names":["React","useEffect","useCallback","useReducer","useDispatch","useSelector","viewerActions","ViewerCount","PRIVATE_ADD_COUNT_ACTION","initialState","countItems","privateReducer","state","action","type","data","payload","ViewerCalculator","viewerWidth","viewerHeight","viewers","spines","viewerStyle","dispatch","reducerState","dispatchReducer","viewerSetting","fontSize","widthRatio","lineHeight","setCountCallback","count","index","spine","spineId","id","length","setViewerCountList","map","viewer"],"mappings":"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","sourcesContent":["import React, { useEffect, useCallback, useReducer } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport * as viewerActions from '../../reducers/viewer';\n\nimport ViewerCount from './ViewerCount';\n\nimport { ReducerState } from '../../interfaces';\nimport { EpubSpineItem } from '../../interfaces/books';\nimport { ViewerStyle } from '../../interfaces/viewer';\n\ninterface Props {\n  viewerWidth: number;\n  viewerHeight: number;\n  viewers: string[];\n  spines: EpubSpineItem[];\n  viewerStyle: ViewerStyle;\n}\n\nconst PRIVATE_ADD_COUNT_ACTION = 'AddCount';\nconst initialState = {\n  countItems: [],\n};\n\nconst privateReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case PRIVATE_ADD_COUNT_ACTION: {\n      const data = action.payload;\n      return {\n        ...state,\n        countItems: [...state.countItems, data],\n      };\n    }\n    default: {\n      return {\n        ...state,\n      };\n    }\n  }\n};\n\nconst ViewerCalculator: React.FunctionComponent<Props> = ({\n  viewerWidth, viewerHeight,\n  viewers, spines,\n  viewerStyle,\n}) => {\n  const dispatch = useDispatch();\n  const [reducerState, dispatchReducer] = useReducer(privateReducer, initialState);\n\n  const {\n    fontSize, widthRatio, lineHeight,\n  } = useSelector((state: ReducerState) => state.viewerSetting);\n\n  const setCountCallback = useCallback((count: number, index: number) => {\n    const spine = spines[index];\n\n    dispatchReducer({\n      type: PRIVATE_ADD_COUNT_ACTION,\n      payload: {\n        index,\n        count,\n        spineId: spine.id,\n      },\n    });\n  }, [spines]);\n\n  useEffect(() => {\n    const { countItems } = reducerState;\n    if (countItems.length >= spines.length) {\n      dispatch(viewerActions.setViewerCountList(countItems));\n    }\n  }, [dispatch, reducerState, spines]);\n\n  return (\n    <>\n      {\n        viewers.map((viewer, index) => (\n          <ViewerCount\n            key={viewer}\n            viewerWidth={viewerWidth}\n            viewerHeight={viewerHeight}\n            viewer={viewer}\n            viewerStyle={{\n              fontSize,\n              widthRatio,\n              lineHeight,\n            }}\n            setCountCallback={(count) => setCountCallback(count, index)}\n          />\n        ))\n      }\n    </>\n\n  );\n};\n\nexport default ViewerCalculator;\n"]},"metadata":{},"sourceType":"module"}