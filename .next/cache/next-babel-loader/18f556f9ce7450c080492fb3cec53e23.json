{"ast":null,"code":"var _jsxFileName = \"/Users/hyuntaeeom/Projects/personal/mini-viewer/components/viewer/ViewerSetting.tsx\";\nvar __jsx = React.createElement;\nimport React, { useCallback, useState, useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport styled from 'styled-components';\nimport ViewerSettingCountItem from './ViewerSettingCountItem';\nimport ViewerSettingColorItem from './ViewerSettingColorItem';\nimport * as settingActions from '../../reducers/viewerSetting';\nimport { subColor, defaultColor } from '../../styles';\nimport { SETTING_ITEM_KEY, SETTING_ITEM_LABEL, SETTING_ITEM_UNIT, FONT_SIZE_RANGE, WIDTH_RATIO_RANGE, LINE_HEIGHT_RANGE, BACKGROUND_COLORS } from '../../constants/viewer';\nconst Container = styled.div.withConfig({\n  displayName: \"ViewerSetting__Container\",\n  componentId: \"sc-1omnhz6-0\"\n})([\"position:relative;\"]);\nconst ToggleButton = styled.div.withConfig({\n  displayName: \"ViewerSetting__ToggleButton\",\n  componentId: \"sc-1omnhz6-1\"\n})([\"cursor:pointer;\"]);\nconst SettingItems = styled.ul.withConfig({\n  displayName: \"ViewerSetting__SettingItems\",\n  componentId: \"sc-1omnhz6-2\"\n})([\"position:absolute;width:15em;left:50%;transform:translateX(-50%);overflow:scroll;list-style-type:none;margin:0;padding:0;border:1px solid \", \";background-color:\", \";\"], subColor, defaultColor);\n\nconst ViewerSetting = () => {\n  const {\n    fontSize,\n    widthRatio,\n    lineHeight,\n    backgroundColor\n  } = useSelector(state => state.viewerSetting);\n  const dispatch = useDispatch();\n  const {\n    0: isShowSetting,\n    1: setIsShowSetting\n  } = useState(false);\n  const {\n    0: settingItems,\n    1: setSettingItems\n  } = useState([]);\n  useEffect(() => {\n    setSettingItems([{\n      label: SETTING_ITEM_LABEL.FONT_SIZE,\n      key: SETTING_ITEM_KEY.FONT_SIZE,\n      value: fontSize,\n      valueUnit: SETTING_ITEM_UNIT.FONT_SIZE,\n      minValue: FONT_SIZE_RANGE.MIN,\n      maxValue: FONT_SIZE_RANGE.MAX,\n      action: value => {\n        dispatch(settingActions.setViewerSettingFontSize(value));\n      }\n    }, {\n      label: SETTING_ITEM_LABEL.WIDTH_RATIO,\n      key: SETTING_ITEM_KEY.WIDTH_RATIO,\n      value: widthRatio,\n      valueUnit: SETTING_ITEM_UNIT.WIDTH,\n      minValue: WIDTH_RATIO_RANGE.MIN,\n      maxValue: WIDTH_RATIO_RANGE.MAX,\n      action: value => {\n        dispatch(settingActions.setViewerSettingWidthRatio(value));\n      }\n    }, {\n      label: SETTING_ITEM_LABEL.LINE_HEIGHT,\n      key: SETTING_ITEM_KEY.LINE_HEIGHT,\n      value: lineHeight,\n      valueUnit: SETTING_ITEM_UNIT.LINE_HEIGHT,\n      minValue: LINE_HEIGHT_RANGE.MIN,\n      maxValue: LINE_HEIGHT_RANGE.MAX,\n      action: value => {\n        dispatch(settingActions.setViewerSettingLineHeight(value));\n      }\n    }, {\n      label: SETTING_ITEM_LABEL.BACKGROUND_COLOR,\n      key: SETTING_ITEM_KEY.BACKGROUND_COLOR,\n      value: backgroundColor,\n      colors: BACKGROUND_COLORS,\n      action: value => {\n        dispatch(settingActions.setViewerSettingBackgroundColor(value));\n      }\n    }]);\n  }, [dispatch, fontSize, width, lineHeight, backgroundColor]);\n  const toggleShowNcs = useCallback(() => {\n    setIsShowSetting(!isShowSetting);\n  }, [isShowSetting]);\n  const renderSettingItem = useCallback(settingItem => {\n    const {\n      key,\n      label,\n      value,\n      valueUnit,\n      action,\n      minValue,\n      maxValue,\n      colors\n    } = settingItem;\n\n    if (colors) {\n      return __jsx(ViewerSettingColorItem, {\n        key: key,\n        label: label,\n        value: value,\n        colors: colors,\n        action: action,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108\n        },\n        __self: this\n      });\n    }\n\n    return __jsx(ViewerSettingCountItem, {\n      key: key,\n      label: label,\n      value: value,\n      valueUnit: valueUnit,\n      minValue: minValue,\n      maxValue: maxValue,\n      action: action,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118\n      },\n      __self: this\n    });\n  }, []);\n  return __jsx(Container, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131\n    },\n    __self: this\n  }, __jsx(ToggleButton, {\n    onClick: toggleShowNcs,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132\n    },\n    __self: this\n  }, \"\\uC124\\uC815\"), isShowSetting && __jsx(SettingItems, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138\n    },\n    __self: this\n  }, settingItems.map(settingItem => renderSettingItem(settingItem))));\n};\n\nexport default ViewerSetting;","map":{"version":3,"sources":["/Users/hyuntaeeom/Projects/personal/mini-viewer/components/viewer/ViewerSetting.tsx"],"names":["React","useCallback","useState","useEffect","useSelector","useDispatch","styled","ViewerSettingCountItem","ViewerSettingColorItem","settingActions","subColor","defaultColor","SETTING_ITEM_KEY","SETTING_ITEM_LABEL","SETTING_ITEM_UNIT","FONT_SIZE_RANGE","WIDTH_RATIO_RANGE","LINE_HEIGHT_RANGE","BACKGROUND_COLORS","Container","div","ToggleButton","SettingItems","ul","ViewerSetting","fontSize","widthRatio","lineHeight","backgroundColor","state","viewerSetting","dispatch","isShowSetting","setIsShowSetting","settingItems","setSettingItems","label","FONT_SIZE","key","value","valueUnit","minValue","MIN","maxValue","MAX","action","setViewerSettingFontSize","WIDTH_RATIO","WIDTH","setViewerSettingWidthRatio","LINE_HEIGHT","setViewerSettingLineHeight","BACKGROUND_COLOR","colors","setViewerSettingBackgroundColor","width","toggleShowNcs","renderSettingItem","settingItem","map"],"mappings":"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","sourcesContent":["import React, { useCallback, useState, useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\n\nimport styled from 'styled-components';\n\nimport ViewerSettingCountItem from './ViewerSettingCountItem';\nimport ViewerSettingColorItem from './ViewerSettingColorItem';\n\nimport * as settingActions from '../../reducers/viewerSetting';\n\nimport { subColor, defaultColor } from '../../styles';\n\nimport {\n  SETTING_ITEM_KEY,\n  SETTING_ITEM_LABEL,\n  SETTING_ITEM_UNIT,\n  FONT_SIZE_RANGE, WIDTH_RATIO_RANGE, LINE_HEIGHT_RANGE, BACKGROUND_COLORS,\n} from '../../constants/viewer';\n\nimport { ReducerState } from '../../interfaces';\nimport { SettingItem } from '../../interfaces/viewer';\n\nconst Container = styled.div`\n  position: relative;\n`;\n\nconst ToggleButton = styled.div`\n  cursor: pointer;\n`;\n\nconst SettingItems = styled.ul`\n  position: absolute;\n  width: 15em;\n  left: 50%;\n  transform: translateX(-50%);\n  overflow: scroll;\n  list-style-type: none;\n  margin: 0;\n  padding: 0;\n  border: 1px solid ${subColor};\n  background-color: ${defaultColor};\n`;\n\nconst ViewerSetting: React.FunctionComponent = () => {\n  const {\n    fontSize, widthRatio, lineHeight, backgroundColor,\n  } = useSelector((state: ReducerState) => state.viewerSetting);\n  const dispatch = useDispatch();\n\n  const [isShowSetting, setIsShowSetting] = useState(false);\n  const [settingItems, setSettingItems] = useState<SettingItem[]>([]);\n\n  useEffect(() => {\n    setSettingItems([\n      {\n        label: SETTING_ITEM_LABEL.FONT_SIZE,\n        key: SETTING_ITEM_KEY.FONT_SIZE,\n        value: fontSize,\n        valueUnit: SETTING_ITEM_UNIT.FONT_SIZE,\n        minValue: FONT_SIZE_RANGE.MIN,\n        maxValue: FONT_SIZE_RANGE.MAX,\n        action: (value: number) => {\n          dispatch(settingActions.setViewerSettingFontSize(value));\n        },\n      }, {\n        label: SETTING_ITEM_LABEL.WIDTH_RATIO,\n        key: SETTING_ITEM_KEY.WIDTH_RATIO,\n        value: widthRatio,\n        valueUnit: SETTING_ITEM_UNIT.WIDTH,\n        minValue: WIDTH_RATIO_RANGE.MIN,\n        maxValue: WIDTH_RATIO_RANGE.MAX,\n        action: (value: number) => {\n          dispatch(settingActions.setViewerSettingWidthRatio(value));\n        },\n      }, {\n        label: SETTING_ITEM_LABEL.LINE_HEIGHT,\n        key: SETTING_ITEM_KEY.LINE_HEIGHT,\n        value: lineHeight,\n        valueUnit: SETTING_ITEM_UNIT.LINE_HEIGHT,\n        minValue: LINE_HEIGHT_RANGE.MIN,\n        maxValue: LINE_HEIGHT_RANGE.MAX,\n        action: (value: number) => {\n          dispatch(settingActions.setViewerSettingLineHeight(value));\n        },\n      }, {\n        label: SETTING_ITEM_LABEL.BACKGROUND_COLOR,\n        key: SETTING_ITEM_KEY.BACKGROUND_COLOR,\n        value: backgroundColor,\n        colors: BACKGROUND_COLORS,\n        action: (value: string) => {\n          dispatch(settingActions.setViewerSettingBackgroundColor(value));\n        },\n      },\n    ]);\n  }, [dispatch, fontSize, width, lineHeight, backgroundColor]);\n\n  const toggleShowNcs = useCallback(() => {\n    setIsShowSetting(!isShowSetting);\n  }, [isShowSetting]);\n\n  const renderSettingItem = useCallback((settingItem: SettingItem) => {\n    const {\n      key, label, value, valueUnit, action, minValue, maxValue, colors,\n    } = settingItem;\n\n    if (colors) {\n      return (\n        <ViewerSettingColorItem\n          key={key}\n          label={label}\n          value={value}\n          colors={colors}\n          action={action}\n        />\n      );\n    }\n    return (\n      <ViewerSettingCountItem\n        key={key}\n        label={label}\n        value={value}\n        valueUnit={valueUnit}\n        minValue={minValue}\n        maxValue={maxValue}\n        action={action}\n      />\n    );\n  }, []);\n\n  return (\n    <Container>\n      <ToggleButton onClick={toggleShowNcs}>\n        설정\n      </ToggleButton>\n      {\n        isShowSetting\n        && (\n        <SettingItems>\n          {\n            settingItems.map((settingItem) => renderSettingItem(settingItem))\n          }\n        </SettingItems>\n        )\n      }\n    </Container>\n  );\n};\n\nexport default ViewerSetting;\n"]},"metadata":{},"sourceType":"module"}