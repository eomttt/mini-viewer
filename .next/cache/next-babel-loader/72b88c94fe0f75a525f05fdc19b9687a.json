{"ast":null,"code":"export const getBook = async (parser, {\n  unzipPath\n}) => {\n  try {\n    const book = await parser.parse({\n      validatePackage: true,\n      parseStyle: false,\n      unzipPath\n    });\n    return book;\n  } catch (error) {\n    console.log('Get book error', error);\n  }\n\n  return null;\n};\nexport const getViewers = async (parser, {\n  bookSpines,\n  publicPath\n}) => {\n  try {\n    const viewers = await parser.readItems(bookSpines, {\n      force: true,\n      extractBody: true,\n      serializedAnchor: true,\n      ignoreScript: true,\n      basePath: publicPath\n    });\n    return viewers;\n  } catch (error) {\n    console.log('Get viewers error', error);\n  }\n\n  return [];\n};","map":{"version":3,"sources":["/Users/hyuntaeeom/Projects/personal/mini-viewer/lib/util.ts"],"names":["getBook","parser","unzipPath","book","parse","validatePackage","parseStyle","error","console","log","getViewers","bookSpines","publicPath","viewers","readItems","force","extractBody","serializedAnchor","ignoreScript","basePath"],"mappings":"AAEA,OAAO,MAAMA,OAAO,GAAG,OAAOC,MAAP,EAAe;AACpCC,EAAAA;AADoC,CAAf,KAES;AAC9B,MAAI;AACF,UAAMC,IAAc,GAAG,MAAMF,MAAM,CAACG,KAAP,CAAa;AACxCC,MAAAA,eAAe,EAAE,IADuB;AAExCC,MAAAA,UAAU,EAAE,KAF4B;AAGxCJ,MAAAA;AAHwC,KAAb,CAA7B;AAMA,WAAOC,IAAP;AACD,GARD,CAQE,OAAOI,KAAP,EAAc;AACdC,IAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ,EAA8BF,KAA9B;AACD;;AAED,SAAO,IAAP;AACD,CAhBM;AAkBP,OAAO,MAAMG,UAAU,GAAG,OAAOT,MAAP,EAAe;AACvCU,EAAAA,UADuC;AAEvCC,EAAAA;AAFuC,CAAf,KAGD;AACvB,MAAI;AACF,UAAMC,OAAO,GAAG,MAAMZ,MAAM,CAACa,SAAP,CAAiBH,UAAjB,EAA6B;AACjDI,MAAAA,KAAK,EAAE,IAD0C;AAEjDC,MAAAA,WAAW,EAAE,IAFoC;AAGjDC,MAAAA,gBAAgB,EAAE,IAH+B;AAIjDC,MAAAA,YAAY,EAAE,IAJmC;AAKjDC,MAAAA,QAAQ,EAAEP;AALuC,KAA7B,CAAtB;AAQA,WAAOC,OAAP;AACD,GAVD,CAUE,OAAON,KAAP,EAAc;AACdC,IAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ,EAAiCF,KAAjC;AACD;;AAED,SAAO,EAAP;AACD,CAnBM","sourcesContent":["import { EpubBook } from '../interfaces/books';\n\nexport const getBook = async (parser, {\n  unzipPath,\n}): Promise<EpubBook | null> => {\n  try {\n    const book: EpubBook = await parser.parse({\n      validatePackage: true,\n      parseStyle: false,\n      unzipPath,\n    });\n\n    return book;\n  } catch (error) {\n    console.log('Get book error', error);\n  }\n\n  return null;\n};\n\nexport const getViewers = async (parser, {\n  bookSpines,\n  publicPath,\n}): Promise<string[]> => {\n  try {\n    const viewers = await parser.readItems(bookSpines, {\n      force: true,\n      extractBody: true,\n      serializedAnchor: true,\n      ignoreScript: true,\n      basePath: publicPath,\n    });\n\n    return viewers;\n  } catch (error) {\n    console.log('Get viewers error', error);\n  }\n\n  return [];\n};\n"]},"metadata":{},"sourceType":"module"}