{"ast":null,"code":"var _jsxFileName = \"/Users/hyuntaeeom/Projects/personal/mini-viewer/pages/index.tsx\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport { useSelector } from 'react-redux';\nimport Layout from '../components/Layout';\nimport BookList from '../components/books/BookList';\nimport * as booksActions from '../reducers/books';\nimport { getBookInfo, isEpubFile } from '../lib/util';\n\nconst Home = () => {\n  const {\n    list,\n    styles\n  } = useSelector(state => state.books);\n  return __jsx(Layout, {\n    styleLinks: styles,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19\n    },\n    __self: this\n  }, __jsx(BookList, {\n    books: list,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22\n    },\n    __self: this\n  }));\n}; // eslint-disable-next-line @typescript-eslint/unbound-method\n\n\nHome.getInitialProps = async context => {\n  const {\n    req,\n    store\n  } = context;\n\n  if (req) {\n    const fs = require('fs');\n\n    const {\n      EpubParser\n    } = require('@ridi/epub-parser');\n\n    const files = fs.readdirSync('public/');\n    const booksInfo = [];\n    let styles = []; // eslint-disable-next-line no-restricted-syntax\n\n    for (const file of files) {\n      if (isEpubFile(file)) {\n        const [fileName] = file.split('.epub');\n        const epubPath = `epub/${fileName}`;\n\n        try {\n          const {\n            book,\n            viewers\n          } = await getBookInfo(EpubParser, {\n            epubFile: fileName,\n            epubPath\n          });\n          booksInfo.push({\n            book,\n            viewers,\n            publicPath: epubPath\n          });\n          styles = [...styles, ...book.styles.map(style => `${epubPath}/${style.href}`)];\n        } catch (error) {\n          console.log('Error', error);\n        }\n      }\n    }\n\n    store.dispatch(booksActions.setBookStyles(styles));\n    store.dispatch(booksActions.setBookList(booksInfo));\n    return {\n      booksInfo\n    };\n  }\n\n  return {};\n};\n\nexport default Home;","map":{"version":3,"sources":["/Users/hyuntaeeom/Projects/personal/mini-viewer/pages/index.tsx"],"names":["React","useSelector","Layout","BookList","booksActions","getBookInfo","isEpubFile","Home","list","styles","state","books","getInitialProps","context","req","store","fs","require","EpubParser","files","readdirSync","booksInfo","file","fileName","split","epubPath","book","viewers","epubFile","push","publicPath","map","style","href","error","console","log","dispatch","setBookStyles","setBookList"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,WAAT,QAA4B,aAA5B;AAGA,OAAOC,MAAP,MAAmB,sBAAnB;AACA,OAAOC,QAAP,MAAqB,8BAArB;AAEA,OAAO,KAAKC,YAAZ,MAA8B,mBAA9B;AAEA,SAASC,WAAT,EAAsBC,UAAtB,QAAwC,aAAxC;;AAKA,MAAMC,IAAc,GAAG,MAAM;AAC3B,QAAM;AAAEC,IAAAA,IAAF;AAAQC,IAAAA;AAAR,MAAmBR,WAAW,CAAES,KAAD,IAAyBA,KAAK,CAACC,KAAhC,CAApC;AAEA,SACE,MAAC,MAAD;AACA,IAAA,UAAU,EAAEF,MADZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAGE,MAAC,QAAD;AAAU,IAAA,KAAK,EAAED,IAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHF,CADF;AAOD,CAVD,C,CAYA;;;AACAD,IAAI,CAACK,eAAL,GAAuB,MAAOC,OAAP,IAAuD;AAC5E,QAAM;AAAEC,IAAAA,GAAF;AAAOC,IAAAA;AAAP,MAAiBF,OAAvB;;AACA,MAAIC,GAAJ,EAAS;AACP,UAAME,EAAE,GAAGC,OAAO,CAAC,IAAD,CAAlB;;AACA,UAAM;AAAEC,MAAAA;AAAF,QAAiBD,OAAO,CAAC,mBAAD,CAA9B;;AAEA,UAAME,KAAK,GAAGH,EAAE,CAACI,WAAH,CAAe,SAAf,CAAd;AACA,UAAMC,SAAqB,GAAG,EAA9B;AACA,QAAIZ,MAAgB,GAAG,EAAvB,CANO,CAQP;;AACA,SAAK,MAAMa,IAAX,IAAmBH,KAAnB,EAA0B;AACxB,UAAIb,UAAU,CAACgB,IAAD,CAAd,EAAsB;AACpB,cAAM,CAACC,QAAD,IAAaD,IAAI,CAACE,KAAL,CAAW,OAAX,CAAnB;AACA,cAAMC,QAAQ,GAAI,QAAOF,QAAS,EAAlC;;AACA,YAAI;AACF,gBAAM;AAAEG,YAAAA,IAAF;AAAQC,YAAAA;AAAR,cAAoB,MAAMtB,WAAW,CAACa,UAAD,EAAa;AACtDU,YAAAA,QAAQ,EAAEL,QAD4C;AAEtDE,YAAAA;AAFsD,WAAb,CAA3C;AAKAJ,UAAAA,SAAS,CAACQ,IAAV,CAAe;AACbH,YAAAA,IADa;AAEbC,YAAAA,OAFa;AAGbG,YAAAA,UAAU,EAAEL;AAHC,WAAf;AAKAhB,UAAAA,MAAM,GAAG,CAAC,GAAGA,MAAJ,EAAY,GAAGiB,IAAI,CAACjB,MAAL,CAAYsB,GAAZ,CAAiBC,KAAD,IAAY,GAAEP,QAAS,IAAGO,KAAK,CAACC,IAAK,EAArD,CAAf,CAAT;AACD,SAZD,CAYE,OAAOC,KAAP,EAAc;AACdC,UAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBF,KAArB;AACD;AACF;AACF;;AACDnB,IAAAA,KAAK,CAACsB,QAAN,CAAejC,YAAY,CAACkC,aAAb,CAA2B7B,MAA3B,CAAf;AACAM,IAAAA,KAAK,CAACsB,QAAN,CAAejC,YAAY,CAACmC,WAAb,CAAyBlB,SAAzB,CAAf;AAEA,WAAO;AACLA,MAAAA;AADK,KAAP;AAGD;;AACD,SAAO,EAAP;AACD,CAxCD;;AA0CA,eAAed,IAAf","sourcesContent":["import React from 'react';\nimport { useSelector } from 'react-redux';\nimport { NextPageContext, NextPage } from 'next';\n\nimport Layout from '../components/Layout';\nimport BookList from '../components/books/BookList';\n\nimport * as booksActions from '../reducers/books';\n\nimport { getBookInfo, isEpubFile } from '../lib/util';\n\nimport { ReducerState } from '../interfaces';\nimport { BookInfo } from '../interfaces/books';\n\nconst Home: NextPage = () => {\n  const { list, styles } = useSelector((state: ReducerState) => state.books);\n\n  return (\n    <Layout\n    styleLinks={styles}\n    >\n      <BookList books={list} />\n    </Layout>\n  );\n};\n\n// eslint-disable-next-line @typescript-eslint/unbound-method\nHome.getInitialProps = async (context: NextPageContext<any>): Promise<any> => {\n  const { req, store } = context;\n  if (req) {\n    const fs = require('fs');\n    const { EpubParser } = require('@ridi/epub-parser');\n\n    const files = fs.readdirSync('public/');\n    const booksInfo: BookInfo[] = [];\n    let styles: string[] = [];\n\n    // eslint-disable-next-line no-restricted-syntax\n    for (const file of files) {\n      if (isEpubFile(file)) {\n        const [fileName] = file.split('.epub');\n        const epubPath = `epub/${fileName}`;\n        try {\n          const { book, viewers } = await getBookInfo(EpubParser, {\n            epubFile: fileName,\n            epubPath,\n          });\n\n          booksInfo.push({\n            book,\n            viewers,\n            publicPath: epubPath,\n          });\n          styles = [...styles, ...book.styles.map((style) => `${epubPath}/${style.href}`)];\n        } catch (error) {\n          console.log('Error', error);\n        }\n      }\n    }\n    store.dispatch(booksActions.setBookStyles(styles));\n    store.dispatch(booksActions.setBookList(booksInfo));\n\n    return {\n      booksInfo,\n    };\n  }\n  return {};\n};\n\nexport default Home;\n"]},"metadata":{},"sourceType":"module"}