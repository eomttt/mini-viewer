{"ast":null,"code":"var _jsxFileName = \"/Users/hyuntaeeom/Projects/personal/mini-viewer/pages/viewer.tsx\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport ViewerPageComponent from '../components/viewer/ViewerPage';\nimport Layout from '../components/Layout';\n\nconst Viewer = ({\n  book,\n  viewerSpines,\n  styleLinks\n}) => __jsx(Layout, {\n  styleLinks: styleLinks,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 17\n  },\n  __self: this\n}, __jsx(ViewerPageComponent, {\n  spines: book.spines,\n  viewerSpines: viewerSpines,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 20\n  },\n  __self: this\n})); // eslint-disable-next-line @typescript-eslint/unbound-method\n\n\nViewer.getInitialProps = async context => {\n  const {\n    req\n  } = context;\n\n  if (req) {\n    const {\n      EpubParser\n    } = require('@ridi/epub-parser');\n\n    try {\n      const parser = new EpubParser('public/jikji.epub');\n      const book = await parser.parse({\n        validatePackage: true,\n        parseStyle: false,\n        unzipPath: 'public/epub/jikji'\n      });\n      const viewerSpines = await parser.readItems(book.spines, {\n        force: true,\n        extractBody: true,\n        serializedAnchor: true,\n        ignoreScript: true,\n        basePath: 'epub/jikji'\n      });\n      return {\n        book,\n        viewerSpines,\n        styleLinks: book.styles.map(style => `epub/jikji/${style.href}`),\n        basePath: 'epub/jikji'\n      };\n    } catch (error) {\n      console.log('Error', error);\n    }\n  }\n\n  return {};\n};\n\nexport default Viewer;","map":{"version":3,"sources":["/Users/hyuntaeeom/Projects/personal/mini-viewer/pages/viewer.tsx"],"names":["React","ViewerPageComponent","Layout","Viewer","book","viewerSpines","styleLinks","spines","getInitialProps","context","req","EpubParser","require","parser","parse","validatePackage","parseStyle","unzipPath","readItems","force","extractBody","serializedAnchor","ignoreScript","basePath","styles","map","style","href","error","console","log"],"mappings":";;AAAA,OAAOA,KAAP,MAA2C,OAA3C;AAIA,OAAOC,mBAAP,MAAgC,iCAAhC;AAGA,OAAOC,MAAP,MAAmB,sBAAnB;;AAQA,MAAMC,MAAuB,GAAG,CAAC;AAAEC,EAAAA,IAAF;AAAQC,EAAAA,YAAR;AAAsBC,EAAAA;AAAtB,CAAD,KAC9B,MAAC,MAAD;AACE,EAAA,UAAU,EAAEA,UADd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAGE,MAAC,mBAAD;AACE,EAAA,MAAM,EAAEF,IAAI,CAACG,MADf;AAEE,EAAA,YAAY,EAAEF,YAFhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAHF,CADF,C,CAWA;;;AACAF,MAAM,CAACK,eAAP,GAAyB,MAAOC,OAAP,IAAuD;AAC9E,QAAM;AAAEC,IAAAA;AAAF,MAAUD,OAAhB;;AACA,MAAIC,GAAJ,EAAS;AACP,UAAM;AAAEC,MAAAA;AAAF,QAAiBC,OAAO,CAAC,mBAAD,CAA9B;;AACA,QAAI;AACF,YAAMC,MAAM,GAAG,IAAIF,UAAJ,CAAe,mBAAf,CAAf;AACA,YAAMP,IAAc,GAAG,MAAMS,MAAM,CAACC,KAAP,CAAa;AACxCC,QAAAA,eAAe,EAAE,IADuB;AAExCC,QAAAA,UAAU,EAAE,KAF4B;AAGxCC,QAAAA,SAAS,EAAE;AAH6B,OAAb,CAA7B;AAKA,YAAMZ,YAAY,GAAG,MAAMQ,MAAM,CAACK,SAAP,CAAiBd,IAAI,CAACG,MAAtB,EAA8B;AACvDY,QAAAA,KAAK,EAAE,IADgD;AAEvDC,QAAAA,WAAW,EAAE,IAF0C;AAGvDC,QAAAA,gBAAgB,EAAE,IAHqC;AAIvDC,QAAAA,YAAY,EAAE,IAJyC;AAKvDC,QAAAA,QAAQ,EAAE;AAL6C,OAA9B,CAA3B;AAQA,aAAO;AACLnB,QAAAA,IADK;AAELC,QAAAA,YAFK;AAGLC,QAAAA,UAAU,EAAEF,IAAI,CAACoB,MAAL,CAAYC,GAAZ,CAAiBC,KAAD,IAAY,cAAaA,KAAK,CAACC,IAAK,EAApD,CAHP;AAILJ,QAAAA,QAAQ,EAAE;AAJL,OAAP;AAMD,KArBD,CAqBE,OAAOK,KAAP,EAAc;AACdC,MAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBF,KAArB;AACD;AACF;;AAGD,SAAO,EAAP;AACD,CAhCD;;AAkCA,eAAezB,MAAf","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { NextPageContext, NextPage } from 'next';\nimport Head from 'next/head';\n\nimport ViewerPageComponent from '../components/viewer/ViewerPage';\n\nimport { EpubBook } from '../interfaces/books';\nimport Layout from '../components/Layout';\n\ninterface Props {\n  book: EpubBook;\n  viewerSpines: string[];\n  styleLinks: string[];\n}\n\nconst Viewer: NextPage<Props> = ({ book, viewerSpines, styleLinks }) => (\n  <Layout\n    styleLinks={styleLinks}\n  >\n    <ViewerPageComponent\n      spines={book.spines}\n      viewerSpines={viewerSpines}\n    />\n  </Layout>\n);\n\n// eslint-disable-next-line @typescript-eslint/unbound-method\nViewer.getInitialProps = async (context: NextPageContext<any>): Promise<any> => {\n  const { req } = context;\n  if (req) {\n    const { EpubParser } = require('@ridi/epub-parser');\n    try {\n      const parser = new EpubParser('public/jikji.epub');\n      const book: EpubBook = await parser.parse({\n        validatePackage: true,\n        parseStyle: false,\n        unzipPath: 'public/epub/jikji',\n      });\n      const viewerSpines = await parser.readItems(book.spines, {\n        force: true,\n        extractBody: true,\n        serializedAnchor: true,\n        ignoreScript: true,\n        basePath: 'epub/jikji',\n      });\n\n      return {\n        book,\n        viewerSpines,\n        styleLinks: book.styles.map((style) => `epub/jikji/${style.href}`),\n        basePath: 'epub/jikji',\n      };\n    } catch (error) {\n      console.log('Error', error);\n    }\n  }\n\n\n  return {};\n};\n\nexport default Viewer;\n"]},"metadata":{},"sourceType":"module"}