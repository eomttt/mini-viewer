{"ast":null,"code":"import axios from 'axios';\nexport const getBook = async (parser, {\n  unzipPath\n}) => {\n  try {\n    const book = await parser.parse({\n      validatePackage: true,\n      parseStyle: false,\n      unzipPath\n    });\n    return book;\n  } catch (error) {\n    console.log('Get book error', error);\n  }\n\n  return null;\n};\nexport const getViewers = async (parser, {\n  bookSpines,\n  publicPath\n}) => {\n  try {\n    const viewers = await parser.readItems(bookSpines, {\n      force: true,\n      extractBody: true,\n      serializedAnchor: true,\n      ignoreScript: true,\n      basePath: publicPath\n    });\n    return viewers;\n  } catch (error) {\n    console.log('Get viewers error', error);\n  }\n\n  return [];\n};\nexport const getBookInfo = async (EpubParser, {\n  epubFile,\n  epubPath\n}) => {\n  const parser = new EpubParser(`public/${epubFile}.epub`);\n\n  try {\n    const book = await getBook(parser, {\n      unzipPath: `public/${epubPath}`\n    });\n\n    if (book) {\n      const viewers = await getViewers(parser, {\n        bookSpines: book.spines,\n        publicPath: epubPath\n      });\n      return {\n        book,\n        viewers\n      };\n    }\n  } catch (error) {\n    console.log('Get book info error', error);\n  }\n\n  return {\n    book: null,\n    viewers: []\n  };\n};\nexport const isEpubFile = fileName => {\n  return fileName.includes('.epub');\n};\nexport const getStyleText = async (publicPath, styles) => {\n  const res = []; // eslint-disable-next-line no-restricted-syntax\n\n  for (const style of styles) {\n    try {\n      const data = await axios.get(`${publicPath}/${style.href}`);\n      res.push(data.data);\n    } catch (error) {\n      console.log('Get style text error', error);\n    }\n  }\n\n  return res.join('');\n};","map":null,"metadata":{},"sourceType":"module"}